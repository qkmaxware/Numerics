{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Qkmaxware.Numerics is a C# library for numerical analysis. Since Numerics is built off of .Net Standard 2.1 , it is compatible with the .Net Framework as well as .Net Core . This site serves as a resource for installing and using the Numerics Library. What is Numerical Analysis Numerical analysis is the study of functions, algorithms, and data that use numerical approximations as opposed to symbolic manipulations. Typically, numerical analysis is used in the fields of engineering, physical science, and scientific computations. Numerical analysis methods cover a wide variety of topics including integration and derivation, differential equation solving, linear algebra, complex analysis, and statistics.","title":"Welcome"},{"location":"#welcome","text":"Qkmaxware.Numerics is a C# library for numerical analysis. Since Numerics is built off of .Net Standard 2.1 , it is compatible with the .Net Framework as well as .Net Core . This site serves as a resource for installing and using the Numerics Library.","title":"Welcome"},{"location":"#what-is-numerical-analysis","text":"Numerical analysis is the study of functions, algorithms, and data that use numerical approximations as opposed to symbolic manipulations. Typically, numerical analysis is used in the fields of engineering, physical science, and scientific computations. Numerical analysis methods cover a wide variety of topics including integration and derivation, differential equation solving, linear algebra, complex analysis, and statistics.","title":"What is Numerical Analysis"},{"location":"installing/","text":"Installation Qkmaxware.Numerics is distributed as a Nuget package via Github's Package Repository . Github Access Token Github requires that all users will need to authenticate with Github in order to download packages. At the time of writing, the process for creating such a token located on docs.github.com . When creating this token make sure that it permissions to read:packages enabled which is required to download github packages. Adding Package Create an empty project or use an existing .Net project dotnet new console Create a new file at the root of the project named nuget.config and paste the following xml into it. Replace %USERNAME% with your Github username and %ACCESS_TOKEN% with the access token that you created previously. <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <add key=\"qkmaxware\" value=\"https://nuget.pkg.github.com/qkmaxware/index.json\" /> </packageSources> <packageSourceCredentials> <qkmaxware> <add key=\"Username\" value=\"%USERNAME%\" /> <add key=\"ClearTextPassword\" value=\"%ACCESS_TOKEN%\" /> </qkmaxware> </packageSourceCredentials> </configuration> Add the Qkmaxware.Numerics package, make sure to specify Github as the package source dotnet add package Qkmaxware.Numerics --source \"https://nuget.pkg.github.com/qkmaxware/index.json\"","title":"Installation"},{"location":"installing/#installation","text":"Qkmaxware.Numerics is distributed as a Nuget package via Github's Package Repository .","title":"Installation"},{"location":"installing/#github-access-token","text":"Github requires that all users will need to authenticate with Github in order to download packages. At the time of writing, the process for creating such a token located on docs.github.com . When creating this token make sure that it permissions to read:packages enabled which is required to download github packages.","title":"Github Access Token"},{"location":"installing/#adding-package","text":"Create an empty project or use an existing .Net project dotnet new console Create a new file at the root of the project named nuget.config and paste the following xml into it. Replace %USERNAME% with your Github username and %ACCESS_TOKEN% with the access token that you created previously. <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <add key=\"qkmaxware\" value=\"https://nuget.pkg.github.com/qkmaxware/index.json\" /> </packageSources> <packageSourceCredentials> <qkmaxware> <add key=\"Username\" value=\"%USERNAME%\" /> <add key=\"ClearTextPassword\" value=\"%ACCESS_TOKEN%\" /> </qkmaxware> </packageSourceCredentials> </configuration> Add the Qkmaxware.Numerics package, make sure to specify Github as the package source dotnet add package Qkmaxware.Numerics --source \"https://nuget.pkg.github.com/qkmaxware/index.json\"","title":"Adding Package"},{"location":"arithmetic/calculators/","text":"Calculators Sometimes it is preferred to use data-types other than C#'s double to describe certain mathematical operations. Floats, integers, complex numbers, or even boolean values for masks all have their uses. In order to make this possible within the capabilities of the C# language, calculators are employed through all aspects of this library. Calculators are objects that describe how basic arithmetic works for specific data-types. For the most part, calculators for primitive data-types such as double, or int will simply use the built in arithmetic operators such as + and - . However, the calculator abstraction can be used to create more unique arithmetic systems, or provide additional safety checks if that is so desired. The base interface for a calculator object is the ICalculator<T> interface where T is the data-type whose operations are being described by the calculator. Calculators describe each following arithmetic operations as well as describing what value is used for the constant 1 : addition subtraction multiplication division negation comparison constant '1' The following calculator classes come pre-built with this library. IntCalculator : ICalculator< int > DoubleCalculator : ICalculator< double > ComplexCalculator : ICalculator< Complex >","title":"Calculators"},{"location":"arithmetic/calculators/#calculators","text":"Sometimes it is preferred to use data-types other than C#'s double to describe certain mathematical operations. Floats, integers, complex numbers, or even boolean values for masks all have their uses. In order to make this possible within the capabilities of the C# language, calculators are employed through all aspects of this library. Calculators are objects that describe how basic arithmetic works for specific data-types. For the most part, calculators for primitive data-types such as double, or int will simply use the built in arithmetic operators such as + and - . However, the calculator abstraction can be used to create more unique arithmetic systems, or provide additional safety checks if that is so desired. The base interface for a calculator object is the ICalculator<T> interface where T is the data-type whose operations are being described by the calculator. Calculators describe each following arithmetic operations as well as describing what value is used for the constant 1 : addition subtraction multiplication division negation comparison constant '1' The following calculator classes come pre-built with this library. IntCalculator : ICalculator< int > DoubleCalculator : ICalculator< double > ComplexCalculator : ICalculator< Complex >","title":"Calculators"},{"location":"arithmetic/function/","text":"Functions Native Functions Native functions are functions that can be represented exactly by the evaluation of a C# function. These functions are considered exact in that they are expected to work for all valid input parametres. Native functions are classes that implement the function interface abstraction IFunction . The example below shows a native C# function which works for all valid parametres of type double . DoubleFunction func = new DoubleFunction((x) => Math.Sin(x)); Interpolated Functions Often, functions cannot be represented exactly on a computer. This could be because the function is derived from experimental data points and the actual function is unknown, or because the actual function it too computationally heavy. For these cases, function interpolation is used. Interpolated functions all extend from the BaseInterpolatedFunction class. For interpolated functions, a series of sample points are needed. For any value on the interpolated curve, the value is the result of interpolating a value from among the provided sample points. Good choices of the sample points and the interpolation method are a necessity for the quality of the interpolated function. A comparison of some of the common interpolation methods can be seen in the figure below. By default, linear interpolation is used unless otherwise stated. However this can be changed by assigning new interpolation functions to the InterpolationMethod member of the BaseInterpolatedFunction class. Interpolated functions behave exactly like native functions and can be used anywhere that accepts an IFunction as an argument. Usually the double data-type is preferred for representing real values. The class DoubleInterpolatedFunction is a class that extends from BaseInterpolatedFunction but is specialized for the double data-type. var xs = new double[] { ... }; var ys = new double[] { ... }; var function = new DoubleInterpolatedFunction(xs, ys);","title":"Functions"},{"location":"arithmetic/function/#functions","text":"","title":"Functions"},{"location":"arithmetic/function/#native-functions","text":"Native functions are functions that can be represented exactly by the evaluation of a C# function. These functions are considered exact in that they are expected to work for all valid input parametres. Native functions are classes that implement the function interface abstraction IFunction . The example below shows a native C# function which works for all valid parametres of type double . DoubleFunction func = new DoubleFunction((x) => Math.Sin(x));","title":"Native Functions"},{"location":"arithmetic/function/#interpolated-functions","text":"Often, functions cannot be represented exactly on a computer. This could be because the function is derived from experimental data points and the actual function is unknown, or because the actual function it too computationally heavy. For these cases, function interpolation is used. Interpolated functions all extend from the BaseInterpolatedFunction class. For interpolated functions, a series of sample points are needed. For any value on the interpolated curve, the value is the result of interpolating a value from among the provided sample points. Good choices of the sample points and the interpolation method are a necessity for the quality of the interpolated function. A comparison of some of the common interpolation methods can be seen in the figure below. By default, linear interpolation is used unless otherwise stated. However this can be changed by assigning new interpolation functions to the InterpolationMethod member of the BaseInterpolatedFunction class. Interpolated functions behave exactly like native functions and can be used anywhere that accepts an IFunction as an argument. Usually the double data-type is preferred for representing real values. The class DoubleInterpolatedFunction is a class that extends from BaseInterpolatedFunction but is specialized for the double data-type. var xs = new double[] { ... }; var ys = new double[] { ... }; var function = new DoubleInterpolatedFunction(xs, ys);","title":"Interpolated Functions"},{"location":"calculus/derivatives/","text":".katex img { display: block; position: absolute; width: 100%; height: inherit; } Differentiation Often mathematical problems involve finding tangent lines to a curve, or physics problems ask for the rate of change for a physical property such as position or velocity. These problems are related in that they can both be solved using derivatives. Derivatives describe the slope of a curve at any point. The meaning of these slopes is determined only by the context of the problem being asked. Derivatives are analogous to computing the slope between two points on a curve and taking the limit as those two points approach each other. f \u2032 ( x ) = lim \u2061 h \u2192 0 f ( x + h ) \u2212 f ( x ) h f'(x) = \\lim_{h \\rightarrow 0}\\frac{f(x + h) - f(x)}{h} f \u2032 ( x ) = h \u2192 0 lim \u200b h f ( x + h ) \u2212 f ( x ) \u200b The chart below shows the function y = x 2 y = x^{2} y = x 2 as well as its derivative y \u2032 = 2 x y' = 2x y \u2032 = 2 x . For any point x x x on the function, its slope can be determined by evaluating the derivative at the same x x x . In numerical differentiation the derivative of a function is not solved symbolically like above. Instead numerical techniques only compute the derivatives of a few specific points and interpolation is used to approximate the slope in-between those values. As such, the derivatives at the sample points will have the highest computational accuracy whereas the interpolated values can have substantially lower accuracy. Correctly choosing the right points to sample the derivative at increases the quality of the resulting approximation. Three-Point Formulae Midpoint Method f \u2032 ( x 0 ) = 1 2 h [ f ( x 0 + h ) \u2212 f ( x 0 \u2212 h ) ] f'(x_0) = \\frac{1}{2h}[f(x_0 + h) - f(x_0 - h)] f \u2032 ( x 0 \u200b ) = 2 h 1 \u200b [ f ( x 0 \u200b + h ) \u2212 f ( x 0 \u200b \u2212 h ) ] DoubleRange domain = new DoubleRange(start: 0, end: Math.PI, increment: 0.01); DoubleFunction f = new DoubleFunction((x) => Math.Sin(x)); var differentiator = new CentredThreePointDifferentiator(); // Midpoint method var fPrime = differentiator.Differentiate(f, domain); Endpoint Method f \u2032 ( x 0 ) = 1 2 h [ \u2212 3 f ( x 0 ) + 4 f ( x 0 + h ) \u2212 f ( x 0 + 2 h ) ] f'(x_0) = \\frac{1}{2h}[-3f(x_0) + 4f(x_0 + h) - f(x_0 + 2h)] f \u2032 ( x 0 \u200b ) = 2 h 1 \u200b [ \u2212 3 f ( x 0 \u200b ) + 4 f ( x 0 \u200b + h ) \u2212 f ( x 0 \u200b + 2 h ) ] DoubleRange domain = new DoubleRange(start: 0, end: Math.PI, increment: 0.01); DoubleFunction f = new DoubleFunction((x) => Math.Sin(x)); var differentiator = new EndpointThreePointDifferentiator(); // Endpoint method var fPrime = differentiator.Differentiate(f, domain); Five-Point Formulae Midpoint Method f \u2032 ( x 0 ) = 1 12 h [ f ( x 0 \u2212 2 h ) \u2212 8 f ( x 0 \u2212 h ) + 8 f ( x 0 + h ) \u2212 f ( x 0 + 2 h ) ] f'(x_0) = \\frac{1}{12h}[f(x_0 - 2h) - 8f(x_0 - h) + 8f(x_0 + h) - f(x_0 + 2h)] f \u2032 ( x 0 \u200b ) = 1 2 h 1 \u200b [ f ( x 0 \u200b \u2212 2 h ) \u2212 8 f ( x 0 \u200b \u2212 h ) + 8 f ( x 0 \u200b + h ) \u2212 f ( x 0 \u200b + 2 h ) ] DoubleRange domain = new DoubleRange(start: 0, end: Math.PI, increment: 0.01); DoubleFunction f = new DoubleFunction((x) => Math.Sin(x)); var differentiator = new CentredFivePointDifferentiator(); // Midpoint method var fPrime = differentiator.Differentiate(f, domain); Endpoint Method f \u2032 ( x 0 ) = 1 12 h [ \u2212 25 f ( x 0 ) + 48 f ( x 0 + h ) \u2212 36 f ( x 0 + 2 h ) + 16 f ( x 0 + 3 h ) \u2212 3 f ( x 0 + 4 h ) ] f'(x_0) = \\frac{1}{12h}[-25f(x_0) + 48f(x_0 + h) - 36f(x_0 + 2h) + 16f(x_0 + 3h) -3f(x_0 + 4h)] f \u2032 ( x 0 \u200b ) = 1 2 h 1 \u200b [ \u2212 2 5 f ( x 0 \u200b ) + 4 8 f ( x 0 \u200b + h ) \u2212 3 6 f ( x 0 \u200b + 2 h ) + 1 6 f ( x 0 \u200b + 3 h ) \u2212 3 f ( x 0 \u200b + 4 h ) ] DoubleRange domain = new DoubleRange(start: 0, end: Math.PI, increment: 0.01); DoubleFunction f = new DoubleFunction((x) => Math.Sin(x)); var differentiator = new EndpointFivePointDifferentiator(); // Endpoint method var fPrime = differentiator.Differentiate(f, domain);","title":"Differentiation"},{"location":"calculus/derivatives/#differentiation","text":"Often mathematical problems involve finding tangent lines to a curve, or physics problems ask for the rate of change for a physical property such as position or velocity. These problems are related in that they can both be solved using derivatives. Derivatives describe the slope of a curve at any point. The meaning of these slopes is determined only by the context of the problem being asked. Derivatives are analogous to computing the slope between two points on a curve and taking the limit as those two points approach each other. f \u2032 ( x ) = lim \u2061 h \u2192 0 f ( x + h ) \u2212 f ( x ) h f'(x) = \\lim_{h \\rightarrow 0}\\frac{f(x + h) - f(x)}{h} f \u2032 ( x ) = h \u2192 0 lim \u200b h f ( x + h ) \u2212 f ( x ) \u200b The chart below shows the function y = x 2 y = x^{2} y = x 2 as well as its derivative y \u2032 = 2 x y' = 2x y \u2032 = 2 x . For any point x x x on the function, its slope can be determined by evaluating the derivative at the same x x x . In numerical differentiation the derivative of a function is not solved symbolically like above. Instead numerical techniques only compute the derivatives of a few specific points and interpolation is used to approximate the slope in-between those values. As such, the derivatives at the sample points will have the highest computational accuracy whereas the interpolated values can have substantially lower accuracy. Correctly choosing the right points to sample the derivative at increases the quality of the resulting approximation.","title":"Differentiation"},{"location":"calculus/derivatives/#three-point-formulae","text":"","title":"Three-Point Formulae"},{"location":"calculus/derivatives/#midpoint-method","text":"f \u2032 ( x 0 ) = 1 2 h [ f ( x 0 + h ) \u2212 f ( x 0 \u2212 h ) ] f'(x_0) = \\frac{1}{2h}[f(x_0 + h) - f(x_0 - h)] f \u2032 ( x 0 \u200b ) = 2 h 1 \u200b [ f ( x 0 \u200b + h ) \u2212 f ( x 0 \u200b \u2212 h ) ] DoubleRange domain = new DoubleRange(start: 0, end: Math.PI, increment: 0.01); DoubleFunction f = new DoubleFunction((x) => Math.Sin(x)); var differentiator = new CentredThreePointDifferentiator(); // Midpoint method var fPrime = differentiator.Differentiate(f, domain);","title":"Midpoint Method"},{"location":"calculus/derivatives/#endpoint-method","text":"f \u2032 ( x 0 ) = 1 2 h [ \u2212 3 f ( x 0 ) + 4 f ( x 0 + h ) \u2212 f ( x 0 + 2 h ) ] f'(x_0) = \\frac{1}{2h}[-3f(x_0) + 4f(x_0 + h) - f(x_0 + 2h)] f \u2032 ( x 0 \u200b ) = 2 h 1 \u200b [ \u2212 3 f ( x 0 \u200b ) + 4 f ( x 0 \u200b + h ) \u2212 f ( x 0 \u200b + 2 h ) ] DoubleRange domain = new DoubleRange(start: 0, end: Math.PI, increment: 0.01); DoubleFunction f = new DoubleFunction((x) => Math.Sin(x)); var differentiator = new EndpointThreePointDifferentiator(); // Endpoint method var fPrime = differentiator.Differentiate(f, domain);","title":"Endpoint Method"},{"location":"calculus/derivatives/#five-point-formulae","text":"","title":"Five-Point Formulae"},{"location":"calculus/derivatives/#midpoint-method_1","text":"f \u2032 ( x 0 ) = 1 12 h [ f ( x 0 \u2212 2 h ) \u2212 8 f ( x 0 \u2212 h ) + 8 f ( x 0 + h ) \u2212 f ( x 0 + 2 h ) ] f'(x_0) = \\frac{1}{12h}[f(x_0 - 2h) - 8f(x_0 - h) + 8f(x_0 + h) - f(x_0 + 2h)] f \u2032 ( x 0 \u200b ) = 1 2 h 1 \u200b [ f ( x 0 \u200b \u2212 2 h ) \u2212 8 f ( x 0 \u200b \u2212 h ) + 8 f ( x 0 \u200b + h ) \u2212 f ( x 0 \u200b + 2 h ) ] DoubleRange domain = new DoubleRange(start: 0, end: Math.PI, increment: 0.01); DoubleFunction f = new DoubleFunction((x) => Math.Sin(x)); var differentiator = new CentredFivePointDifferentiator(); // Midpoint method var fPrime = differentiator.Differentiate(f, domain);","title":"Midpoint Method"},{"location":"calculus/derivatives/#endpoint-method_1","text":"f \u2032 ( x 0 ) = 1 12 h [ \u2212 25 f ( x 0 ) + 48 f ( x 0 + h ) \u2212 36 f ( x 0 + 2 h ) + 16 f ( x 0 + 3 h ) \u2212 3 f ( x 0 + 4 h ) ] f'(x_0) = \\frac{1}{12h}[-25f(x_0) + 48f(x_0 + h) - 36f(x_0 + 2h) + 16f(x_0 + 3h) -3f(x_0 + 4h)] f \u2032 ( x 0 \u200b ) = 1 2 h 1 \u200b [ \u2212 2 5 f ( x 0 \u200b ) + 4 8 f ( x 0 \u200b + h ) \u2212 3 6 f ( x 0 \u200b + 2 h ) + 1 6 f ( x 0 \u200b + 3 h ) \u2212 3 f ( x 0 \u200b + 4 h ) ] DoubleRange domain = new DoubleRange(start: 0, end: Math.PI, increment: 0.01); DoubleFunction f = new DoubleFunction((x) => Math.Sin(x)); var differentiator = new EndpointFivePointDifferentiator(); // Endpoint method var fPrime = differentiator.Differentiate(f, domain);","title":"Endpoint Method"},{"location":"calculus/differentials/","text":".katex img { display: block; position: absolute; width: 100%; height: inherit; } Differential Equations Differential equations are equations that relate one or more functions to their associated derivatives. Such equations are common in engineering, physics, economics and biology. Ordinary differential equations are differential equations that only have a single independent variable. Partial differential equations have many independent variables. d y d t = f ( t ) , d y d t = f ( t , y ) \\frac{dy}{dt} = f(t), \\frac{dy}{dt} = f(t, y) d t d y \u200b = f ( t ) , d t d y \u200b = f ( t , y ) Initial Value Problems Initial value problems are attempts to determine the value of a function from a differential equation knowing only the initial conditions of the function. d y d t = f ( t , y ) , a \u2264 t \u2264 b , y ( a ) = y 0 \\frac{dy}{dt} = f(t, y), a \\leq t \\leq b, y(a) = y0 d t d y \u200b = f ( t , y ) , a \u2264 t \u2264 b , y ( a ) = y 0 Euler's Method DoubleRange t = new DoubleRange(0, 2); double y0 = 0.5; DoubleFunction2 dydt = new DoubleFunction2((t,y) => (y - t * t + 1)); var solver = new EulerIvpSolver(); var y = solver.Solve(dydt, t, y0); // Approximates y = (t + 1)^2 - 0.5 * e^t Fourth Order Runge-Kutta DoubleRange t = new DoubleRange(0, 2); double y0 = 0.5; DoubleFunction2 dydt = new DoubleFunction2((t,y) => (y - t * t + 1)); var solver = new RungeKuttaIvpSolver(); var y = solver.Solve(dydt, t, y0); // Approximates y = (t + 1)^2 - 0.5 * e^t Boundary Value Problems","title":"Differential Equations"},{"location":"calculus/differentials/#differential-equations","text":"Differential equations are equations that relate one or more functions to their associated derivatives. Such equations are common in engineering, physics, economics and biology. Ordinary differential equations are differential equations that only have a single independent variable. Partial differential equations have many independent variables. d y d t = f ( t ) , d y d t = f ( t , y ) \\frac{dy}{dt} = f(t), \\frac{dy}{dt} = f(t, y) d t d y \u200b = f ( t ) , d t d y \u200b = f ( t , y )","title":"Differential Equations"},{"location":"calculus/differentials/#initial-value-problems","text":"Initial value problems are attempts to determine the value of a function from a differential equation knowing only the initial conditions of the function. d y d t = f ( t , y ) , a \u2264 t \u2264 b , y ( a ) = y 0 \\frac{dy}{dt} = f(t, y), a \\leq t \\leq b, y(a) = y0 d t d y \u200b = f ( t , y ) , a \u2264 t \u2264 b , y ( a ) = y 0","title":"Initial Value Problems"},{"location":"calculus/differentials/#eulers-method","text":"DoubleRange t = new DoubleRange(0, 2); double y0 = 0.5; DoubleFunction2 dydt = new DoubleFunction2((t,y) => (y - t * t + 1)); var solver = new EulerIvpSolver(); var y = solver.Solve(dydt, t, y0); // Approximates y = (t + 1)^2 - 0.5 * e^t","title":"Euler's Method"},{"location":"calculus/differentials/#fourth-order-runge-kutta","text":"DoubleRange t = new DoubleRange(0, 2); double y0 = 0.5; DoubleFunction2 dydt = new DoubleFunction2((t,y) => (y - t * t + 1)); var solver = new RungeKuttaIvpSolver(); var y = solver.Solve(dydt, t, y0); // Approximates y = (t + 1)^2 - 0.5 * e^t","title":"Fourth Order Runge-Kutta"},{"location":"calculus/differentials/#boundary-value-problems","text":"","title":"Boundary Value Problems"},{"location":"calculus/integration/","text":".katex img { display: block; position: absolute; width: 100%; height: inherit; } Integration Whereas differentiation describes the rate of change of a curve, integration describes the displacement area of a curve. Integration is also sometimes referred to an anti-derivative in its indefinite form as it can act as an inverse of differentiation. Definite Integration In definite integration, one computes the area under the curve between a given start and end point. Composite Methods Composite methods for computing the definite integral involve splitting the domain into several equal slices. The area under the curve for each slice is approximated and then all the areas are summed to provide an approximation of the area within the domain. Trapezoidal Rule \u222b x 0 x 1 f ( x ) d x = h 2 [ f ( x 0 ) + f ( x 1 ) ] \u2212 h 3 12 f \u2033 ( \u03be ) \\int_{x_0}^{x_1} f(x) dx = \\frac{h}{2} [f(x_0) + f(x_1)] - \\frac{h^3}{12}f\u2033(\\xi) \u222b x 0 \u200b x 1 \u200b \u200b f ( x ) d x = 2 h \u200b [ f ( x 0 \u200b ) + f ( x 1 \u200b ) ] \u2212 1 2 h 3 \u200b f \u2033 ( \u03be ) var integrator = new TrapezoidalIntegrator(); DoubleFunction fn = new DoubleFunction((x) => Math.Pow(x, 2)); DoubleRange domain = 1..3; var area = integrator.Integrate(fn, domain); Simpson's Rule \u222b x 0 x 2 f ( x ) d x = h 3 [ f ( x 0 ) + 4 f ( x 1 ) + f ( x 2 ) ] \u2212 h 5 90 f ( 4 ) ( \u03be ) \\int_{x_0}^{x_2} f(x) dx = \\frac{h}{3} [f(x_0) + 4f(x_1) + f(x_2)] - \\frac{h^5}{90}f^{(4)}(\\xi) \u222b x 0 \u200b x 2 \u200b \u200b f ( x ) d x = 3 h \u200b [ f ( x 0 \u200b ) + 4 f ( x 1 \u200b ) + f ( x 2 \u200b ) ] \u2212 9 0 h 5 \u200b f ( 4 ) ( \u03be ) var integrator = new SimpsonIntegrator(); DoubleFunction fn = new DoubleFunction((x) => Math.Pow(x, 2)); DoubleRange domain = 1..3; var area = integrator.Integrate(fn, domain); Adaptive Methods Adaptive methods for computing the definite integral involve a recursive processes in which parts of the curve that have more variation are split into smaller slices for more accurate approximations whereas smoother parts that have less variation can use less precise approximations. Simpson's Rule var integrator = new SimpsonAdaptiveQuadratureIntegrator(tolerance: 0.01); DoubleFunction func = new DoubleFunction((x) => Math.Pow(x, 2)); DoubleRange domain = new DoubleRange(-3, 3); var estimatedIntegral = integrator.Integrate(func, domain); Indefinite Integration In indefinite integration, the area is not directly computed. Instead, an anti-derivative function is created that can be evaluated between any two points to compute the definite integral. F ( x ) = \u222b f ( x ) d x F(x) = \\int f(x)dx F ( x ) = \u222b f ( x ) d x \u222b a b f ( x ) d x = [ F ( x ) ] a b = F ( b ) \u2212 F ( a ) \\int_{a}^{b}f(x)dx = [F(x)]_{a}^{b} = F(b) - F(a) \u222b a b \u200b f ( x ) d x = [ F ( x ) ] a b \u200b = F ( b ) \u2212 F ( a ) Currently indefinite integration is not yet supported .","title":"Integration"},{"location":"calculus/integration/#integration","text":"Whereas differentiation describes the rate of change of a curve, integration describes the displacement area of a curve. Integration is also sometimes referred to an anti-derivative in its indefinite form as it can act as an inverse of differentiation.","title":"Integration"},{"location":"calculus/integration/#definite-integration","text":"In definite integration, one computes the area under the curve between a given start and end point.","title":"Definite Integration"},{"location":"calculus/integration/#composite-methods","text":"Composite methods for computing the definite integral involve splitting the domain into several equal slices. The area under the curve for each slice is approximated and then all the areas are summed to provide an approximation of the area within the domain.","title":"Composite Methods"},{"location":"calculus/integration/#trapezoidal-rule","text":"\u222b x 0 x 1 f ( x ) d x = h 2 [ f ( x 0 ) + f ( x 1 ) ] \u2212 h 3 12 f \u2033 ( \u03be ) \\int_{x_0}^{x_1} f(x) dx = \\frac{h}{2} [f(x_0) + f(x_1)] - \\frac{h^3}{12}f\u2033(\\xi) \u222b x 0 \u200b x 1 \u200b \u200b f ( x ) d x = 2 h \u200b [ f ( x 0 \u200b ) + f ( x 1 \u200b ) ] \u2212 1 2 h 3 \u200b f \u2033 ( \u03be ) var integrator = new TrapezoidalIntegrator(); DoubleFunction fn = new DoubleFunction((x) => Math.Pow(x, 2)); DoubleRange domain = 1..3; var area = integrator.Integrate(fn, domain);","title":"Trapezoidal Rule"},{"location":"calculus/integration/#simpsons-rule","text":"\u222b x 0 x 2 f ( x ) d x = h 3 [ f ( x 0 ) + 4 f ( x 1 ) + f ( x 2 ) ] \u2212 h 5 90 f ( 4 ) ( \u03be ) \\int_{x_0}^{x_2} f(x) dx = \\frac{h}{3} [f(x_0) + 4f(x_1) + f(x_2)] - \\frac{h^5}{90}f^{(4)}(\\xi) \u222b x 0 \u200b x 2 \u200b \u200b f ( x ) d x = 3 h \u200b [ f ( x 0 \u200b ) + 4 f ( x 1 \u200b ) + f ( x 2 \u200b ) ] \u2212 9 0 h 5 \u200b f ( 4 ) ( \u03be ) var integrator = new SimpsonIntegrator(); DoubleFunction fn = new DoubleFunction((x) => Math.Pow(x, 2)); DoubleRange domain = 1..3; var area = integrator.Integrate(fn, domain);","title":"Simpson's Rule"},{"location":"calculus/integration/#adaptive-methods","text":"Adaptive methods for computing the definite integral involve a recursive processes in which parts of the curve that have more variation are split into smaller slices for more accurate approximations whereas smoother parts that have less variation can use less precise approximations.","title":"Adaptive Methods"},{"location":"calculus/integration/#simpsons-rule_1","text":"var integrator = new SimpsonAdaptiveQuadratureIntegrator(tolerance: 0.01); DoubleFunction func = new DoubleFunction((x) => Math.Pow(x, 2)); DoubleRange domain = new DoubleRange(-3, 3); var estimatedIntegral = integrator.Integrate(func, domain);","title":"Simpson's Rule"},{"location":"calculus/integration/#indefinite-integration","text":"In indefinite integration, the area is not directly computed. Instead, an anti-derivative function is created that can be evaluated between any two points to compute the definite integral. F ( x ) = \u222b f ( x ) d x F(x) = \\int f(x)dx F ( x ) = \u222b f ( x ) d x \u222b a b f ( x ) d x = [ F ( x ) ] a b = F ( b ) \u2212 F ( a ) \\int_{a}^{b}f(x)dx = [F(x)]_{a}^{b} = F(b) - F(a) \u222b a b \u200b f ( x ) d x = [ F ( x ) ] a b \u200b = F ( b ) \u2212 F ( a ) Currently indefinite integration is not yet supported .","title":"Indefinite Integration"},{"location":"doxygen/_adaptive_quadrature_integrator_8cs/","text":"File AdaptiveQuadratureIntegrator.cs File List > Integration > AdaptiveQuadratureIntegrator.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class BaseAdaptiveQuadratureIntegrator Base class for integrations methods using an adaptive quadrature scheme class SimpsonAdaptiveQuadratureIntegrator Adaptive quadrature integration using Simpson's method The documentation for this class was generated from the following file Numerics/src/Integration/AdaptiveQuadratureIntegrator.cs","title":"File AdaptiveQuadratureIntegrator.cs"},{"location":"doxygen/_adaptive_quadrature_integrator_8cs/#file-adaptivequadratureintegratorcs","text":"File List > Integration > AdaptiveQuadratureIntegrator.cs Go to the source code of this file.","title":"File AdaptiveQuadratureIntegrator.cs"},{"location":"doxygen/_adaptive_quadrature_integrator_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_adaptive_quadrature_integrator_8cs/#classes","text":"Type Name class BaseAdaptiveQuadratureIntegrator Base class for integrations methods using an adaptive quadrature scheme class SimpsonAdaptiveQuadratureIntegrator Adaptive quadrature integration using Simpson's method The documentation for this class was generated from the following file Numerics/src/Integration/AdaptiveQuadratureIntegrator.cs","title":"Classes"},{"location":"doxygen/_adaptive_quadrature_integrator_8cs_source/","text":"File AdaptiveQuadratureIntegrator.cs File List > Integration > AdaptiveQuadratureIntegrator.cs Go to the documentation of this file. using System; using System.Linq; using System.Collections.Generic; namespace Qkmaxware.Numerics { public abstract class BaseAdaptiveQuadratureIntegrator : IDefiniteIntegrator<double> { public int MaxDepth {get; private set;} public double Tolerance {get; private set;} public BaseAdaptiveQuadratureIntegrator(double tolerance = 0.01, int maxDepth = 100) { this.Tolerance = tolerance; this.MaxDepth = maxDepth; } protected abstract double EstimateIntegralOver(IFunction<double> fx, double x0, double x2); protected abstract bool IsErrorLargerThanTolerance (IFunction<double> fx, double estimate, double x0, double x2); public double Integrate(IFunction<double> fx, Range<double> range) { var invalidRanges = new Queue<(int, Range<double>)>(); invalidRanges.Enqueue((0, range)); var validRanges = new List<double>(); while (invalidRanges.Count > 0) { var current = invalidRanges.Dequeue(); var currentdepth = current.Item1; var currentRange = current.Item2; // Compute the integral and the error term var integral = EstimateIntegralOver(fx, currentRange.Start, currentRange.End); var error = IsErrorLargerThanTolerance(fx, integral, currentRange.Start, currentRange.End); // If the integral is good, use it if (error || currentdepth > MaxDepth) { validRanges.Add(integral); } // Else divide the range and try again else { var midPoint = range.Start + (range.End - range.Start) * 0.5; invalidRanges.Enqueue((currentdepth + 1, new DoubleRange(currentRange.Start, midPoint))); invalidRanges.Enqueue((currentdepth + 1, new DoubleRange(midPoint, currentRange.End))); } } return validRanges.Sum(); } } public class SimpsonAdaptiveQuadratureIntegrator : BaseAdaptiveQuadratureIntegrator { public SimpsonAdaptiveQuadratureIntegrator(double tolerance = 0.01, int maxDepth = 100) : base(tolerance, maxDepth) {} protected override double EstimateIntegralOver (IFunction<double> fx, double x0, double x2) { // Simpson's method var H = x2 - x0; var h = 0.5 * H; var x1 = x0 + h; var fx0 = fx.Evaluate(x0); var fx1 = fx.Evaluate(x1); var fx2 = fx.Evaluate(x2); return (h / 3) * (fx0 + 4*fx1 + fx2); } protected override bool IsErrorLargerThanTolerance (IFunction<double> fx, double estimate, double x0, double x2) { // Error is the difference between the integral and a more precise integral var midPoint = x0 + (x2 - x0) * 0.5; var error = Math.Abs( (EstimateIntegralOver(fx, x0, midPoint) + EstimateIntegralOver(fx, midPoint, x2)) - estimate ); return error < 15 * this.Tolerance; } } }","title":"File AdaptiveQuadratureIntegrator.cs"},{"location":"doxygen/_adaptive_quadrature_integrator_8cs_source/#file-adaptivequadratureintegratorcs","text":"File List > Integration > AdaptiveQuadratureIntegrator.cs Go to the documentation of this file. using System; using System.Linq; using System.Collections.Generic; namespace Qkmaxware.Numerics { public abstract class BaseAdaptiveQuadratureIntegrator : IDefiniteIntegrator<double> { public int MaxDepth {get; private set;} public double Tolerance {get; private set;} public BaseAdaptiveQuadratureIntegrator(double tolerance = 0.01, int maxDepth = 100) { this.Tolerance = tolerance; this.MaxDepth = maxDepth; } protected abstract double EstimateIntegralOver(IFunction<double> fx, double x0, double x2); protected abstract bool IsErrorLargerThanTolerance (IFunction<double> fx, double estimate, double x0, double x2); public double Integrate(IFunction<double> fx, Range<double> range) { var invalidRanges = new Queue<(int, Range<double>)>(); invalidRanges.Enqueue((0, range)); var validRanges = new List<double>(); while (invalidRanges.Count > 0) { var current = invalidRanges.Dequeue(); var currentdepth = current.Item1; var currentRange = current.Item2; // Compute the integral and the error term var integral = EstimateIntegralOver(fx, currentRange.Start, currentRange.End); var error = IsErrorLargerThanTolerance(fx, integral, currentRange.Start, currentRange.End); // If the integral is good, use it if (error || currentdepth > MaxDepth) { validRanges.Add(integral); } // Else divide the range and try again else { var midPoint = range.Start + (range.End - range.Start) * 0.5; invalidRanges.Enqueue((currentdepth + 1, new DoubleRange(currentRange.Start, midPoint))); invalidRanges.Enqueue((currentdepth + 1, new DoubleRange(midPoint, currentRange.End))); } } return validRanges.Sum(); } } public class SimpsonAdaptiveQuadratureIntegrator : BaseAdaptiveQuadratureIntegrator { public SimpsonAdaptiveQuadratureIntegrator(double tolerance = 0.01, int maxDepth = 100) : base(tolerance, maxDepth) {} protected override double EstimateIntegralOver (IFunction<double> fx, double x0, double x2) { // Simpson's method var H = x2 - x0; var h = 0.5 * H; var x1 = x0 + h; var fx0 = fx.Evaluate(x0); var fx1 = fx.Evaluate(x1); var fx2 = fx.Evaluate(x2); return (h / 3) * (fx0 + 4*fx1 + fx2); } protected override bool IsErrorLargerThanTolerance (IFunction<double> fx, double estimate, double x0, double x2) { // Error is the difference between the integral and a more precise integral var midPoint = x0 + (x2 - x0) * 0.5; var error = Math.Abs( (EstimateIntegralOver(fx, x0, midPoint) + EstimateIntegralOver(fx, midPoint, x2)) - estimate ); return error < 15 * this.Tolerance; } } }","title":"File AdaptiveQuadratureIntegrator.cs"},{"location":"doxygen/_base_interpolated_function_8cs/","text":"File BaseInterpolatedFunction.cs File List > Function > BaseInterpolatedFunction.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics namespace Generic Classes Type Name class BaseInterpolatedFunction <T> Base class for a function that is interpolated between sample points class DoubleInterpolatedFunction Interpolated function using doubles The documentation for this class was generated from the following file Numerics/src/Function/BaseInterpolatedFunction.cs","title":"File BaseInterpolatedFunction.cs"},{"location":"doxygen/_base_interpolated_function_8cs/#file-baseinterpolatedfunctioncs","text":"File List > Function > BaseInterpolatedFunction.cs Go to the source code of this file.","title":"File BaseInterpolatedFunction.cs"},{"location":"doxygen/_base_interpolated_function_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics namespace Generic","title":"Namespaces"},{"location":"doxygen/_base_interpolated_function_8cs/#classes","text":"Type Name class BaseInterpolatedFunction <T> Base class for a function that is interpolated between sample points class DoubleInterpolatedFunction Interpolated function using doubles The documentation for this class was generated from the following file Numerics/src/Function/BaseInterpolatedFunction.cs","title":"Classes"},{"location":"doxygen/_base_interpolated_function_8cs_source/","text":"File BaseInterpolatedFunction.cs File List > Function > BaseInterpolatedFunction.cs Go to the documentation of this file. using System; using System.Linq; using System.Collections.Generic; namespace Qkmaxware.Numerics { public abstract class BaseInterpolatedFunction<T> : IInterpolatedFunction<T> where T:IComparable { private Point2<T>[] points; public IEnumerable<Point2<T>> Samples => Array.AsReadOnly(this.points); public IInterpolator<T> InterpolationMethod {get; set;} public ICalculator<T> Calculator {get; private set;} public BaseInterpolatedFunction (ICalculator<T> calculator, IEnumerable<Point2<T>> samples) { this.Calculator = calculator; this.points = samples.ToArray(); this.InterpolationMethod = new LinearInterpolation<T>(calculator); Array.Sort(this.points, (a, b) => a.X.CompareTo(b.X)); // sort this in terms of x } public BaseInterpolatedFunction(ICalculator<T> calculator, T[] xs, T[] ys) { this.Calculator = calculator; this.points = new Point2<T>[Math.Min(xs.Length, ys.Length)]; this.InterpolationMethod = new LinearInterpolation<T>(calculator); for (var i = 0; i < this.points.Length; i++) { this.points[i] = new Point2<T>(x: xs[i], y: ys[i]); } Array.Sort(this.points, (a, b) => a.X.CompareTo(b.X)); // sort this in terms of x } protected bool IsInRange(T x) { // Not enough points if (points.Length < 2) return false; // Out of range if (LessThan(x, points.First().X)) { return false; } if (GreaterThan(x, points.Last().X)) { return false; } return true; } private bool LessThan(T first, T second) { return first.CompareTo(second) < 0; } private bool LessEqualThan(T first, T second) { return LessThan(first, second) || Equal(first, second); } private bool GreaterThan(T first, T second) { return first.CompareTo(second) > 0; } private bool GreaterEqualThan(T first, T second) { return GreaterThan(first, second) || Equal(first, second); } private bool Equal (T first, T second) { return first.CompareTo(second) == 0; } public T Evaluate (T x) { // Check that x is in range, if not return the endpoints (no restriction on the values we can send it) if (points.Length < 1) throw new IndexOutOfRangeException(x?.ToString() ?? string.Empty); var firstIndex = 0; var lastIndex = points.Length - 1; var first = points[firstIndex]; var last = points[lastIndex ]; if (LessEqualThan(x, first.X)) return first.Y; if (GreaterEqualThan(x, last.X)) return last.Y; // Get interpolation factor (there is not officially at least 2 points) int lhs; int rhs = 1; for (lhs = 0; lhs < points.Length; lhs++, rhs++) { var lx = points[lhs].X; var rx = points[rhs].X; if (Equal(x, lx)) return points[lhs].Y; if (Equal(x, rx)) return points[rhs].Y; if (LessEqualThan(lx, x) && GreaterEqualThan(rx, x)) break; } var lastPoint = lhs > 0 ? points[lhs - 1].Y : points[lhs].Y; // prior point or current var nextPoint = rhs < points.Length - 1 ? points[rhs + 1].Y : points[rhs].Y; // next point or current var T = Calculator.Divide( Calculator.Subtract(x, points[lhs].X), Calculator.Subtract(points[rhs].X, points[lhs].X) ); // T is between 0 and 1 // Get interpolated value return InterpolationMethod.Interpolate( lastPoint, points[lhs].Y, points[rhs].Y, nextPoint, T ); } } public class DoubleInterpolatedFunction : BaseInterpolatedFunction<double> { public DoubleInterpolatedFunction (IEnumerable<Point2<double>> samples) : base(DoubleCalculator.Instance, samples) {} public DoubleInterpolatedFunction(double[] xs, double[] ys) : base(DoubleCalculator.Instance, xs, ys) {} } }","title":"File BaseInterpolatedFunction.cs"},{"location":"doxygen/_base_interpolated_function_8cs_source/#file-baseinterpolatedfunctioncs","text":"File List > Function > BaseInterpolatedFunction.cs Go to the documentation of this file. using System; using System.Linq; using System.Collections.Generic; namespace Qkmaxware.Numerics { public abstract class BaseInterpolatedFunction<T> : IInterpolatedFunction<T> where T:IComparable { private Point2<T>[] points; public IEnumerable<Point2<T>> Samples => Array.AsReadOnly(this.points); public IInterpolator<T> InterpolationMethod {get; set;} public ICalculator<T> Calculator {get; private set;} public BaseInterpolatedFunction (ICalculator<T> calculator, IEnumerable<Point2<T>> samples) { this.Calculator = calculator; this.points = samples.ToArray(); this.InterpolationMethod = new LinearInterpolation<T>(calculator); Array.Sort(this.points, (a, b) => a.X.CompareTo(b.X)); // sort this in terms of x } public BaseInterpolatedFunction(ICalculator<T> calculator, T[] xs, T[] ys) { this.Calculator = calculator; this.points = new Point2<T>[Math.Min(xs.Length, ys.Length)]; this.InterpolationMethod = new LinearInterpolation<T>(calculator); for (var i = 0; i < this.points.Length; i++) { this.points[i] = new Point2<T>(x: xs[i], y: ys[i]); } Array.Sort(this.points, (a, b) => a.X.CompareTo(b.X)); // sort this in terms of x } protected bool IsInRange(T x) { // Not enough points if (points.Length < 2) return false; // Out of range if (LessThan(x, points.First().X)) { return false; } if (GreaterThan(x, points.Last().X)) { return false; } return true; } private bool LessThan(T first, T second) { return first.CompareTo(second) < 0; } private bool LessEqualThan(T first, T second) { return LessThan(first, second) || Equal(first, second); } private bool GreaterThan(T first, T second) { return first.CompareTo(second) > 0; } private bool GreaterEqualThan(T first, T second) { return GreaterThan(first, second) || Equal(first, second); } private bool Equal (T first, T second) { return first.CompareTo(second) == 0; } public T Evaluate (T x) { // Check that x is in range, if not return the endpoints (no restriction on the values we can send it) if (points.Length < 1) throw new IndexOutOfRangeException(x?.ToString() ?? string.Empty); var firstIndex = 0; var lastIndex = points.Length - 1; var first = points[firstIndex]; var last = points[lastIndex ]; if (LessEqualThan(x, first.X)) return first.Y; if (GreaterEqualThan(x, last.X)) return last.Y; // Get interpolation factor (there is not officially at least 2 points) int lhs; int rhs = 1; for (lhs = 0; lhs < points.Length; lhs++, rhs++) { var lx = points[lhs].X; var rx = points[rhs].X; if (Equal(x, lx)) return points[lhs].Y; if (Equal(x, rx)) return points[rhs].Y; if (LessEqualThan(lx, x) && GreaterEqualThan(rx, x)) break; } var lastPoint = lhs > 0 ? points[lhs - 1].Y : points[lhs].Y; // prior point or current var nextPoint = rhs < points.Length - 1 ? points[rhs + 1].Y : points[rhs].Y; // next point or current var T = Calculator.Divide( Calculator.Subtract(x, points[lhs].X), Calculator.Subtract(points[rhs].X, points[lhs].X) ); // T is between 0 and 1 // Get interpolated value return InterpolationMethod.Interpolate( lastPoint, points[lhs].Y, points[rhs].Y, nextPoint, T ); } } public class DoubleInterpolatedFunction : BaseInterpolatedFunction<double> { public DoubleInterpolatedFunction (IEnumerable<Point2<double>> samples) : base(DoubleCalculator.Instance, samples) {} public DoubleInterpolatedFunction(double[] xs, double[] ys) : base(DoubleCalculator.Instance, xs, ys) {} } }","title":"File BaseInterpolatedFunction.cs"},{"location":"doxygen/_complex_extensions_8cs/","text":"File ComplexExtensions.cs File List > Complex Analysis > ComplexExtensions.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics namespace System namespace Numerics Classes Type Name class ComplexExtensions Static class for extensions related to complex numbers The documentation for this class was generated from the following file Numerics/src/Complex Analysis/ComplexExtensions.cs","title":"File ComplexExtensions.cs"},{"location":"doxygen/_complex_extensions_8cs/#file-complexextensionscs","text":"File List > Complex Analysis > ComplexExtensions.cs Go to the source code of this file.","title":"File ComplexExtensions.cs"},{"location":"doxygen/_complex_extensions_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics namespace System namespace Numerics","title":"Namespaces"},{"location":"doxygen/_complex_extensions_8cs/#classes","text":"Type Name class ComplexExtensions Static class for extensions related to complex numbers The documentation for this class was generated from the following file Numerics/src/Complex Analysis/ComplexExtensions.cs","title":"Classes"},{"location":"doxygen/_complex_extensions_8cs_source/","text":"File ComplexExtensions.cs File List > Complex Analysis > ComplexExtensions.cs Go to the documentation of this file. using System; using System.Numerics; namespace Qkmaxware.Numerics { public static class ComplexExtensions { public static Complex i(this IConvertible convertible) { return new Complex(0, Convert.ToDouble(convertible)); } } }","title":"File ComplexExtensions.cs"},{"location":"doxygen/_complex_extensions_8cs_source/#file-complexextensionscs","text":"File List > Complex Analysis > ComplexExtensions.cs Go to the documentation of this file. using System; using System.Numerics; namespace Qkmaxware.Numerics { public static class ComplexExtensions { public static Complex i(this IConvertible convertible) { return new Complex(0, Convert.ToDouble(convertible)); } } }","title":"File ComplexExtensions.cs"},{"location":"doxygen/_cosine_interpolation_8cs/","text":"File CosineInterpolation.cs File List > Function > CosineInterpolation.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class CosineInterpolation Function interpolated using cosine-interpolation The documentation for this class was generated from the following file Numerics/src/Function/CosineInterpolation.cs","title":"File CosineInterpolation.cs"},{"location":"doxygen/_cosine_interpolation_8cs/#file-cosineinterpolationcs","text":"File List > Function > CosineInterpolation.cs Go to the source code of this file.","title":"File CosineInterpolation.cs"},{"location":"doxygen/_cosine_interpolation_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_cosine_interpolation_8cs/#classes","text":"Type Name class CosineInterpolation Function interpolated using cosine-interpolation The documentation for this class was generated from the following file Numerics/src/Function/CosineInterpolation.cs","title":"Classes"},{"location":"doxygen/_cosine_interpolation_8cs_source/","text":"File CosineInterpolation.cs File List > Function > CosineInterpolation.cs Go to the documentation of this file. using System; using System.Linq; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class CosineInterpolation : IInterpolator<double> { public double Interpolate(double last, double start, double end, double next, double t) { var t2 = (1 - Math.Cos(t * Math.PI)) / 2; return start * (1 - t2) + end * t2; } } }","title":"File CosineInterpolation.cs"},{"location":"doxygen/_cosine_interpolation_8cs_source/#file-cosineinterpolationcs","text":"File List > Function > CosineInterpolation.cs Go to the documentation of this file. using System; using System.Linq; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class CosineInterpolation : IInterpolator<double> { public double Interpolate(double last, double start, double end, double next, double t) { var t2 = (1 - Math.Cos(t * Math.PI)) / 2; return start * (1 - t2) + end * t2; } } }","title":"File CosineInterpolation.cs"},{"location":"doxygen/_cubic_interpolation_8cs/","text":"File CubicInterpolation.cs File List > Function > CubicInterpolation.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class CubicInterpolation Function interpolated using cubic-interpolation The documentation for this class was generated from the following file Numerics/src/Function/CubicInterpolation.cs","title":"File CubicInterpolation.cs"},{"location":"doxygen/_cubic_interpolation_8cs/#file-cubicinterpolationcs","text":"File List > Function > CubicInterpolation.cs Go to the source code of this file.","title":"File CubicInterpolation.cs"},{"location":"doxygen/_cubic_interpolation_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_cubic_interpolation_8cs/#classes","text":"Type Name class CubicInterpolation Function interpolated using cubic-interpolation The documentation for this class was generated from the following file Numerics/src/Function/CubicInterpolation.cs","title":"Classes"},{"location":"doxygen/_cubic_interpolation_8cs_source/","text":"File CubicInterpolation.cs File List > Function > CubicInterpolation.cs Go to the documentation of this file. using System; using System.Linq; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class CubicInterpolation : IInterpolator<double> { public double Interpolate(double last, double start, double end, double next, double t) { var t2 = t * t; var a0 = next - end - last + start; var a1 = last - start - a0; var a2 = end - last; var a3 = start; return(a0 * t * t2 + a1 * t2 + a2 * t + a3); } } }","title":"File CubicInterpolation.cs"},{"location":"doxygen/_cubic_interpolation_8cs_source/#file-cubicinterpolationcs","text":"File List > Function > CubicInterpolation.cs Go to the documentation of this file. using System; using System.Linq; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class CubicInterpolation : IInterpolator<double> { public double Interpolate(double last, double start, double end, double next, double t) { var t2 = t * t; var a0 = next - end - last + start; var a1 = last - start - a0; var a2 = end - last; var a3 = start; return(a0 * t * t2 + a1 * t2 + a2 * t + a3); } } }","title":"File CubicInterpolation.cs"},{"location":"doxygen/_dimension_mismatch_exception_8cs/","text":"File DimensionMismatchException.cs File List > Linear Algebra > DimensionMismatchException.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class DimensionMismatchException Matrix dimension mismatch The documentation for this class was generated from the following file Numerics/src/Linear Algebra/DimensionMismatchException.cs","title":"File DimensionMismatchException.cs"},{"location":"doxygen/_dimension_mismatch_exception_8cs/#file-dimensionmismatchexceptioncs","text":"File List > Linear Algebra > DimensionMismatchException.cs Go to the source code of this file.","title":"File DimensionMismatchException.cs"},{"location":"doxygen/_dimension_mismatch_exception_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_dimension_mismatch_exception_8cs/#classes","text":"Type Name class DimensionMismatchException Matrix dimension mismatch The documentation for this class was generated from the following file Numerics/src/Linear Algebra/DimensionMismatchException.cs","title":"Classes"},{"location":"doxygen/_dimension_mismatch_exception_8cs_source/","text":"File DimensionMismatchException.cs File List > Linear Algebra > DimensionMismatchException.cs Go to the documentation of this file. using System; namespace Qkmaxware.Numerics { public class DimensionMismatchException : ArithmeticException { public DimensionMismatchException() : base() {} } }","title":"File DimensionMismatchException.cs"},{"location":"doxygen/_dimension_mismatch_exception_8cs_source/#file-dimensionmismatchexceptioncs","text":"File List > Linear Algebra > DimensionMismatchException.cs Go to the documentation of this file. using System; namespace Qkmaxware.Numerics { public class DimensionMismatchException : ArithmeticException { public DimensionMismatchException() : base() {} } }","title":"File DimensionMismatchException.cs"},{"location":"doxygen/_euler_ivp_solver_8cs/","text":"File EulerIvpSolver.cs File List > Numerics > src > Ode > EulerIvpSolver.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class EulerIvpSolver Solve initial value problems with Euler's method The documentation for this class was generated from the following file Numerics/src/Ode/EulerIvpSolver.cs","title":"File EulerIvpSolver.cs"},{"location":"doxygen/_euler_ivp_solver_8cs/#file-eulerivpsolvercs","text":"File List > Numerics > src > Ode > EulerIvpSolver.cs Go to the source code of this file.","title":"File EulerIvpSolver.cs"},{"location":"doxygen/_euler_ivp_solver_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_euler_ivp_solver_8cs/#classes","text":"Type Name class EulerIvpSolver Solve initial value problems with Euler's method The documentation for this class was generated from the following file Numerics/src/Ode/EulerIvpSolver.cs","title":"Classes"},{"location":"doxygen/_euler_ivp_solver_8cs_source/","text":"File EulerIvpSolver.cs File List > Numerics > src > Ode > EulerIvpSolver.cs Go to the documentation of this file. using System; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class EulerIvpSolver : IIvpSolver<double> { public IFunction<double> Solve(IFunction2<double> f, Range<double> tRange, double y0) { // INPUT endpoints a & b from xRange, range subdivisions N, initial condition y(a) = y0 // OUTPUT approximation of y at the values in xRange var N = 50; // provide as a argument? var a = Math.Min(tRange.Start, tRange.End); var b = Math.Max(tRange.Start, tRange.End); var h = (b - a) / N; var t = a; var w = y0; var points = new List<Point2<double>>(N); points.Add(new Point2<double>(t, w)); for (var i = 1; i <= N; i++) { w = w + h * f.Evaluate(t, w); // compute wi t = a + i * h; // compute ti points.Add(new Point2<double>(t, w)); } return new DoubleInterpolatedFunction(points); } } }","title":"File EulerIvpSolver.cs"},{"location":"doxygen/_euler_ivp_solver_8cs_source/#file-eulerivpsolvercs","text":"File List > Numerics > src > Ode > EulerIvpSolver.cs Go to the documentation of this file. using System; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class EulerIvpSolver : IIvpSolver<double> { public IFunction<double> Solve(IFunction2<double> f, Range<double> tRange, double y0) { // INPUT endpoints a & b from xRange, range subdivisions N, initial condition y(a) = y0 // OUTPUT approximation of y at the values in xRange var N = 50; // provide as a argument? var a = Math.Min(tRange.Start, tRange.End); var b = Math.Max(tRange.Start, tRange.End); var h = (b - a) / N; var t = a; var w = y0; var points = new List<Point2<double>>(N); points.Add(new Point2<double>(t, w)); for (var i = 1; i <= N; i++) { w = w + h * f.Evaluate(t, w); // compute wi t = a + i * h; // compute ti points.Add(new Point2<double>(t, w)); } return new DoubleInterpolatedFunction(points); } } }","title":"File EulerIvpSolver.cs"},{"location":"doxygen/_five_point_differentiator_8cs/","text":"File FivePointDifferentiator.cs File List > Differentiation > FivePointDifferentiator.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics namespace Linq Classes Type Name class CentredFivePointDifferentiator Midpoint five point numerical derivative Solver class EndpointFivePointDifferentiator Endpoint five point numerical derivative solver The documentation for this class was generated from the following file Numerics/src/Differentiation/FivePointDifferentiator.cs","title":"File FivePointDifferentiator.cs"},{"location":"doxygen/_five_point_differentiator_8cs/#file-fivepointdifferentiatorcs","text":"File List > Differentiation > FivePointDifferentiator.cs Go to the source code of this file.","title":"File FivePointDifferentiator.cs"},{"location":"doxygen/_five_point_differentiator_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics namespace Linq","title":"Namespaces"},{"location":"doxygen/_five_point_differentiator_8cs/#classes","text":"Type Name class CentredFivePointDifferentiator Midpoint five point numerical derivative Solver class EndpointFivePointDifferentiator Endpoint five point numerical derivative solver The documentation for this class was generated from the following file Numerics/src/Differentiation/FivePointDifferentiator.cs","title":"Classes"},{"location":"doxygen/_five_point_differentiator_8cs_source/","text":"File FivePointDifferentiator.cs File List > Differentiation > FivePointDifferentiator.cs Go to the documentation of this file. using System; using System.Linq; namespace Qkmaxware.Numerics { public class CentredFivePointDifferentiator : INumericDifferentiator<double> { public double Differentiate (IFunction<double> f, double x, double h = double.Epsilon) { return ( f.Evaluate(x - 2 * h) - 8 * f.Evaluate(x - h) + 8 * f.Evaluate(x + h) - f.Evaluate(x + 2 * h) ) / (12 * h); } public IFunction<double> Differentiate(IFunction<double> f, Range<double> range) { var h = range.Increment * 0.5f; var xs = range.All.ToArray(); var ys = xs.Select(x => Differentiate(f, x, h)).ToArray(); return new DoubleInterpolatedFunction(xs, ys); } } public class EndpointFivePointDifferentiator : INumericDifferentiator<double> { public double Differentiate (IFunction<double> f, double x, double h = double.Epsilon) { return (-25 * f.Evaluate(x) + 48 * f.Evaluate(x + h) - 36 * f.Evaluate(x + 2 * h) + 16 * f.Evaluate(x + 3 * h) - 3 * f.Evaluate(x + 4 * h) ) / (12 * h); } public IFunction<double> Differentiate(IFunction<double> f, Range<double> range) { var h = range.Increment * 0.5f; var xs = range.All.ToArray(); var ys = xs.Select(x => Differentiate(f, x, h)).ToArray(); return new DoubleInterpolatedFunction(xs, ys); } } }","title":"File FivePointDifferentiator.cs"},{"location":"doxygen/_five_point_differentiator_8cs_source/#file-fivepointdifferentiatorcs","text":"File List > Differentiation > FivePointDifferentiator.cs Go to the documentation of this file. using System; using System.Linq; namespace Qkmaxware.Numerics { public class CentredFivePointDifferentiator : INumericDifferentiator<double> { public double Differentiate (IFunction<double> f, double x, double h = double.Epsilon) { return ( f.Evaluate(x - 2 * h) - 8 * f.Evaluate(x - h) + 8 * f.Evaluate(x + h) - f.Evaluate(x + 2 * h) ) / (12 * h); } public IFunction<double> Differentiate(IFunction<double> f, Range<double> range) { var h = range.Increment * 0.5f; var xs = range.All.ToArray(); var ys = xs.Select(x => Differentiate(f, x, h)).ToArray(); return new DoubleInterpolatedFunction(xs, ys); } } public class EndpointFivePointDifferentiator : INumericDifferentiator<double> { public double Differentiate (IFunction<double> f, double x, double h = double.Epsilon) { return (-25 * f.Evaluate(x) + 48 * f.Evaluate(x + h) - 36 * f.Evaluate(x + 2 * h) + 16 * f.Evaluate(x + 3 * h) - 3 * f.Evaluate(x + 4 * h) ) / (12 * h); } public IFunction<double> Differentiate(IFunction<double> f, Range<double> range) { var h = range.Increment * 0.5f; var xs = range.All.ToArray(); var ys = xs.Select(x => Differentiate(f, x, h)).ToArray(); return new DoubleInterpolatedFunction(xs, ys); } } }","title":"File FivePointDifferentiator.cs"},{"location":"doxygen/_i_calculation_helper_8cs/","text":"File ICalculationHelper.cs File List > Numerics > src > ICalculationHelper.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name interface ICalculationHelper <T> The documentation for this class was generated from the following file Numerics/src/ICalculationHelper.cs","title":"File ICalculationHelper.cs"},{"location":"doxygen/_i_calculation_helper_8cs/#file-icalculationhelpercs","text":"File List > Numerics > src > ICalculationHelper.cs Go to the source code of this file.","title":"File ICalculationHelper.cs"},{"location":"doxygen/_i_calculation_helper_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_i_calculation_helper_8cs/#classes","text":"Type Name interface ICalculationHelper <T> The documentation for this class was generated from the following file Numerics/src/ICalculationHelper.cs","title":"Classes"},{"location":"doxygen/_i_calculation_helper_8cs_source/","text":"File ICalculationHelper.cs File List > Numerics > src > ICalculationHelper.cs Go to the documentation of this file. namespace Qkmaxware.Numerics { public interface ICalculationHelper<T> { ICalculator<T> Calculator {get;} } }","title":"File ICalculationHelper.cs"},{"location":"doxygen/_i_calculation_helper_8cs_source/#file-icalculationhelpercs","text":"File List > Numerics > src > ICalculationHelper.cs Go to the documentation of this file. namespace Qkmaxware.Numerics { public interface ICalculationHelper<T> { ICalculator<T> Calculator {get;} } }","title":"File ICalculationHelper.cs"},{"location":"doxygen/_i_calculator_8cs/","text":"File ICalculator.cs File List > Numerics > src > ICalculator.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class ComplexCalculator Calculator for complex arithmetic class DoubleCalculator Calculator for double arithmetic interface ICalculator <T> Interface for a class that can perform computations with the given type class IntCalculator Calculator for integer arithmetic The documentation for this class was generated from the following file Numerics/src/ICalculator.cs","title":"File ICalculator.cs"},{"location":"doxygen/_i_calculator_8cs/#file-icalculatorcs","text":"File List > Numerics > src > ICalculator.cs Go to the source code of this file.","title":"File ICalculator.cs"},{"location":"doxygen/_i_calculator_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_i_calculator_8cs/#classes","text":"Type Name class ComplexCalculator Calculator for complex arithmetic class DoubleCalculator Calculator for double arithmetic interface ICalculator <T> Interface for a class that can perform computations with the given type class IntCalculator Calculator for integer arithmetic The documentation for this class was generated from the following file Numerics/src/ICalculator.cs","title":"Classes"},{"location":"doxygen/_i_calculator_8cs_source/","text":"File ICalculator.cs File List > Numerics > src > ICalculator.cs Go to the documentation of this file. using System.Numerics; namespace Qkmaxware.Numerics { public interface ICalculator<T> { T Add(T v1, T v2); T Subtract (T v1, T v2); T Multiply (T v1, T v2); T Divide (T v1, T v2); T Negate (T v1); T Unit(); int Compare(T v1, T v2); } public class IntCalculator : ICalculator<int> { public static readonly ICalculator<int> Instance = new IntCalculator(); public int Add(int v1, int v2) => checked(v1 + v2); public int Subtract (int v1, int v2) => checked(v1 - v2); public int Multiply (int v1, int v2) => checked(v1 * v2); public int Divide (int v1, int v2) => checked(v1 / v2); public int Negate (int v1) => -v1; public int Unit() => 1; public int Compare(int v1, int v2) => v1.CompareTo(v2); } public class DoubleCalculator : ICalculator<double> { public static readonly ICalculator<double> Instance = new DoubleCalculator(); public double Add(double v1, double v2) => checked(v1 + v2); public double Subtract (double v1, double v2) => checked(v1 - v2); public double Multiply (double v1, double v2) => checked(v1 * v2); public double Divide (double v1, double v2) => checked(v1 / v2); public double Negate (double v1) => -v1; public double Unit() => 1; public int Compare(double v1, double v2) => v1.CompareTo(v2); } public class ComplexCalculator : ICalculator<Complex> { public static readonly ICalculator<Complex> Instance = new ComplexCalculator(); public Complex Add(Complex v1, Complex v2) => checked(v1 + v2); public Complex Subtract (Complex v1, Complex v2) => checked(v1 - v2); public Complex Multiply (Complex v1, Complex v2) => checked(v1 * v2); public Complex Divide (Complex v1, Complex v2) => checked(v1 / v2); public Complex Negate (Complex v1) => -v1; public Complex Unit() => Complex.One; public int Compare(Complex v1, Complex v2) => v1.Magnitude.CompareTo(v2.Magnitude); } }","title":"File ICalculator.cs"},{"location":"doxygen/_i_calculator_8cs_source/#file-icalculatorcs","text":"File List > Numerics > src > ICalculator.cs Go to the documentation of this file. using System.Numerics; namespace Qkmaxware.Numerics { public interface ICalculator<T> { T Add(T v1, T v2); T Subtract (T v1, T v2); T Multiply (T v1, T v2); T Divide (T v1, T v2); T Negate (T v1); T Unit(); int Compare(T v1, T v2); } public class IntCalculator : ICalculator<int> { public static readonly ICalculator<int> Instance = new IntCalculator(); public int Add(int v1, int v2) => checked(v1 + v2); public int Subtract (int v1, int v2) => checked(v1 - v2); public int Multiply (int v1, int v2) => checked(v1 * v2); public int Divide (int v1, int v2) => checked(v1 / v2); public int Negate (int v1) => -v1; public int Unit() => 1; public int Compare(int v1, int v2) => v1.CompareTo(v2); } public class DoubleCalculator : ICalculator<double> { public static readonly ICalculator<double> Instance = new DoubleCalculator(); public double Add(double v1, double v2) => checked(v1 + v2); public double Subtract (double v1, double v2) => checked(v1 - v2); public double Multiply (double v1, double v2) => checked(v1 * v2); public double Divide (double v1, double v2) => checked(v1 / v2); public double Negate (double v1) => -v1; public double Unit() => 1; public int Compare(double v1, double v2) => v1.CompareTo(v2); } public class ComplexCalculator : ICalculator<Complex> { public static readonly ICalculator<Complex> Instance = new ComplexCalculator(); public Complex Add(Complex v1, Complex v2) => checked(v1 + v2); public Complex Subtract (Complex v1, Complex v2) => checked(v1 - v2); public Complex Multiply (Complex v1, Complex v2) => checked(v1 * v2); public Complex Divide (Complex v1, Complex v2) => checked(v1 / v2); public Complex Negate (Complex v1) => -v1; public Complex Unit() => Complex.One; public int Compare(Complex v1, Complex v2) => v1.Magnitude.CompareTo(v2.Magnitude); } }","title":"File ICalculator.cs"},{"location":"doxygen/_i_definite_integrator_8cs/","text":"File IDefiniteIntegrator.cs File List > Integration > IDefiniteIntegrator.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name interface IDefiniteIntegrator <T> Interface for a calculator that can compute definite integrals The documentation for this class was generated from the following file Numerics/src/Integration/IDefiniteIntegrator.cs","title":"File IDefiniteIntegrator.cs"},{"location":"doxygen/_i_definite_integrator_8cs/#file-idefiniteintegratorcs","text":"File List > Integration > IDefiniteIntegrator.cs Go to the source code of this file.","title":"File IDefiniteIntegrator.cs"},{"location":"doxygen/_i_definite_integrator_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_i_definite_integrator_8cs/#classes","text":"Type Name interface IDefiniteIntegrator <T> Interface for a calculator that can compute definite integrals The documentation for this class was generated from the following file Numerics/src/Integration/IDefiniteIntegrator.cs","title":"Classes"},{"location":"doxygen/_i_definite_integrator_8cs_source/","text":"File IDefiniteIntegrator.cs File List > Integration > IDefiniteIntegrator.cs Go to the documentation of this file. using System; using System.Numerics; namespace Qkmaxware.Numerics { public interface IDefiniteIntegrator<T> { T Integrate(IFunction<T> fx, Range<T> range); } }","title":"File IDefiniteIntegrator.cs"},{"location":"doxygen/_i_definite_integrator_8cs_source/#file-idefiniteintegratorcs","text":"File List > Integration > IDefiniteIntegrator.cs Go to the documentation of this file. using System; using System.Numerics; namespace Qkmaxware.Numerics { public interface IDefiniteIntegrator<T> { T Integrate(IFunction<T> fx, Range<T> range); } }","title":"File IDefiniteIntegrator.cs"},{"location":"doxygen/_i_function_8cs/","text":"File IFunction.cs File List > Function > IFunction.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class ComplexFunction Native complex function class DoubleFunction Native double function class DoubleFunction2 Native double function of two variables interface IFunction <T> Generic interface for a function with 1 parametre interface IFunction2 <T> Generic interface for a function with 2 parametres interface IFunction3 <T> Generic interface for a function with 3 parametres interface IFunction4 <T> Generic interface for a function with 4 parametres class IntFunction Native integer function The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"File IFunction.cs"},{"location":"doxygen/_i_function_8cs/#file-ifunctioncs","text":"File List > Function > IFunction.cs Go to the source code of this file.","title":"File IFunction.cs"},{"location":"doxygen/_i_function_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_i_function_8cs/#classes","text":"Type Name class ComplexFunction Native complex function class DoubleFunction Native double function class DoubleFunction2 Native double function of two variables interface IFunction <T> Generic interface for a function with 1 parametre interface IFunction2 <T> Generic interface for a function with 2 parametres interface IFunction3 <T> Generic interface for a function with 3 parametres interface IFunction4 <T> Generic interface for a function with 4 parametres class IntFunction Native integer function The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"Classes"},{"location":"doxygen/_i_function_8cs_source/","text":"File IFunction.cs File List > Function > IFunction.cs Go to the documentation of this file. using System; using System.Numerics; namespace Qkmaxware.Numerics { public interface IFunction<T> : ICalculationHelper<T> { T Evaluate (T x); } public interface IFunction2<T> : ICalculationHelper<T> { T Evaluate(T x1, T x2); } public interface IFunction3<T> : ICalculationHelper<T> { T Evaluate(T x1, T x2, T x3); } public interface IFunction4<T> : ICalculationHelper<T> { T Evaluate(T x1, T x2, T x3, T x4); } public class IntFunction : IFunction<int> { public ICalculator<int> Calculator => IntCalculator.Instance; public Func<int, int> Lambda {get; set;} public IntFunction(Func<int, int> fn) { this.Lambda = fn; } public int Evaluate(int x) { return checked(Lambda(x)); } } public class DoubleFunction : IFunction<double> { public ICalculator<double> Calculator => DoubleCalculator.Instance; public Func<double, double> Lambda {get; set;} public DoubleFunction(Func<double, double> fn) { this.Lambda = fn; } public double Evaluate(double x) { return checked(Lambda(x)); } } public class DoubleFunction2 : IFunction2<double> { public ICalculator<double> Calculator => DoubleCalculator.Instance; public Func<double, double, double> Lambda {get; set;} public DoubleFunction2(Func<double, double, double> fn) { this.Lambda = fn; } public double Evaluate(double x1, double x2) { return checked(Lambda(x1, x2)); } } public class ComplexFunction : IFunction<Complex> { public ICalculator<Complex> Calculator => ComplexCalculator.Instance; public Func<Complex, Complex> Lambda {get; set;} public ComplexFunction(Func<Complex, Complex> fn) { this.Lambda = fn; } public Complex Evaluate(Complex x) { return checked(Lambda(x)); } } }","title":"File IFunction.cs"},{"location":"doxygen/_i_function_8cs_source/#file-ifunctioncs","text":"File List > Function > IFunction.cs Go to the documentation of this file. using System; using System.Numerics; namespace Qkmaxware.Numerics { public interface IFunction<T> : ICalculationHelper<T> { T Evaluate (T x); } public interface IFunction2<T> : ICalculationHelper<T> { T Evaluate(T x1, T x2); } public interface IFunction3<T> : ICalculationHelper<T> { T Evaluate(T x1, T x2, T x3); } public interface IFunction4<T> : ICalculationHelper<T> { T Evaluate(T x1, T x2, T x3, T x4); } public class IntFunction : IFunction<int> { public ICalculator<int> Calculator => IntCalculator.Instance; public Func<int, int> Lambda {get; set;} public IntFunction(Func<int, int> fn) { this.Lambda = fn; } public int Evaluate(int x) { return checked(Lambda(x)); } } public class DoubleFunction : IFunction<double> { public ICalculator<double> Calculator => DoubleCalculator.Instance; public Func<double, double> Lambda {get; set;} public DoubleFunction(Func<double, double> fn) { this.Lambda = fn; } public double Evaluate(double x) { return checked(Lambda(x)); } } public class DoubleFunction2 : IFunction2<double> { public ICalculator<double> Calculator => DoubleCalculator.Instance; public Func<double, double, double> Lambda {get; set;} public DoubleFunction2(Func<double, double, double> fn) { this.Lambda = fn; } public double Evaluate(double x1, double x2) { return checked(Lambda(x1, x2)); } } public class ComplexFunction : IFunction<Complex> { public ICalculator<Complex> Calculator => ComplexCalculator.Instance; public Func<Complex, Complex> Lambda {get; set;} public ComplexFunction(Func<Complex, Complex> fn) { this.Lambda = fn; } public Complex Evaluate(Complex x) { return checked(Lambda(x)); } } }","title":"File IFunction.cs"},{"location":"doxygen/_i_indefinite_integrator_8cs/","text":"File IIndefiniteIntegrator.cs File List > Integration > IIndefiniteIntegrator.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name interface IIndefiniteIntegrator <T> Interface for a calculator that can compute indefinite integrals The documentation for this class was generated from the following file Numerics/src/Integration/IIndefiniteIntegrator.cs","title":"File IIndefiniteIntegrator.cs"},{"location":"doxygen/_i_indefinite_integrator_8cs/#file-iindefiniteintegratorcs","text":"File List > Integration > IIndefiniteIntegrator.cs Go to the source code of this file.","title":"File IIndefiniteIntegrator.cs"},{"location":"doxygen/_i_indefinite_integrator_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_i_indefinite_integrator_8cs/#classes","text":"Type Name interface IIndefiniteIntegrator <T> Interface for a calculator that can compute indefinite integrals The documentation for this class was generated from the following file Numerics/src/Integration/IIndefiniteIntegrator.cs","title":"Classes"},{"location":"doxygen/_i_indefinite_integrator_8cs_source/","text":"File IIndefiniteIntegrator.cs File List > Integration > IIndefiniteIntegrator.cs Go to the documentation of this file. using System; using System.Numerics; namespace Qkmaxware.Numerics { public interface IIndefiniteIntegrator<T> { IFunction<T> Integrate(IFunction<T> fx, Range<T> range); } }","title":"File IIndefiniteIntegrator.cs"},{"location":"doxygen/_i_indefinite_integrator_8cs_source/#file-iindefiniteintegratorcs","text":"File List > Integration > IIndefiniteIntegrator.cs Go to the documentation of this file. using System; using System.Numerics; namespace Qkmaxware.Numerics { public interface IIndefiniteIntegrator<T> { IFunction<T> Integrate(IFunction<T> fx, Range<T> range); } }","title":"File IIndefiniteIntegrator.cs"},{"location":"doxygen/_i_interpolated_function_8cs/","text":"File IInterpolatedFunction.cs File List > Function > IInterpolatedFunction.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name interface IInterpolatedFunction <T> Generic interface for a function with 1 parametre that is interpolated between the given sample points The documentation for this class was generated from the following file Numerics/src/Function/IInterpolatedFunction.cs","title":"File IInterpolatedFunction.cs"},{"location":"doxygen/_i_interpolated_function_8cs/#file-iinterpolatedfunctioncs","text":"File List > Function > IInterpolatedFunction.cs Go to the source code of this file.","title":"File IInterpolatedFunction.cs"},{"location":"doxygen/_i_interpolated_function_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_i_interpolated_function_8cs/#classes","text":"Type Name interface IInterpolatedFunction <T> Generic interface for a function with 1 parametre that is interpolated between the given sample points The documentation for this class was generated from the following file Numerics/src/Function/IInterpolatedFunction.cs","title":"Classes"},{"location":"doxygen/_i_interpolated_function_8cs_source/","text":"File IInterpolatedFunction.cs File List > Function > IInterpolatedFunction.cs Go to the documentation of this file. using System.Collections.Generic; namespace Qkmaxware.Numerics { public interface IInterpolatedFunction<T> : IFunction<T> { IEnumerable<Point2<T>> Samples {get;} IInterpolator<T> InterpolationMethod {get; set;} } }","title":"File IInterpolatedFunction.cs"},{"location":"doxygen/_i_interpolated_function_8cs_source/#file-iinterpolatedfunctioncs","text":"File List > Function > IInterpolatedFunction.cs Go to the documentation of this file. using System.Collections.Generic; namespace Qkmaxware.Numerics { public interface IInterpolatedFunction<T> : IFunction<T> { IEnumerable<Point2<T>> Samples {get;} IInterpolator<T> InterpolationMethod {get; set;} } }","title":"File IInterpolatedFunction.cs"},{"location":"doxygen/_i_interpolator_8cs/","text":"File IInterpolator.cs File List > Function > IInterpolator.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name interface IInterpolator <T> Generic interface for interpolating a value between two points The documentation for this class was generated from the following file Numerics/src/Function/IInterpolator.cs","title":"File IInterpolator.cs"},{"location":"doxygen/_i_interpolator_8cs/#file-iinterpolatorcs","text":"File List > Function > IInterpolator.cs Go to the source code of this file.","title":"File IInterpolator.cs"},{"location":"doxygen/_i_interpolator_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_i_interpolator_8cs/#classes","text":"Type Name interface IInterpolator <T> Generic interface for interpolating a value between two points The documentation for this class was generated from the following file Numerics/src/Function/IInterpolator.cs","title":"Classes"},{"location":"doxygen/_i_interpolator_8cs_source/","text":"File IInterpolator.cs File List > Function > IInterpolator.cs Go to the documentation of this file. using System.Collections.Generic; namespace Qkmaxware.Numerics { public interface IInterpolator<T> { T Interpolate (T previous, T start, T end, T next, T factor); } }","title":"File IInterpolator.cs"},{"location":"doxygen/_i_interpolator_8cs_source/#file-iinterpolatorcs","text":"File List > Function > IInterpolator.cs Go to the documentation of this file. using System.Collections.Generic; namespace Qkmaxware.Numerics { public interface IInterpolator<T> { T Interpolate (T previous, T start, T end, T next, T factor); } }","title":"File IInterpolator.cs"},{"location":"doxygen/_i_ivp_solver_8cs/","text":"File IIvpSolver.cs File List > Numerics > src > Ode > IIvpSolver.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name interface IIvpSolver <T> Solver for initial value problem ordinary differential equations The documentation for this class was generated from the following file Numerics/src/Ode/IIvpSolver.cs","title":"File IIvpSolver.cs"},{"location":"doxygen/_i_ivp_solver_8cs/#file-iivpsolvercs","text":"File List > Numerics > src > Ode > IIvpSolver.cs Go to the source code of this file.","title":"File IIvpSolver.cs"},{"location":"doxygen/_i_ivp_solver_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_i_ivp_solver_8cs/#classes","text":"Type Name interface IIvpSolver <T> Solver for initial value problem ordinary differential equations The documentation for this class was generated from the following file Numerics/src/Ode/IIvpSolver.cs","title":"Classes"},{"location":"doxygen/_i_ivp_solver_8cs_source/","text":"File IIvpSolver.cs File List > Numerics > src > Ode > IIvpSolver.cs Go to the documentation of this file. namespace Qkmaxware.Numerics { public interface IIvpSolver<T> { IFunction<T> Solve(IFunction2<T> expr, Range<T> tRange, T y0); } }","title":"File IIvpSolver.cs"},{"location":"doxygen/_i_ivp_solver_8cs_source/#file-iivpsolvercs","text":"File List > Numerics > src > Ode > IIvpSolver.cs Go to the documentation of this file. namespace Qkmaxware.Numerics { public interface IIvpSolver<T> { IFunction<T> Solve(IFunction2<T> expr, Range<T> tRange, T y0); } }","title":"File IIvpSolver.cs"},{"location":"doxygen/_i_numeric_differentiator_8cs/","text":"File INumericDifferentiator.cs File List > Differentiation > INumericDifferentiator.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name interface INumericDifferentiator <T> Interface for any class that can calculate the derivative of a function The documentation for this class was generated from the following file Numerics/src/Differentiation/INumericDifferentiator.cs","title":"File INumericDifferentiator.cs"},{"location":"doxygen/_i_numeric_differentiator_8cs/#file-inumericdifferentiatorcs","text":"File List > Differentiation > INumericDifferentiator.cs Go to the source code of this file.","title":"File INumericDifferentiator.cs"},{"location":"doxygen/_i_numeric_differentiator_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_i_numeric_differentiator_8cs/#classes","text":"Type Name interface INumericDifferentiator <T> Interface for any class that can calculate the derivative of a function The documentation for this class was generated from the following file Numerics/src/Differentiation/INumericDifferentiator.cs","title":"Classes"},{"location":"doxygen/_i_numeric_differentiator_8cs_source/","text":"File INumericDifferentiator.cs File List > Differentiation > INumericDifferentiator.cs Go to the documentation of this file. using System; namespace Qkmaxware.Numerics { public interface INumericDifferentiator<T> { IFunction<T> Differentiate(IFunction<T> f, Range<T> range); } }","title":"File INumericDifferentiator.cs"},{"location":"doxygen/_i_numeric_differentiator_8cs_source/#file-inumericdifferentiatorcs","text":"File List > Differentiation > INumericDifferentiator.cs Go to the documentation of this file. using System; namespace Qkmaxware.Numerics { public interface INumericDifferentiator<T> { IFunction<T> Differentiate(IFunction<T> f, Range<T> range); } }","title":"File INumericDifferentiator.cs"},{"location":"doxygen/_l_u_p_set_8cs/","text":"File LUPSet.cs File List > Linear Algebra > LUPSet.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name struct LUPSet <T> LU factorization with full pivoting decomposition The documentation for this class was generated from the following file Numerics/src/Linear Algebra/LUPSet.cs","title":"File LUPSet.cs"},{"location":"doxygen/_l_u_p_set_8cs/#file-lupsetcs","text":"File List > Linear Algebra > LUPSet.cs Go to the source code of this file.","title":"File LUPSet.cs"},{"location":"doxygen/_l_u_p_set_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_l_u_p_set_8cs/#classes","text":"Type Name struct LUPSet <T> LU factorization with full pivoting decomposition The documentation for this class was generated from the following file Numerics/src/Linear Algebra/LUPSet.cs","title":"Classes"},{"location":"doxygen/_l_u_p_set_8cs_source/","text":"File LUPSet.cs File List > Linear Algebra > LUPSet.cs Go to the documentation of this file. namespace Qkmaxware.Numerics { public struct LUPSet<T> { public T[,] L {get; private set;} public T[,] U {get; private set;} public T[,] P {get; private set;} public uint Exchanges {get; private set;} public int Sign { get { return Exchanges % 2 == 0 ? 1 : -1; //-1^Exchanges } } public LUPSet(T[,] l, T[,] u, T[,] p, uint exchanges) { this.L = l; this.U = u; this.P = p; this.Exchanges = exchanges; } } }","title":"File LUPSet.cs"},{"location":"doxygen/_l_u_p_set_8cs_source/#file-lupsetcs","text":"File List > Linear Algebra > LUPSet.cs Go to the documentation of this file. namespace Qkmaxware.Numerics { public struct LUPSet<T> { public T[,] L {get; private set;} public T[,] U {get; private set;} public T[,] P {get; private set;} public uint Exchanges {get; private set;} public int Sign { get { return Exchanges % 2 == 0 ? 1 : -1; //-1^Exchanges } } public LUPSet(T[,] l, T[,] u, T[,] p, uint exchanges) { this.L = l; this.U = u; this.P = p; this.Exchanges = exchanges; } } }","title":"File LUPSet.cs"},{"location":"doxygen/_linear_interpolation_8cs/","text":"File LinearInterpolation.cs File List > Function > LinearInterpolation.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class LinearInterpolation <T> Function interpolated using linear-interpolation The documentation for this class was generated from the following file Numerics/src/Function/LinearInterpolation.cs","title":"File LinearInterpolation.cs"},{"location":"doxygen/_linear_interpolation_8cs/#file-linearinterpolationcs","text":"File List > Function > LinearInterpolation.cs Go to the source code of this file.","title":"File LinearInterpolation.cs"},{"location":"doxygen/_linear_interpolation_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_linear_interpolation_8cs/#classes","text":"Type Name class LinearInterpolation <T> Function interpolated using linear-interpolation The documentation for this class was generated from the following file Numerics/src/Function/LinearInterpolation.cs","title":"Classes"},{"location":"doxygen/_linear_interpolation_8cs_source/","text":"File LinearInterpolation.cs File List > Function > LinearInterpolation.cs Go to the documentation of this file. using System; using System.Linq; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class LinearInterpolation<T> : IInterpolator<T>, ICalculationHelper<T> { public ICalculator<T> Calculator {get;} public LinearInterpolation(ICalculator<T> calc) { this.Calculator = calc; } public T Interpolate(T last, T start, T end, T next, T t) { return Calculator.Add( Calculator.Multiply(t, end), Calculator.Multiply( Calculator.Subtract(Calculator.Unit(), t), start ) ); } } }","title":"File LinearInterpolation.cs"},{"location":"doxygen/_linear_interpolation_8cs_source/#file-linearinterpolationcs","text":"File List > Function > LinearInterpolation.cs Go to the documentation of this file. using System; using System.Linq; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class LinearInterpolation<T> : IInterpolator<T>, ICalculationHelper<T> { public ICalculator<T> Calculator {get;} public LinearInterpolation(ICalculator<T> calc) { this.Calculator = calc; } public T Interpolate(T last, T start, T end, T next, T t) { return Calculator.Add( Calculator.Multiply(t, end), Calculator.Multiply( Calculator.Subtract(Calculator.Unit(), t), start ) ); } } }","title":"File LinearInterpolation.cs"},{"location":"doxygen/_matrices_8cs/","text":"File Matrices.cs File List > Linear Algebra > Matrices.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class ComplexMatrix Complex number matrix class DoubleMatrix Double matrix class IntMatrix Integer matrix The documentation for this class was generated from the following file Numerics/src/Linear Algebra/Matrices.cs","title":"File Matrices.cs"},{"location":"doxygen/_matrices_8cs/#file-matricescs","text":"File List > Linear Algebra > Matrices.cs Go to the source code of this file.","title":"File Matrices.cs"},{"location":"doxygen/_matrices_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_matrices_8cs/#classes","text":"Type Name class ComplexMatrix Complex number matrix class DoubleMatrix Double matrix class IntMatrix Integer matrix The documentation for this class was generated from the following file Numerics/src/Linear Algebra/Matrices.cs","title":"Classes"},{"location":"doxygen/_matrices_8cs_source/","text":"File Matrices.cs File List > Linear Algebra > Matrices.cs Go to the documentation of this file. using System.Numerics; namespace Qkmaxware.Numerics { public class IntMatrix : Matrix<int> { public IntMatrix (int rows, int columns) : base(IntCalculator.Instance, rows, columns) {} public IntMatrix (int[,] elements) : base(IntCalculator.Instance, elements) {} public static implicit operator IntMatrix (int[,] elements) { return new IntMatrix(elements); } } public class DoubleMatrix : Matrix<double> { public DoubleMatrix (int rows, int columns) : base(DoubleCalculator.Instance, rows, columns) {} public DoubleMatrix (double[,] elements) : base(DoubleCalculator.Instance, elements) {} public static implicit operator DoubleMatrix (double[,] elements) { return new DoubleMatrix(elements); } } public class ComplexMatrix : Matrix<Complex> { public ComplexMatrix (int rows, int columns) : base(ComplexCalculator.Instance, rows, columns) {} public ComplexMatrix (Complex[,] elements) : base(ComplexCalculator.Instance, elements) {} public static implicit operator ComplexMatrix (Complex[,] elements) { return new ComplexMatrix(elements); } } }","title":"File Matrices.cs"},{"location":"doxygen/_matrices_8cs_source/#file-matricescs","text":"File List > Linear Algebra > Matrices.cs Go to the documentation of this file. using System.Numerics; namespace Qkmaxware.Numerics { public class IntMatrix : Matrix<int> { public IntMatrix (int rows, int columns) : base(IntCalculator.Instance, rows, columns) {} public IntMatrix (int[,] elements) : base(IntCalculator.Instance, elements) {} public static implicit operator IntMatrix (int[,] elements) { return new IntMatrix(elements); } } public class DoubleMatrix : Matrix<double> { public DoubleMatrix (int rows, int columns) : base(DoubleCalculator.Instance, rows, columns) {} public DoubleMatrix (double[,] elements) : base(DoubleCalculator.Instance, elements) {} public static implicit operator DoubleMatrix (double[,] elements) { return new DoubleMatrix(elements); } } public class ComplexMatrix : Matrix<Complex> { public ComplexMatrix (int rows, int columns) : base(ComplexCalculator.Instance, rows, columns) {} public ComplexMatrix (Complex[,] elements) : base(ComplexCalculator.Instance, elements) {} public static implicit operator ComplexMatrix (Complex[,] elements) { return new ComplexMatrix(elements); } } }","title":"File Matrices.cs"},{"location":"doxygen/_matrix_8cs/","text":"File Matrix.cs File List > Linear Algebra > Matrix.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics namespace Text Classes Type Name class Matrix <T> Generic matrix class of type T Protected Types Type Name enum MatrixItemPrintOrder Protected Types Documentation enum MatrixItemPrintOrder enum MatrixItemPrintOrder; The documentation for this class was generated from the following file Numerics/src/Linear Algebra/Matrix.cs","title":"File Matrix.cs"},{"location":"doxygen/_matrix_8cs/#file-matrixcs","text":"File List > Linear Algebra > Matrix.cs Go to the source code of this file.","title":"File Matrix.cs"},{"location":"doxygen/_matrix_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics namespace Text","title":"Namespaces"},{"location":"doxygen/_matrix_8cs/#classes","text":"Type Name class Matrix <T> Generic matrix class of type T","title":"Classes"},{"location":"doxygen/_matrix_8cs/#protected-types","text":"Type Name enum MatrixItemPrintOrder","title":"Protected Types"},{"location":"doxygen/_matrix_8cs/#protected-types-documentation","text":"","title":"Protected Types Documentation"},{"location":"doxygen/_matrix_8cs/#enum-matrixitemprintorder","text":"enum MatrixItemPrintOrder; The documentation for this class was generated from the following file Numerics/src/Linear Algebra/Matrix.cs","title":"enum MatrixItemPrintOrder"},{"location":"doxygen/_matrix_8cs_source/","text":"File Matrix.cs File List > Linear Algebra > Matrix.cs Go to the documentation of this file. using System; using System.Text; namespace Qkmaxware.Numerics { public class Matrix<T> : ICalculationHelper<T> { private T[,] elements; public ICalculator<T> Calculator {get; private set;} public int Elements => elements.Length; public int Rows => elements.GetLength(0); public int Columns => elements.GetLength(1); public T this [int row, int column] => elements[row, column]; public Matrix<T> this [int row, Range columns] => this[new Range(new Index(row), new Index(row + 1)), columns]; public Matrix<T> this [Range rows, int column] => this[rows, new Range(new Index(column), new Index(column + 1))]; public Matrix<T> this [Range rows, Range columns] { get { var rStart = rows.Start.GetOffset(this.Rows); var rEnd = rows.End.GetOffset(this.Rows); var cStart = columns.Start.GetOffset(this.Columns); var cEnd = columns.End.GetOffset(this.Columns); var rowCount = Math.Abs(rEnd - rStart); var columnCount = Math.Abs(cEnd - cStart); var rowStep = rEnd - rStart < 0 ? -1 : 1; var columnStep = cEnd - cStart < 0 ? -1 : 1; if (rowCount <= 0 || columnCount <= 0) return new Matrix<T>(this.Calculator, 0, 0); var mx = new Matrix<T>(this.Calculator, rowCount, columnCount); var oldRow = rStart; var newRow = 0; while (oldRow != rEnd) { var oldCol = cStart; var newCol = 0; while (oldCol != cEnd) { mx.elements[newRow, newCol] = this[oldRow, oldCol]; oldCol += columnStep; newCol++; } oldRow += rowStep; newRow++; } return mx; } } public bool IsSquare => Rows == Columns; public bool IsRowMatrix => Rows == 1; public bool IsColumnMatrix => Columns == 1; public Matrix(ICalculator<T> calculator, int rows, int columns) { this.Calculator = calculator; this.elements = new T[rows, columns]; } public Matrix(ICalculator<T> calculator, T[,] elements) { this.Calculator = calculator; this.elements = elements; } // FILLS ----------------------------------------------------------------------------- #region Fills public static Matrix<T> Fill(ICalculator<T> calc, int rows, int columns, T value) { var ts = new T[rows, columns]; for (var row = 0; row < ts.GetLength(0); row++) { for (var col = 0; col < ts.GetLength(1); col++) { ts[row, col] = value; } } return new Matrix<T>(calc, ts); } public static Matrix<T> Identity(ICalculator<T> calc, int rows, int columns) { var ts = new T[rows, columns]; for (var i = 0; i < ts.GetLength(1); i++) { ts[i,i] = calc.Unit(); } return new Matrix<T>(calc, ts); } public static Matrix<T> Random(ICalculator<T> calc, int rows, int columns, IValueGenerator<T> rng) { var ts = new T[rows, columns]; for (var row = 0; row < ts.GetLength(0); row++) { for (var col = 0; col < ts.GetLength(1); col++) { ts[row, col] = rng.Next(); } } return new Matrix<T>(calc, ts); } #endregion // MATRIX ASSERTIONS ----------------------------------------------------------------- #region Assertions public static void AssertSquare(Matrix<T> mtx) { if(!mtx.IsSquare) { throw new DimensionMismatchException(); } } public static void AssertSameDimensions(Matrix<T> m1, Matrix<T> m2) { if(m1.Rows != m2.Rows || m1.Columns != m2.Columns) { throw new DimensionMismatchException(); } } public static void AssertCanMultiply(Matrix<T> m1, Matrix<T> m2) { if(m1.Columns != m2.Rows) { throw new DimensionMismatchException(); } } public static void AssertValidColumn(Matrix<T> m1, int column) { if(m1.Columns < column) { throw new IndexOutOfRangeException(); } } public static void AssertValidRow(Matrix<T> m1, int row) { if(m1.Rows < row) { throw new IndexOutOfRangeException(); } } protected static void AssertValidColumn(T[,] m1, int column) { if(m1.GetLength(1) < column) { throw new IndexOutOfRangeException(); } } protected static void AssertValidRow(T[,] m1, int row) { if(m1.GetLength(0) < row) { throw new IndexOutOfRangeException(); } } #endregion // OTHER OPERATIONS ----------------------------------------------------------------- public Matrix<T> Map (Func<T, T> op) { var rs = new T[this.Rows, this.Columns]; for (var row = 0; row < this.Rows; row++) { for (var col = 0; col < this.Columns; col++) { rs[row, col] = op(this[row, col]); } } return new Matrix<T>(this.Calculator, rs); } public Matrix<K> Map<K> (ICalculator<K> calculator, Func<T, K> convert) { var rs = new K[this.Rows, this.Columns]; for (var row = 0; row < this.Rows; row++) { for (var col = 0; col < this.Columns; col++) { rs[row, col] = convert(this[row, col]); } } return new Matrix<K>(calculator, rs); } public T Trace () { AssertSquare(this); #nullable disable T value = default(T); for(int i = 0; i < this.Rows; i++) { if(i == 0) { value = this[i,i]; } else { value = Calculator.Add(value, this[i,i]); } } return value; #nullable restore } public Matrix<T> Transpose () { T[,] res = new T[this.Columns, this.Rows]; for (int i = 0; i < this.Rows; i++) for (int j = 0; j < this.Columns; j++) res[j,i] = this[i,j]; return new Matrix<T>(this.Calculator, res); } private void SwapRows(T[,] values, int r1, int r2) { AssertValidRow(values, r1); AssertValidRow(values, r2); T temp; for(int i = 0; i < this.Columns; i++) { temp = values[r1, i]; values[r1,i] = values[r2,i]; values[r2,i] = temp; } } private T[,] Pivot(out uint exchanges) { // Only square matrices AssertSquare(this); // Prepare inputs int n = this.Rows; // Rows and columns are the same T[,] im = new T[n,n]; for (var i = 0; i < n; i++) { im[i,i] = Calculator.Unit(); // Make into the identity matrix } exchanges = 0; // Run for (var j = 0; j < n; j++) { T max = this[j, j]; int row = j; for (var i = row; i < n; i++) { if (Calculator.Compare(this[i,j], max) > 0) { max = this[i, j]; row = i; } } if (j != row) { // Swap rows exchanges++; SwapRows(im, j, row); } } // Done return im; } public LUPSet<T> Decompose () { // Only square matrices AssertSquare(this); // Create empty matrices #nullable disable int n = this.Rows; T[,] L = new T[n,n]; T[,] U = new T[n,n]; uint pexchanges; T[,] P = this.Pivot(out pexchanges); Matrix<T> A2 = new Matrix<T>(this.Calculator, P) * (this); for (int j = 0; j < n; j++) { L[j,j] = Calculator.Unit(); for (int i = 0; i < j +1; i++) { T s1 = default(T); for (int k = 0; k < i; k++) { s1 = Calculator.Add( s1, Calculator.Multiply(U[k,j], L[i,k]) ); } U[i,j] = Calculator.Subtract(A2[i,j], s1); } for (int i = j; i < n; i++) { T s2 = default(T); for (int k = 0; k < j; k++) { s2 = Calculator.Add( s2, Calculator.Multiply(U[k,j], L[i,k]) ); } L[i,j] = Calculator.Divide( Calculator.Subtract(A2[i,j], s2), U[j,j] ); } } #nullable restore return new LUPSet<T>(L, U, P, pexchanges); } public T Determinant() { // TODO deal with 1x1 and 2x2 matrices //http://lampx.tugraz.at/~hadley/num/ch2/2.3a.php // Only square matrices AssertSquare(this); // det(P) * det(A) = det(L) * det(U) // det(A) = det(L) * det(U) / det(P) // det(A) = 1 * Pi{Uii | i in 0..N} / (-1^n) LUPSet<T> lup = this.Decompose(); T d = Calculator.Unit(); //Product of the diagonal elements of the LU matrix for(int i = 0; i < this.Rows; i++) { d = Calculator.Multiply(d, lup.U[i,i]); } // Multiply by the determinate of the P matrix (-1^n | n = number of exchanges) // if n is even, -1^n = 1, if n is odd -1^n = -1 if (lup.Sign > 0) { return d; } else { return Calculator.Negate(d); } } private Matrix<T> submatrix (int row, int column) { AssertValidColumn(this, column); AssertValidRow(this, row); var newColumns = this.Columns - 1; var newRows = this.Rows - 1; if (newColumns < 0) newColumns = 0; if (newRows < 0) newRows = 0; var sub = new Matrix<T>(this.Calculator, newRows, newColumns); var x = 0; for (var icol = 0; icol < this.Columns; icol++) { if (icol == column) continue; int y = 0; for (int irow = 0; irow < this.Rows; irow++) { if (irow == row) continue; sub.elements[y, x] = this[irow, icol]; y++; } x++; } return sub; } public Matrix<T> Minors() { var minors = new Matrix<T>(this.Calculator, this.Rows, this.Columns); for (var row = 0; row < this.Rows; row++) { for (var col = 0; col < this.Columns; col++) { var submatrix = this.submatrix(row, col); var det = submatrix.Determinant(); minors.elements[row, col] = det; } } return minors; } public Matrix<T> Cofactor() { Matrix<T> co = new Matrix<T>(this.Calculator, this.Columns, this.Rows); var minors = Minors(); for (var row = 0; row < this.Rows; row++) { for (var col = 0; col < this.Columns; col++) { // Apply checkerboard of +/- // + - + - // EVEN row // - + - + // ODD row // + - + - bool negate = false; if (row % 2 != 0) { // ODD Row if (!(col % 2 != 0)) { // EVEN column negate = true; } } else { // EVEN row if ((col % 2 != 0)) { // ODD column negate = true; } } co.elements[row, col] = negate ? Calculator.Negate(minors[row, col]) : minors[row, col]; } } return co; } public Matrix<T> Adjugate() { return this.Cofactor().Transpose(); } public Matrix<T> Inverse() { return this.Adjugate() / this.Determinant(); } public static Matrix<T> Operate(Matrix<T> lhs, Matrix<T> rhs, Func<T,T,T> function) { AssertSameDimensions(lhs, rhs); var rs = new T[lhs.Rows,lhs.Columns]; var calc = lhs.Calculator ?? rhs.Calculator; for (var row = 0; row < lhs.Rows; row++) { for (var col = 0; col < lhs.Columns; col++) { rs[row, col] = function(lhs[row, col], rhs[row, col]); } } return new Matrix<T>(calc, rs); } // MATRIX OPERATORS ----------------------------------------------------------------- #region Operators public static Matrix<T> operator + (Matrix<T> lhs, Matrix<T> rhs) { AssertSameDimensions(lhs, rhs); var calc = lhs.Calculator ?? rhs.Calculator; T[,] rs = new T[lhs.Rows, lhs.Columns]; for(int i = 0; i < lhs.Rows; i++) { for(int j = 0; j < lhs.Columns; j++) { rs[i,j] = calc.Add(lhs[i,j], (rhs[i,j])); } } return new Matrix<T>(calc, rs); } public static Matrix<T> operator - (Matrix<T> lhs, Matrix<T> rhs) { AssertSameDimensions(lhs, rhs); var calc = lhs.Calculator ?? rhs.Calculator; T[,] rs = new T[lhs.Rows, lhs.Columns]; for(int i = 0; i < lhs.Rows; i++) { for(int j = 0; j < lhs.Columns; j++) { rs[i,j] = calc.Subtract(lhs[i,j], (rhs[i,j])); } } return new Matrix<T>(calc, rs); } public static Matrix<T> operator / (Matrix<T> lhs, T rhs) { var calc = lhs.Calculator; T[,] rs = new T[lhs.Rows, lhs.Columns]; for(int i = 0; i < lhs.Rows; i++) { for(int j = 0; j < lhs.Columns; j++) { rs[i,j] = calc.Divide(lhs[i,j], rhs); } } return new Matrix<T>(calc, rs); } public static Matrix<T> operator * (Matrix<T> lhs, T rhs) { var calc = lhs.Calculator; T[,] rs = new T[lhs.Rows, lhs.Columns]; for(int i = 0; i < lhs.Rows; i++) { for(int j = 0; j < lhs.Columns; j++) { rs[i,j] = calc.Multiply(lhs[i,j], rhs); } } return new Matrix<T>(calc, rs); } public static Matrix<T> operator * (T lhs, Matrix<T> rhs) { var calc = rhs.Calculator; T[,] rs = new T[rhs.Rows, rhs.Columns]; for(int i = 0; i < rhs.Rows; i++) { for(int j = 0; j < rhs.Columns; j++) { rs[i,j] = calc.Multiply(lhs, rhs[i,j]); } } return new Matrix<T>(calc, rs); } public static Matrix<T> operator * (Matrix<T> lhs, Matrix<T> rhs) { AssertCanMultiply(lhs, rhs); var calc = lhs.Calculator ?? rhs.Calculator; #nullable disable int rows = lhs.Rows; int columns = rhs.Columns; T[,] rs = new T[rows,columns]; for (int i = 0; i < rows; i++) { for (int j = 0; j < columns; j++) { T sum = default(T); for (int k = 0; k < lhs.Columns; k++) { if (k == 0) { sum = calc.Multiply(lhs[i,k], (rhs[k,j])); } else { sum = calc.Add( sum, calc.Multiply(lhs[i,k], (rhs[k,j])) ); } } rs[i,j] = sum; } } #nullable restore return new Matrix<T>(calc, rs); } #endregion // STRING CONSTRUCTION ----------------------------------------------------------------- #region Stringing protected enum MatrixItemPrintOrder { RowWise, ColumnWise, } public string ToWolframString(string format = \"{0}\") { return this.Format( MatrixItemPrintOrder.RowWise, \"{\", \"{\",format,\",\", \"}\", \",\", \"}\" ); } public string ToMatlabString(string format = \"{0}\") { return this.Format( MatrixItemPrintOrder.RowWise, \"[\", string.Empty,format,\",\", string.Empty, \";\", \"]\" ); } public string ToMapleString( string format = \"{0}\") { return this.Format( MatrixItemPrintOrder.ColumnWise, \"<\", \"<\",format,\",\", \">\", \"|\", \">\" ); } public string ToLatexString(string format = \"{0}\") { return @\"\\begin{bmatrix}\" + this.Format( MatrixItemPrintOrder.RowWise, string.Empty, string.Empty,format,\"&\", string.Empty, @\" \\\\\", string.Empty ) + @\"\\end{bmatrix}\"; } public override string ToString() { return this.Format( MatrixItemPrintOrder.RowWise, string.Empty, string.Empty,\"{0}\",\" \", string.Empty, System.Environment.NewLine, string.Empty ); } private string Format(MatrixItemPrintOrder format = MatrixItemPrintOrder.RowWise, string prefix = \"[\", string itemPrefix = \"\", string elementFormat = \"{0}\", string elementSeparator = \",\", string itemPostfix = \"\", string itemSeparator = \";\", string postfix = \"]\") { StringBuilder sb = new StringBuilder(); sb.Append(prefix); if (format == MatrixItemPrintOrder.RowWise) { // Iterate over rows first for(int i = 0; i < this.Rows; i++){ if (i != 0) { sb.Append(itemSeparator); } sb.Append(itemPrefix); for(int j = 0; j < this.Columns; j++) { if (j != 0) { sb.Append(elementSeparator); } sb.Append(string.Format(elementFormat, this[i,j])); } sb.Append(itemPostfix); } } else { // Iterate over columns first for(int i = 0; i < this.Columns; i++){ if (i != 0) { sb.Append(itemSeparator); } sb.Append(itemPrefix); for(int j = 0; j < this.Rows; j++) { if (j != 0) { sb.Append(elementSeparator); } sb.Append(string.Format(elementFormat, this[j,i])); } sb.Append(itemPostfix); } } sb.Append(postfix); return sb.ToString(); } #endregion } }","title":"File Matrix.cs"},{"location":"doxygen/_matrix_8cs_source/#file-matrixcs","text":"File List > Linear Algebra > Matrix.cs Go to the documentation of this file. using System; using System.Text; namespace Qkmaxware.Numerics { public class Matrix<T> : ICalculationHelper<T> { private T[,] elements; public ICalculator<T> Calculator {get; private set;} public int Elements => elements.Length; public int Rows => elements.GetLength(0); public int Columns => elements.GetLength(1); public T this [int row, int column] => elements[row, column]; public Matrix<T> this [int row, Range columns] => this[new Range(new Index(row), new Index(row + 1)), columns]; public Matrix<T> this [Range rows, int column] => this[rows, new Range(new Index(column), new Index(column + 1))]; public Matrix<T> this [Range rows, Range columns] { get { var rStart = rows.Start.GetOffset(this.Rows); var rEnd = rows.End.GetOffset(this.Rows); var cStart = columns.Start.GetOffset(this.Columns); var cEnd = columns.End.GetOffset(this.Columns); var rowCount = Math.Abs(rEnd - rStart); var columnCount = Math.Abs(cEnd - cStart); var rowStep = rEnd - rStart < 0 ? -1 : 1; var columnStep = cEnd - cStart < 0 ? -1 : 1; if (rowCount <= 0 || columnCount <= 0) return new Matrix<T>(this.Calculator, 0, 0); var mx = new Matrix<T>(this.Calculator, rowCount, columnCount); var oldRow = rStart; var newRow = 0; while (oldRow != rEnd) { var oldCol = cStart; var newCol = 0; while (oldCol != cEnd) { mx.elements[newRow, newCol] = this[oldRow, oldCol]; oldCol += columnStep; newCol++; } oldRow += rowStep; newRow++; } return mx; } } public bool IsSquare => Rows == Columns; public bool IsRowMatrix => Rows == 1; public bool IsColumnMatrix => Columns == 1; public Matrix(ICalculator<T> calculator, int rows, int columns) { this.Calculator = calculator; this.elements = new T[rows, columns]; } public Matrix(ICalculator<T> calculator, T[,] elements) { this.Calculator = calculator; this.elements = elements; } // FILLS ----------------------------------------------------------------------------- #region Fills public static Matrix<T> Fill(ICalculator<T> calc, int rows, int columns, T value) { var ts = new T[rows, columns]; for (var row = 0; row < ts.GetLength(0); row++) { for (var col = 0; col < ts.GetLength(1); col++) { ts[row, col] = value; } } return new Matrix<T>(calc, ts); } public static Matrix<T> Identity(ICalculator<T> calc, int rows, int columns) { var ts = new T[rows, columns]; for (var i = 0; i < ts.GetLength(1); i++) { ts[i,i] = calc.Unit(); } return new Matrix<T>(calc, ts); } public static Matrix<T> Random(ICalculator<T> calc, int rows, int columns, IValueGenerator<T> rng) { var ts = new T[rows, columns]; for (var row = 0; row < ts.GetLength(0); row++) { for (var col = 0; col < ts.GetLength(1); col++) { ts[row, col] = rng.Next(); } } return new Matrix<T>(calc, ts); } #endregion // MATRIX ASSERTIONS ----------------------------------------------------------------- #region Assertions public static void AssertSquare(Matrix<T> mtx) { if(!mtx.IsSquare) { throw new DimensionMismatchException(); } } public static void AssertSameDimensions(Matrix<T> m1, Matrix<T> m2) { if(m1.Rows != m2.Rows || m1.Columns != m2.Columns) { throw new DimensionMismatchException(); } } public static void AssertCanMultiply(Matrix<T> m1, Matrix<T> m2) { if(m1.Columns != m2.Rows) { throw new DimensionMismatchException(); } } public static void AssertValidColumn(Matrix<T> m1, int column) { if(m1.Columns < column) { throw new IndexOutOfRangeException(); } } public static void AssertValidRow(Matrix<T> m1, int row) { if(m1.Rows < row) { throw new IndexOutOfRangeException(); } } protected static void AssertValidColumn(T[,] m1, int column) { if(m1.GetLength(1) < column) { throw new IndexOutOfRangeException(); } } protected static void AssertValidRow(T[,] m1, int row) { if(m1.GetLength(0) < row) { throw new IndexOutOfRangeException(); } } #endregion // OTHER OPERATIONS ----------------------------------------------------------------- public Matrix<T> Map (Func<T, T> op) { var rs = new T[this.Rows, this.Columns]; for (var row = 0; row < this.Rows; row++) { for (var col = 0; col < this.Columns; col++) { rs[row, col] = op(this[row, col]); } } return new Matrix<T>(this.Calculator, rs); } public Matrix<K> Map<K> (ICalculator<K> calculator, Func<T, K> convert) { var rs = new K[this.Rows, this.Columns]; for (var row = 0; row < this.Rows; row++) { for (var col = 0; col < this.Columns; col++) { rs[row, col] = convert(this[row, col]); } } return new Matrix<K>(calculator, rs); } public T Trace () { AssertSquare(this); #nullable disable T value = default(T); for(int i = 0; i < this.Rows; i++) { if(i == 0) { value = this[i,i]; } else { value = Calculator.Add(value, this[i,i]); } } return value; #nullable restore } public Matrix<T> Transpose () { T[,] res = new T[this.Columns, this.Rows]; for (int i = 0; i < this.Rows; i++) for (int j = 0; j < this.Columns; j++) res[j,i] = this[i,j]; return new Matrix<T>(this.Calculator, res); } private void SwapRows(T[,] values, int r1, int r2) { AssertValidRow(values, r1); AssertValidRow(values, r2); T temp; for(int i = 0; i < this.Columns; i++) { temp = values[r1, i]; values[r1,i] = values[r2,i]; values[r2,i] = temp; } } private T[,] Pivot(out uint exchanges) { // Only square matrices AssertSquare(this); // Prepare inputs int n = this.Rows; // Rows and columns are the same T[,] im = new T[n,n]; for (var i = 0; i < n; i++) { im[i,i] = Calculator.Unit(); // Make into the identity matrix } exchanges = 0; // Run for (var j = 0; j < n; j++) { T max = this[j, j]; int row = j; for (var i = row; i < n; i++) { if (Calculator.Compare(this[i,j], max) > 0) { max = this[i, j]; row = i; } } if (j != row) { // Swap rows exchanges++; SwapRows(im, j, row); } } // Done return im; } public LUPSet<T> Decompose () { // Only square matrices AssertSquare(this); // Create empty matrices #nullable disable int n = this.Rows; T[,] L = new T[n,n]; T[,] U = new T[n,n]; uint pexchanges; T[,] P = this.Pivot(out pexchanges); Matrix<T> A2 = new Matrix<T>(this.Calculator, P) * (this); for (int j = 0; j < n; j++) { L[j,j] = Calculator.Unit(); for (int i = 0; i < j +1; i++) { T s1 = default(T); for (int k = 0; k < i; k++) { s1 = Calculator.Add( s1, Calculator.Multiply(U[k,j], L[i,k]) ); } U[i,j] = Calculator.Subtract(A2[i,j], s1); } for (int i = j; i < n; i++) { T s2 = default(T); for (int k = 0; k < j; k++) { s2 = Calculator.Add( s2, Calculator.Multiply(U[k,j], L[i,k]) ); } L[i,j] = Calculator.Divide( Calculator.Subtract(A2[i,j], s2), U[j,j] ); } } #nullable restore return new LUPSet<T>(L, U, P, pexchanges); } public T Determinant() { // TODO deal with 1x1 and 2x2 matrices //http://lampx.tugraz.at/~hadley/num/ch2/2.3a.php // Only square matrices AssertSquare(this); // det(P) * det(A) = det(L) * det(U) // det(A) = det(L) * det(U) / det(P) // det(A) = 1 * Pi{Uii | i in 0..N} / (-1^n) LUPSet<T> lup = this.Decompose(); T d = Calculator.Unit(); //Product of the diagonal elements of the LU matrix for(int i = 0; i < this.Rows; i++) { d = Calculator.Multiply(d, lup.U[i,i]); } // Multiply by the determinate of the P matrix (-1^n | n = number of exchanges) // if n is even, -1^n = 1, if n is odd -1^n = -1 if (lup.Sign > 0) { return d; } else { return Calculator.Negate(d); } } private Matrix<T> submatrix (int row, int column) { AssertValidColumn(this, column); AssertValidRow(this, row); var newColumns = this.Columns - 1; var newRows = this.Rows - 1; if (newColumns < 0) newColumns = 0; if (newRows < 0) newRows = 0; var sub = new Matrix<T>(this.Calculator, newRows, newColumns); var x = 0; for (var icol = 0; icol < this.Columns; icol++) { if (icol == column) continue; int y = 0; for (int irow = 0; irow < this.Rows; irow++) { if (irow == row) continue; sub.elements[y, x] = this[irow, icol]; y++; } x++; } return sub; } public Matrix<T> Minors() { var minors = new Matrix<T>(this.Calculator, this.Rows, this.Columns); for (var row = 0; row < this.Rows; row++) { for (var col = 0; col < this.Columns; col++) { var submatrix = this.submatrix(row, col); var det = submatrix.Determinant(); minors.elements[row, col] = det; } } return minors; } public Matrix<T> Cofactor() { Matrix<T> co = new Matrix<T>(this.Calculator, this.Columns, this.Rows); var minors = Minors(); for (var row = 0; row < this.Rows; row++) { for (var col = 0; col < this.Columns; col++) { // Apply checkerboard of +/- // + - + - // EVEN row // - + - + // ODD row // + - + - bool negate = false; if (row % 2 != 0) { // ODD Row if (!(col % 2 != 0)) { // EVEN column negate = true; } } else { // EVEN row if ((col % 2 != 0)) { // ODD column negate = true; } } co.elements[row, col] = negate ? Calculator.Negate(minors[row, col]) : minors[row, col]; } } return co; } public Matrix<T> Adjugate() { return this.Cofactor().Transpose(); } public Matrix<T> Inverse() { return this.Adjugate() / this.Determinant(); } public static Matrix<T> Operate(Matrix<T> lhs, Matrix<T> rhs, Func<T,T,T> function) { AssertSameDimensions(lhs, rhs); var rs = new T[lhs.Rows,lhs.Columns]; var calc = lhs.Calculator ?? rhs.Calculator; for (var row = 0; row < lhs.Rows; row++) { for (var col = 0; col < lhs.Columns; col++) { rs[row, col] = function(lhs[row, col], rhs[row, col]); } } return new Matrix<T>(calc, rs); } // MATRIX OPERATORS ----------------------------------------------------------------- #region Operators public static Matrix<T> operator + (Matrix<T> lhs, Matrix<T> rhs) { AssertSameDimensions(lhs, rhs); var calc = lhs.Calculator ?? rhs.Calculator; T[,] rs = new T[lhs.Rows, lhs.Columns]; for(int i = 0; i < lhs.Rows; i++) { for(int j = 0; j < lhs.Columns; j++) { rs[i,j] = calc.Add(lhs[i,j], (rhs[i,j])); } } return new Matrix<T>(calc, rs); } public static Matrix<T> operator - (Matrix<T> lhs, Matrix<T> rhs) { AssertSameDimensions(lhs, rhs); var calc = lhs.Calculator ?? rhs.Calculator; T[,] rs = new T[lhs.Rows, lhs.Columns]; for(int i = 0; i < lhs.Rows; i++) { for(int j = 0; j < lhs.Columns; j++) { rs[i,j] = calc.Subtract(lhs[i,j], (rhs[i,j])); } } return new Matrix<T>(calc, rs); } public static Matrix<T> operator / (Matrix<T> lhs, T rhs) { var calc = lhs.Calculator; T[,] rs = new T[lhs.Rows, lhs.Columns]; for(int i = 0; i < lhs.Rows; i++) { for(int j = 0; j < lhs.Columns; j++) { rs[i,j] = calc.Divide(lhs[i,j], rhs); } } return new Matrix<T>(calc, rs); } public static Matrix<T> operator * (Matrix<T> lhs, T rhs) { var calc = lhs.Calculator; T[,] rs = new T[lhs.Rows, lhs.Columns]; for(int i = 0; i < lhs.Rows; i++) { for(int j = 0; j < lhs.Columns; j++) { rs[i,j] = calc.Multiply(lhs[i,j], rhs); } } return new Matrix<T>(calc, rs); } public static Matrix<T> operator * (T lhs, Matrix<T> rhs) { var calc = rhs.Calculator; T[,] rs = new T[rhs.Rows, rhs.Columns]; for(int i = 0; i < rhs.Rows; i++) { for(int j = 0; j < rhs.Columns; j++) { rs[i,j] = calc.Multiply(lhs, rhs[i,j]); } } return new Matrix<T>(calc, rs); } public static Matrix<T> operator * (Matrix<T> lhs, Matrix<T> rhs) { AssertCanMultiply(lhs, rhs); var calc = lhs.Calculator ?? rhs.Calculator; #nullable disable int rows = lhs.Rows; int columns = rhs.Columns; T[,] rs = new T[rows,columns]; for (int i = 0; i < rows; i++) { for (int j = 0; j < columns; j++) { T sum = default(T); for (int k = 0; k < lhs.Columns; k++) { if (k == 0) { sum = calc.Multiply(lhs[i,k], (rhs[k,j])); } else { sum = calc.Add( sum, calc.Multiply(lhs[i,k], (rhs[k,j])) ); } } rs[i,j] = sum; } } #nullable restore return new Matrix<T>(calc, rs); } #endregion // STRING CONSTRUCTION ----------------------------------------------------------------- #region Stringing protected enum MatrixItemPrintOrder { RowWise, ColumnWise, } public string ToWolframString(string format = \"{0}\") { return this.Format( MatrixItemPrintOrder.RowWise, \"{\", \"{\",format,\",\", \"}\", \",\", \"}\" ); } public string ToMatlabString(string format = \"{0}\") { return this.Format( MatrixItemPrintOrder.RowWise, \"[\", string.Empty,format,\",\", string.Empty, \";\", \"]\" ); } public string ToMapleString( string format = \"{0}\") { return this.Format( MatrixItemPrintOrder.ColumnWise, \"<\", \"<\",format,\",\", \">\", \"|\", \">\" ); } public string ToLatexString(string format = \"{0}\") { return @\"\\begin{bmatrix}\" + this.Format( MatrixItemPrintOrder.RowWise, string.Empty, string.Empty,format,\"&\", string.Empty, @\" \\\\\", string.Empty ) + @\"\\end{bmatrix}\"; } public override string ToString() { return this.Format( MatrixItemPrintOrder.RowWise, string.Empty, string.Empty,\"{0}\",\" \", string.Empty, System.Environment.NewLine, string.Empty ); } private string Format(MatrixItemPrintOrder format = MatrixItemPrintOrder.RowWise, string prefix = \"[\", string itemPrefix = \"\", string elementFormat = \"{0}\", string elementSeparator = \",\", string itemPostfix = \"\", string itemSeparator = \";\", string postfix = \"]\") { StringBuilder sb = new StringBuilder(); sb.Append(prefix); if (format == MatrixItemPrintOrder.RowWise) { // Iterate over rows first for(int i = 0; i < this.Rows; i++){ if (i != 0) { sb.Append(itemSeparator); } sb.Append(itemPrefix); for(int j = 0; j < this.Columns; j++) { if (j != 0) { sb.Append(elementSeparator); } sb.Append(string.Format(elementFormat, this[i,j])); } sb.Append(itemPostfix); } } else { // Iterate over columns first for(int i = 0; i < this.Columns; i++){ if (i != 0) { sb.Append(itemSeparator); } sb.Append(itemPrefix); for(int j = 0; j < this.Rows; j++) { if (j != 0) { sb.Append(elementSeparator); } sb.Append(string.Format(elementFormat, this[j,i])); } sb.Append(itemPostfix); } } sb.Append(postfix); return sb.ToString(); } #endregion } }","title":"File Matrix.cs"},{"location":"doxygen/_point2_8cs/","text":"File Point2.cs File List > Numerics > src > Point2.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class Point2 <T> X,Y Coordinate pair The documentation for this class was generated from the following file Numerics/src/Point2.cs","title":"File Point2.cs"},{"location":"doxygen/_point2_8cs/#file-point2cs","text":"File List > Numerics > src > Point2.cs Go to the source code of this file.","title":"File Point2.cs"},{"location":"doxygen/_point2_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_point2_8cs/#classes","text":"Type Name class Point2 <T> X,Y Coordinate pair The documentation for this class was generated from the following file Numerics/src/Point2.cs","title":"Classes"},{"location":"doxygen/_point2_8cs_source/","text":"File Point2.cs File List > Numerics > src > Point2.cs Go to the documentation of this file. namespace Qkmaxware.Numerics { public class Point2<T> { public T X {get; private set;} public T Y {get; private set;} public Point2(T x, T y) { this.X = x; this.Y = y; } } }","title":"File Point2.cs"},{"location":"doxygen/_point2_8cs_source/#file-point2cs","text":"File List > Numerics > src > Point2.cs Go to the documentation of this file. namespace Qkmaxware.Numerics { public class Point2<T> { public T X {get; private set;} public T Y {get; private set;} public Point2(T x, T y) { this.X = x; this.Y = y; } } }","title":"File Point2.cs"},{"location":"doxygen/_range_8cs/","text":"File Range.cs File List > Numerics > src > Range.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class DoubleRange Range of doubles class IntRange Range of integers class Range <T> Generic range of values The documentation for this class was generated from the following file Numerics/src/Range.cs","title":"File Range.cs"},{"location":"doxygen/_range_8cs/#file-rangecs","text":"File List > Numerics > src > Range.cs Go to the source code of this file.","title":"File Range.cs"},{"location":"doxygen/_range_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_range_8cs/#classes","text":"Type Name class DoubleRange Range of doubles class IntRange Range of integers class Range <T> Generic range of values The documentation for this class was generated from the following file Numerics/src/Range.cs","title":"Classes"},{"location":"doxygen/_range_8cs_source/","text":"File Range.cs File List > Numerics > src > Range.cs Go to the documentation of this file. using System; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class Range<T> : ICalculationHelper<T>{ public T Start {get; private set;} public T End {get; private set;} public T Increment {get; private set;} public ICalculator<T> Calculator {get; private set;} public IEnumerable<T> All { get { var current = Start; bool flipComparison = (Calculator.Compare(Start, End) > 0) ? true : false; // true if Start > End do { yield return current; current = Calculator.Add(current, Increment); } while ( !flipComparison ? Calculator.Compare(current, End) <= 0 // Start < End -> current < End : Calculator.Compare(current, End) >= 0 // Start > End -> current > End ); } } public Range(ICalculator<T> calculator, T start, T end, T increment) { this.Calculator = calculator; this.Start = start; this.End = end; this.Increment = increment; } public override string ToString() { return $\"{this.Start}:{this.Increment}:{this.End}\"; } public override bool Equals(object obj) { return obj switch { Range<T> rng => this.Calculator.Compare(this.Start, rng.Start) == 0 && this.Calculator.Compare(this.End, rng.End) == 0 && this.Calculator.Compare(this.Increment, rng.Increment) == 0, _ => base.Equals(obj) }; } public override int GetHashCode() { return HashCode.Combine(this.Start, this.End, this.Increment); } } public class IntRange : Range<int> { public IntRange(int start, int end, int increment = 1) : base(IntCalculator.Instance, start, end, increment) {} public static implicit operator IntRange (Range range) { return new IntRange(range.Start.Value, range.End.Value, 1); } } public class DoubleRange : Range<double> { public DoubleRange(double start, double end, double increment = 1) : base(DoubleCalculator.Instance, start, end, increment) {} public static implicit operator DoubleRange (IntRange range) { return new DoubleRange(range.Start, range.End, range.Increment); } public static implicit operator DoubleRange (Range range) { return new DoubleRange(range.Start.Value, range.End.Value, 1); } } }","title":"File Range.cs"},{"location":"doxygen/_range_8cs_source/#file-rangecs","text":"File List > Numerics > src > Range.cs Go to the documentation of this file. using System; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class Range<T> : ICalculationHelper<T>{ public T Start {get; private set;} public T End {get; private set;} public T Increment {get; private set;} public ICalculator<T> Calculator {get; private set;} public IEnumerable<T> All { get { var current = Start; bool flipComparison = (Calculator.Compare(Start, End) > 0) ? true : false; // true if Start > End do { yield return current; current = Calculator.Add(current, Increment); } while ( !flipComparison ? Calculator.Compare(current, End) <= 0 // Start < End -> current < End : Calculator.Compare(current, End) >= 0 // Start > End -> current > End ); } } public Range(ICalculator<T> calculator, T start, T end, T increment) { this.Calculator = calculator; this.Start = start; this.End = end; this.Increment = increment; } public override string ToString() { return $\"{this.Start}:{this.Increment}:{this.End}\"; } public override bool Equals(object obj) { return obj switch { Range<T> rng => this.Calculator.Compare(this.Start, rng.Start) == 0 && this.Calculator.Compare(this.End, rng.End) == 0 && this.Calculator.Compare(this.Increment, rng.Increment) == 0, _ => base.Equals(obj) }; } public override int GetHashCode() { return HashCode.Combine(this.Start, this.End, this.Increment); } } public class IntRange : Range<int> { public IntRange(int start, int end, int increment = 1) : base(IntCalculator.Instance, start, end, increment) {} public static implicit operator IntRange (Range range) { return new IntRange(range.Start.Value, range.End.Value, 1); } } public class DoubleRange : Range<double> { public DoubleRange(double start, double end, double increment = 1) : base(DoubleCalculator.Instance, start, end, increment) {} public static implicit operator DoubleRange (IntRange range) { return new DoubleRange(range.Start, range.End, range.Increment); } public static implicit operator DoubleRange (Range range) { return new DoubleRange(range.Start.Value, range.End.Value, 1); } } }","title":"File Range.cs"},{"location":"doxygen/_runge_kutta_ivp_solver_8cs/","text":"File RungeKuttaIvpSolver.cs File List > Numerics > src > Ode > RungeKuttaIvpSolver.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class RungeKuttaIvpSolver Solve initial value problems with Fourth Order Runge-Kutta method The documentation for this class was generated from the following file Numerics/src/Ode/RungeKuttaIvpSolver.cs","title":"File RungeKuttaIvpSolver.cs"},{"location":"doxygen/_runge_kutta_ivp_solver_8cs/#file-rungekuttaivpsolvercs","text":"File List > Numerics > src > Ode > RungeKuttaIvpSolver.cs Go to the source code of this file.","title":"File RungeKuttaIvpSolver.cs"},{"location":"doxygen/_runge_kutta_ivp_solver_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_runge_kutta_ivp_solver_8cs/#classes","text":"Type Name class RungeKuttaIvpSolver Solve initial value problems with Fourth Order Runge-Kutta method The documentation for this class was generated from the following file Numerics/src/Ode/RungeKuttaIvpSolver.cs","title":"Classes"},{"location":"doxygen/_runge_kutta_ivp_solver_8cs_source/","text":"File RungeKuttaIvpSolver.cs File List > Numerics > src > Ode > RungeKuttaIvpSolver.cs Go to the documentation of this file. using System; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class RungeKuttaIvpSolver : IIvpSolver<double> { public IFunction<double> Solve(IFunction2<double> f, Range<double> tRange, double y0) { // INPUT endpoints a & b from xRange, range subdivisions N, initial condition y(a) = y0 // OUTPUT approximation of y at the values in xRange var N = 50; // provide as a argument? var a = Math.Min(tRange.Start, tRange.End); var b = Math.Max(tRange.Start, tRange.End); var h = (b - a) / N; var t = a; var w = y0; var points = new List<Point2<double>>(N); points.Add(new Point2<double>(t, w)); for (var i = 1; i <= N; i++) { var k1 = h * f.Evaluate(t, w); var k2 = h * f.Evaluate(t + h/2, w + k1/2); var k3 = h * f.Evaluate(t + h/2, w + k2/2); var k4 = h * f.Evaluate(t + h, w + k3); w = w + (k1 + 2 * k2 + 2 * k3 + k4) / 6; // Compute wi t = a + i * h; // Compute ti points.Add(new Point2<double>(t, w)); } return new DoubleInterpolatedFunction(points); } } }","title":"File RungeKuttaIvpSolver.cs"},{"location":"doxygen/_runge_kutta_ivp_solver_8cs_source/#file-rungekuttaivpsolvercs","text":"File List > Numerics > src > Ode > RungeKuttaIvpSolver.cs Go to the documentation of this file. using System; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class RungeKuttaIvpSolver : IIvpSolver<double> { public IFunction<double> Solve(IFunction2<double> f, Range<double> tRange, double y0) { // INPUT endpoints a & b from xRange, range subdivisions N, initial condition y(a) = y0 // OUTPUT approximation of y at the values in xRange var N = 50; // provide as a argument? var a = Math.Min(tRange.Start, tRange.End); var b = Math.Max(tRange.Start, tRange.End); var h = (b - a) / N; var t = a; var w = y0; var points = new List<Point2<double>>(N); points.Add(new Point2<double>(t, w)); for (var i = 1; i <= N; i++) { var k1 = h * f.Evaluate(t, w); var k2 = h * f.Evaluate(t + h/2, w + k1/2); var k3 = h * f.Evaluate(t + h/2, w + k2/2); var k4 = h * f.Evaluate(t + h, w + k3); w = w + (k1 + 2 * k2 + 2 * k3 + k4) / 6; // Compute wi t = a + i * h; // Compute ti points.Add(new Point2<double>(t, w)); } return new DoubleInterpolatedFunction(points); } } }","title":"File RungeKuttaIvpSolver.cs"},{"location":"doxygen/_simpson_integrator_8cs/","text":"File SimpsonIntegrator.cs File List > Integration > SimpsonIntegrator.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class SimpsonIntegrator Integration using Simpson's method The documentation for this class was generated from the following file Numerics/src/Integration/SimpsonIntegrator.cs","title":"File SimpsonIntegrator.cs"},{"location":"doxygen/_simpson_integrator_8cs/#file-simpsonintegratorcs","text":"File List > Integration > SimpsonIntegrator.cs Go to the source code of this file.","title":"File SimpsonIntegrator.cs"},{"location":"doxygen/_simpson_integrator_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_simpson_integrator_8cs/#classes","text":"Type Name class SimpsonIntegrator Integration using Simpson's method The documentation for this class was generated from the following file Numerics/src/Integration/SimpsonIntegrator.cs","title":"Classes"},{"location":"doxygen/_simpson_integrator_8cs_source/","text":"File SimpsonIntegrator.cs File List > Integration > SimpsonIntegrator.cs Go to the documentation of this file. using System; using System.Linq; namespace Qkmaxware.Numerics { public class SimpsonIntegrator : IDefiniteIntegrator<double> { public double Integrate(IFunction<double> fx, Range<double> range) { var x0 = range.Start; var sum = 0d; foreach (var x2 in range.All.Skip(1)) { var h = x2 - x0; var x1 = x0 + 0.5 * h; var fx0 = fx.Evaluate(x0); var fx1 = fx.Evaluate(x1); var fx2 = fx.Evaluate(x2); sum += (h / 6) * (fx0 + 4*fx1 + fx2); x0 = x2; } return sum; } } }","title":"File SimpsonIntegrator.cs"},{"location":"doxygen/_simpson_integrator_8cs_source/#file-simpsonintegratorcs","text":"File List > Integration > SimpsonIntegrator.cs Go to the documentation of this file. using System; using System.Linq; namespace Qkmaxware.Numerics { public class SimpsonIntegrator : IDefiniteIntegrator<double> { public double Integrate(IFunction<double> fx, Range<double> range) { var x0 = range.Start; var sum = 0d; foreach (var x2 in range.All.Skip(1)) { var h = x2 - x0; var x1 = x0 + 0.5 * h; var fx0 = fx.Evaluate(x0); var fx1 = fx.Evaluate(x1); var fx2 = fx.Evaluate(x2); sum += (h / 6) * (fx0 + 4*fx1 + fx2); x0 = x2; } return sum; } } }","title":"File SimpsonIntegrator.cs"},{"location":"doxygen/_smoothstep_interpolation_8cs/","text":"File SmoothstepInterpolation.cs File List > Function > SmoothstepInterpolation.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class SmoothstepInterpolation Function interpolated using smoothstep The documentation for this class was generated from the following file Numerics/src/Function/SmoothstepInterpolation.cs","title":"File SmoothstepInterpolation.cs"},{"location":"doxygen/_smoothstep_interpolation_8cs/#file-smoothstepinterpolationcs","text":"File List > Function > SmoothstepInterpolation.cs Go to the source code of this file.","title":"File SmoothstepInterpolation.cs"},{"location":"doxygen/_smoothstep_interpolation_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_smoothstep_interpolation_8cs/#classes","text":"Type Name class SmoothstepInterpolation Function interpolated using smoothstep The documentation for this class was generated from the following file Numerics/src/Function/SmoothstepInterpolation.cs","title":"Classes"},{"location":"doxygen/_smoothstep_interpolation_8cs_source/","text":"File SmoothstepInterpolation.cs File List > Function > SmoothstepInterpolation.cs Go to the documentation of this file. using System; using System.Linq; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class SmoothstepInterpolation : IInterpolator<double> { public double Interpolate(double last, double start, double end, double next, double t) { var _01 = t * t * t * (t * (t * 6 - 15) + 10); // evaluation between 0(start) and 1(end) return _01 * end + (1 - _01) * start; } } }","title":"File SmoothstepInterpolation.cs"},{"location":"doxygen/_smoothstep_interpolation_8cs_source/#file-smoothstepinterpolationcs","text":"File List > Function > SmoothstepInterpolation.cs Go to the documentation of this file. using System; using System.Linq; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class SmoothstepInterpolation : IInterpolator<double> { public double Interpolate(double last, double start, double end, double next, double t) { var _01 = t * t * t * (t * (t * 6 - 15) + 10); // evaluation between 0(start) and 1(end) return _01 * end + (1 - _01) * start; } } }","title":"File SmoothstepInterpolation.cs"},{"location":"doxygen/_step_interpolation_8cs/","text":"File StepInterpolation.cs File List > Function > StepInterpolation.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class StepInterpolation Function interpolated using stepped-interpolation The documentation for this class was generated from the following file Numerics/src/Function/StepInterpolation.cs","title":"File StepInterpolation.cs"},{"location":"doxygen/_step_interpolation_8cs/#file-stepinterpolationcs","text":"File List > Function > StepInterpolation.cs Go to the source code of this file.","title":"File StepInterpolation.cs"},{"location":"doxygen/_step_interpolation_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_step_interpolation_8cs/#classes","text":"Type Name class StepInterpolation Function interpolated using stepped-interpolation The documentation for this class was generated from the following file Numerics/src/Function/StepInterpolation.cs","title":"Classes"},{"location":"doxygen/_step_interpolation_8cs_source/","text":"File StepInterpolation.cs File List > Function > StepInterpolation.cs Go to the documentation of this file. using System; using System.Linq; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class StepInterpolation : IInterpolator<double> { public StepInterpolation() {} public double Interpolate(double last, double start, double end, double next, double t) { return (t > 0.5) ? end : start; } } }","title":"File StepInterpolation.cs"},{"location":"doxygen/_step_interpolation_8cs_source/#file-stepinterpolationcs","text":"File List > Function > StepInterpolation.cs Go to the documentation of this file. using System; using System.Linq; using System.Collections.Generic; namespace Qkmaxware.Numerics { public class StepInterpolation : IInterpolator<double> { public StepInterpolation() {} public double Interpolate(double last, double start, double end, double next, double t) { return (t > 0.5) ? end : start; } } }","title":"File StepInterpolation.cs"},{"location":"doxygen/_three_point_differentiator_8cs/","text":"File ThreePointDifferentiator.cs File List > Differentiation > ThreePointDifferentiator.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class CentredThreePointDifferentiator Midpoint three point numerical derivative solver class EndpointThreePointDifferentiator Endpoint three point numerical derivative solver The documentation for this class was generated from the following file Numerics/src/Differentiation/ThreePointDifferentiator.cs","title":"File ThreePointDifferentiator.cs"},{"location":"doxygen/_three_point_differentiator_8cs/#file-threepointdifferentiatorcs","text":"File List > Differentiation > ThreePointDifferentiator.cs Go to the source code of this file.","title":"File ThreePointDifferentiator.cs"},{"location":"doxygen/_three_point_differentiator_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_three_point_differentiator_8cs/#classes","text":"Type Name class CentredThreePointDifferentiator Midpoint three point numerical derivative solver class EndpointThreePointDifferentiator Endpoint three point numerical derivative solver The documentation for this class was generated from the following file Numerics/src/Differentiation/ThreePointDifferentiator.cs","title":"Classes"},{"location":"doxygen/_three_point_differentiator_8cs_source/","text":"File ThreePointDifferentiator.cs File List > Differentiation > ThreePointDifferentiator.cs Go to the documentation of this file. using System; using System.Linq; namespace Qkmaxware.Numerics { public class CentredThreePointDifferentiator : INumericDifferentiator<double> { public double Differentiate (IFunction<double> f, double x, double h = double.Epsilon) { return f.Evaluate(x + h) - f.Evaluate(x - h) / (2 * h); } public IFunction<double> Differentiate(IFunction<double> f, Range<double> range) { var h = range.Increment * 0.5f; var xs = range.All.ToArray(); var ys = xs.Select(x => Differentiate(f, x, h)).ToArray(); return new DoubleInterpolatedFunction(xs, ys); } } public class EndpointThreePointDifferentiator: INumericDifferentiator<double> { public double Differentiate (IFunction<double> f, double x, double h = double.Epsilon) { return (-3 * f.Evaluate(x) + 4 * f.Evaluate(x + h) - f.Evaluate(x + 2 * h)) / (2 * h); } public IFunction<double> Differentiate(IFunction<double> f, Range<double> range) { var h = range.Increment * 0.5f; var xs = range.All.ToArray(); var ys = xs.Select(x => Differentiate(f, x, h)).ToArray(); return new DoubleInterpolatedFunction(xs, ys); } } }","title":"File ThreePointDifferentiator.cs"},{"location":"doxygen/_three_point_differentiator_8cs_source/#file-threepointdifferentiatorcs","text":"File List > Differentiation > ThreePointDifferentiator.cs Go to the documentation of this file. using System; using System.Linq; namespace Qkmaxware.Numerics { public class CentredThreePointDifferentiator : INumericDifferentiator<double> { public double Differentiate (IFunction<double> f, double x, double h = double.Epsilon) { return f.Evaluate(x + h) - f.Evaluate(x - h) / (2 * h); } public IFunction<double> Differentiate(IFunction<double> f, Range<double> range) { var h = range.Increment * 0.5f; var xs = range.All.ToArray(); var ys = xs.Select(x => Differentiate(f, x, h)).ToArray(); return new DoubleInterpolatedFunction(xs, ys); } } public class EndpointThreePointDifferentiator: INumericDifferentiator<double> { public double Differentiate (IFunction<double> f, double x, double h = double.Epsilon) { return (-3 * f.Evaluate(x) + 4 * f.Evaluate(x + h) - f.Evaluate(x + 2 * h)) / (2 * h); } public IFunction<double> Differentiate(IFunction<double> f, Range<double> range) { var h = range.Increment * 0.5f; var xs = range.All.ToArray(); var ys = xs.Select(x => Differentiate(f, x, h)).ToArray(); return new DoubleInterpolatedFunction(xs, ys); } } }","title":"File ThreePointDifferentiator.cs"},{"location":"doxygen/_trapezoidal_integrator_8cs/","text":"File TrapezoidalIntegrator.cs File List > Integration > TrapezoidalIntegrator.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name class TrapezoidalIntegrator Integration using the trapezoidal rule The documentation for this class was generated from the following file Numerics/src/Integration/TrapezoidalIntegrator.cs","title":"File TrapezoidalIntegrator.cs"},{"location":"doxygen/_trapezoidal_integrator_8cs/#file-trapezoidalintegratorcs","text":"File List > Integration > TrapezoidalIntegrator.cs Go to the source code of this file.","title":"File TrapezoidalIntegrator.cs"},{"location":"doxygen/_trapezoidal_integrator_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_trapezoidal_integrator_8cs/#classes","text":"Type Name class TrapezoidalIntegrator Integration using the trapezoidal rule The documentation for this class was generated from the following file Numerics/src/Integration/TrapezoidalIntegrator.cs","title":"Classes"},{"location":"doxygen/_trapezoidal_integrator_8cs_source/","text":"File TrapezoidalIntegrator.cs File List > Integration > TrapezoidalIntegrator.cs Go to the documentation of this file. using System; using System.Linq; namespace Qkmaxware.Numerics { public class TrapezoidalIntegrator : IDefiniteIntegrator<double> { private double TrapezoidalRule(double x1, double x0, double y1, double y0) { var h = x1 - x0; var value = (h/2) * (y0 + y1);// - ((h * h * h) / 12) * err; return value; } public double Integrate(IFunction<double> fx, Range<double> range) { var x0 = range.Start; var sum = 0d; foreach (var x1 in range.All.Skip(1)) { sum += TrapezoidalRule(x1, x0, fx.Evaluate(x1), fx.Evaluate(x0)); x0 = x1; } return sum; } } }","title":"File TrapezoidalIntegrator.cs"},{"location":"doxygen/_trapezoidal_integrator_8cs_source/#file-trapezoidalintegratorcs","text":"File List > Integration > TrapezoidalIntegrator.cs Go to the documentation of this file. using System; using System.Linq; namespace Qkmaxware.Numerics { public class TrapezoidalIntegrator : IDefiniteIntegrator<double> { private double TrapezoidalRule(double x1, double x0, double y1, double y0) { var h = x1 - x0; var value = (h/2) * (y0 + y1);// - ((h * h * h) / 12) * err; return value; } public double Integrate(IFunction<double> fx, Range<double> range) { var x0 = range.Start; var sum = 0d; foreach (var x1 in range.All.Skip(1)) { sum += TrapezoidalRule(x1, x0, fx.Evaluate(x1), fx.Evaluate(x0)); x0 = x1; } return sum; } } }","title":"File TrapezoidalIntegrator.cs"},{"location":"doxygen/_value_generator_8cs/","text":"File ValueGenerator.cs File List > Linear Algebra > ValueGenerator.cs Go to the source code of this file. Namespaces Type Name namespace Qkmaxware namespace Numerics Classes Type Name interface IValueGenerator <T> Interface representing any object that can generate values The documentation for this class was generated from the following file Numerics/src/Linear Algebra/ValueGenerator.cs","title":"File ValueGenerator.cs"},{"location":"doxygen/_value_generator_8cs/#file-valuegeneratorcs","text":"File List > Linear Algebra > ValueGenerator.cs Go to the source code of this file.","title":"File ValueGenerator.cs"},{"location":"doxygen/_value_generator_8cs/#namespaces","text":"Type Name namespace Qkmaxware namespace Numerics","title":"Namespaces"},{"location":"doxygen/_value_generator_8cs/#classes","text":"Type Name interface IValueGenerator <T> Interface representing any object that can generate values The documentation for this class was generated from the following file Numerics/src/Linear Algebra/ValueGenerator.cs","title":"Classes"},{"location":"doxygen/_value_generator_8cs_source/","text":"File ValueGenerator.cs File List > Linear Algebra > ValueGenerator.cs Go to the documentation of this file. namespace Qkmaxware.Numerics { public interface IValueGenerator<T> { T Next(); T Next(T min, T max); } }","title":"File ValueGenerator.cs"},{"location":"doxygen/_value_generator_8cs_source/#file-valuegeneratorcs","text":"File List > Linear Algebra > ValueGenerator.cs Go to the documentation of this file. namespace Qkmaxware.Numerics { public interface IValueGenerator<T> { T Next(); T Next(T min, T max); } }","title":"File ValueGenerator.cs"},{"location":"doxygen/annotated/","text":"Class List Here are the classes, structs, unions and interfaces with brief descriptions: namespace Qkmaxware namespace Numerics class BaseAdaptiveQuadratureIntegrator Base class for integrations methods using an adaptive quadrature scheme class BaseInterpolatedFunction Base class for a function that is interpolated between sample points class CentredFivePointDifferentiator Midpoint five point numerical derivative Solver class CentredThreePointDifferentiator Midpoint three point numerical derivative solver class ComplexCalculator Calculator for complex arithmetic class ComplexExtensions Static class for extensions related to complex numbers class ComplexFunction Native complex function class ComplexMatrix Complex number matrix class CosineInterpolation Function interpolated using cosine-interpolation class CubicInterpolation Function interpolated using cubic-interpolation class DimensionMismatchException Matrix dimension mismatch class DoubleCalculator Calculator for double arithmetic class DoubleFunction Native double function class DoubleFunction2 Native double function of two variables class DoubleInterpolatedFunction Interpolated function using doubles class DoubleMatrix Double matrix class DoubleRange Range of doubles class EndpointFivePointDifferentiator Endpoint five point numerical derivative solver class EndpointThreePointDifferentiator Endpoint three point numerical derivative solver class EulerIvpSolver Solve initial value problems with Euler's method interface ICalculationHelper interface ICalculator Interface for a class that can perform computations with the given type interface IDefiniteIntegrator Interface for a calculator that can compute definite integrals interface IFunction Generic interface for a function with 1 parametre interface IFunction2 Generic interface for a function with 2 parametres interface IFunction3 Generic interface for a function with 3 parametres interface IFunction4 Generic interface for a function with 4 parametres interface IIndefiniteIntegrator Interface for a calculator that can compute indefinite integrals interface IInterpolatedFunction Generic interface for a function with 1 parametre that is interpolated between the given sample points interface IInterpolator Generic interface for interpolating a value between two points interface IIvpSolver Solver for initial value problem ordinary differential equations interface INumericDifferentiator Interface for any class that can calculate the derivative of a function interface IValueGenerator Interface representing any object that can generate values class IntCalculator Calculator for integer arithmetic class IntFunction Native integer function class IntMatrix Integer matrix class IntRange Range of integers struct LUPSet LU factorization with full pivoting decomposition class LinearInterpolation Function interpolated using linear-interpolation class Matrix Generic matrix class of type T class Point2 X,Y Coordinate pair class Range Generic range of values class RungeKuttaIvpSolver Solve initial value problems with Fourth Order Runge-Kutta method class SimpsonAdaptiveQuadratureIntegrator Adaptive quadrature integration using Simpson's method class SimpsonIntegrator Integration using Simpson's method class SmoothstepInterpolation Function interpolated using smoothstep class StepInterpolation Function interpolated using stepped-interpolation class TrapezoidalIntegrator Integration using the trapezoidal rule namespace System namespace Generic namespace Linq namespace Numerics namespace Text","title":"Class List"},{"location":"doxygen/annotated/#class-list","text":"Here are the classes, structs, unions and interfaces with brief descriptions: namespace Qkmaxware namespace Numerics class BaseAdaptiveQuadratureIntegrator Base class for integrations methods using an adaptive quadrature scheme class BaseInterpolatedFunction Base class for a function that is interpolated between sample points class CentredFivePointDifferentiator Midpoint five point numerical derivative Solver class CentredThreePointDifferentiator Midpoint three point numerical derivative solver class ComplexCalculator Calculator for complex arithmetic class ComplexExtensions Static class for extensions related to complex numbers class ComplexFunction Native complex function class ComplexMatrix Complex number matrix class CosineInterpolation Function interpolated using cosine-interpolation class CubicInterpolation Function interpolated using cubic-interpolation class DimensionMismatchException Matrix dimension mismatch class DoubleCalculator Calculator for double arithmetic class DoubleFunction Native double function class DoubleFunction2 Native double function of two variables class DoubleInterpolatedFunction Interpolated function using doubles class DoubleMatrix Double matrix class DoubleRange Range of doubles class EndpointFivePointDifferentiator Endpoint five point numerical derivative solver class EndpointThreePointDifferentiator Endpoint three point numerical derivative solver class EulerIvpSolver Solve initial value problems with Euler's method interface ICalculationHelper interface ICalculator Interface for a class that can perform computations with the given type interface IDefiniteIntegrator Interface for a calculator that can compute definite integrals interface IFunction Generic interface for a function with 1 parametre interface IFunction2 Generic interface for a function with 2 parametres interface IFunction3 Generic interface for a function with 3 parametres interface IFunction4 Generic interface for a function with 4 parametres interface IIndefiniteIntegrator Interface for a calculator that can compute indefinite integrals interface IInterpolatedFunction Generic interface for a function with 1 parametre that is interpolated between the given sample points interface IInterpolator Generic interface for interpolating a value between two points interface IIvpSolver Solver for initial value problem ordinary differential equations interface INumericDifferentiator Interface for any class that can calculate the derivative of a function interface IValueGenerator Interface representing any object that can generate values class IntCalculator Calculator for integer arithmetic class IntFunction Native integer function class IntMatrix Integer matrix class IntRange Range of integers struct LUPSet LU factorization with full pivoting decomposition class LinearInterpolation Function interpolated using linear-interpolation class Matrix Generic matrix class of type T class Point2 X,Y Coordinate pair class Range Generic range of values class RungeKuttaIvpSolver Solve initial value problems with Fourth Order Runge-Kutta method class SimpsonAdaptiveQuadratureIntegrator Adaptive quadrature integration using Simpson's method class SimpsonIntegrator Integration using Simpson's method class SmoothstepInterpolation Function interpolated using smoothstep class StepInterpolation Function interpolated using stepped-interpolation class TrapezoidalIntegrator Integration using the trapezoidal rule namespace System namespace Generic namespace Linq namespace Numerics namespace Text","title":"Class List"},{"location":"doxygen/class_member_enums/","text":"Class Member Enums","title":"Class Member Enums"},{"location":"doxygen/class_member_enums/#class-member-enums","text":"","title":"Class Member Enums"},{"location":"doxygen/class_member_functions/","text":"Class Member Functions a Add ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Adjugate ( Qkmaxware::Numerics::Matrix ) AssertCanMultiply ( Qkmaxware::Numerics::Matrix ) AssertSameDimensions ( Qkmaxware::Numerics::Matrix ) AssertSquare ( Qkmaxware::Numerics::Matrix ) AssertValidColumn ( Qkmaxware::Numerics::Matrix ) AssertValidRow ( Qkmaxware::Numerics::Matrix ) b BaseAdaptiveQuadratureIntegrator ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator ) BaseInterpolatedFunction ( Qkmaxware::Numerics::BaseInterpolatedFunction ) c Compare ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) ComplexFunction ( Qkmaxware::Numerics::ComplexFunction ) ComplexMatrix ( Qkmaxware::Numerics::ComplexMatrix ) Cofactor ( Qkmaxware::Numerics::Matrix ) d Differentiate ( Qkmaxware::Numerics::CentredFivePointDifferentiator , Qkmaxware::Numerics::CentredThreePointDifferentiator , Qkmaxware::Numerics::EndpointFivePointDifferentiator , Qkmaxware::Numerics::EndpointThreePointDifferentiator , Qkmaxware::Numerics::INumericDifferentiator ) Divide ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) DimensionMismatchException ( Qkmaxware::Numerics::DimensionMismatchException ) DoubleFunction ( Qkmaxware::Numerics::DoubleFunction ) DoubleFunction2 ( Qkmaxware::Numerics::DoubleFunction2 ) DoubleInterpolatedFunction ( Qkmaxware::Numerics::DoubleInterpolatedFunction ) DoubleMatrix ( Qkmaxware::Numerics::DoubleMatrix ) DoubleRange ( Qkmaxware::Numerics::DoubleRange ) Decompose ( Qkmaxware::Numerics::Matrix ) Determinant ( Qkmaxware::Numerics::Matrix ) e EstimateIntegralOver ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator , Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator ) Equal ( Qkmaxware::Numerics::BaseInterpolatedFunction ) Evaluate ( Qkmaxware::Numerics::BaseInterpolatedFunction , Qkmaxware::Numerics::ComplexFunction , Qkmaxware::Numerics::DoubleFunction , Qkmaxware::Numerics::DoubleFunction2 , Qkmaxware::Numerics::IFunction , Qkmaxware::Numerics::IFunction2 , Qkmaxware::Numerics::IFunction3 , Qkmaxware::Numerics::IFunction4 , Qkmaxware::Numerics::IntFunction ) Equals ( Qkmaxware::Numerics::Range ) f Fill ( Qkmaxware::Numerics::Matrix ) Format ( Qkmaxware::Numerics::Matrix ) g GreaterEqualThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) GreaterThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) GetHashCode ( Qkmaxware::Numerics::Range ) i Integrate ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator , Qkmaxware::Numerics::IDefiniteIntegrator , Qkmaxware::Numerics::IIndefiniteIntegrator , Qkmaxware::Numerics::SimpsonIntegrator , Qkmaxware::Numerics::TrapezoidalIntegrator ) IsErrorLargerThanTolerance ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator , Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator ) IsInRange ( Qkmaxware::Numerics::BaseInterpolatedFunction ) i ( Qkmaxware::Numerics::ComplexExtensions ) Interpolate ( Qkmaxware::Numerics::CosineInterpolation , Qkmaxware::Numerics::CubicInterpolation , Qkmaxware::Numerics::IInterpolator , Qkmaxware::Numerics::LinearInterpolation , Qkmaxware::Numerics::SmoothstepInterpolation , Qkmaxware::Numerics::StepInterpolation ) IntFunction ( Qkmaxware::Numerics::IntFunction ) IntMatrix ( Qkmaxware::Numerics::IntMatrix ) IntRange ( Qkmaxware::Numerics::IntRange ) Identity ( Qkmaxware::Numerics::Matrix ) Inverse ( Qkmaxware::Numerics::Matrix ) l LessEqualThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) LessThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) LUPSet ( Qkmaxware::Numerics::LUPSet ) LinearInterpolation ( Qkmaxware::Numerics::LinearInterpolation ) m Multiply ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Map ( Qkmaxware::Numerics::Matrix ) Map< K > ( Qkmaxware::Numerics::Matrix ) Matrix ( Qkmaxware::Numerics::Matrix ) Minors ( Qkmaxware::Numerics::Matrix ) n Negate ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Next ( Qkmaxware::Numerics::IValueGenerator ) o operator ComplexMatrix ( Qkmaxware::Numerics::ComplexMatrix ) operator DoubleMatrix ( Qkmaxware::Numerics::DoubleMatrix ) operator DoubleRange ( Qkmaxware::Numerics::DoubleRange ) operator IntMatrix ( Qkmaxware::Numerics::IntMatrix ) operator IntRange ( Qkmaxware::Numerics::IntRange ) Operate ( Qkmaxware::Numerics::Matrix ) operator* ( Qkmaxware::Numerics::Matrix ) operator+ ( Qkmaxware::Numerics::Matrix ) operator- ( Qkmaxware::Numerics::Matrix ) operator/ ( Qkmaxware::Numerics::Matrix ) p Pivot ( Qkmaxware::Numerics::Matrix ) Point2 ( Qkmaxware::Numerics::Point2 ) r Random ( Qkmaxware::Numerics::Matrix ) Range ( Qkmaxware::Numerics::Matrix , Qkmaxware::Numerics::Range ) s Subtract ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Solve ( Qkmaxware::Numerics::EulerIvpSolver , Qkmaxware::Numerics::IIvpSolver , Qkmaxware::Numerics::RungeKuttaIvpSolver ) SwapRows ( Qkmaxware::Numerics::Matrix ) submatrix ( Qkmaxware::Numerics::Matrix ) SimpsonAdaptiveQuadratureIntegrator ( Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator ) StepInterpolation ( Qkmaxware::Numerics::StepInterpolation ) t ToLatexString ( Qkmaxware::Numerics::Matrix ) ToMapleString ( Qkmaxware::Numerics::Matrix ) ToMatlabString ( Qkmaxware::Numerics::Matrix ) ToString ( Qkmaxware::Numerics::Matrix , Qkmaxware::Numerics::Range ) ToWolframString ( Qkmaxware::Numerics::Matrix ) Trace ( Qkmaxware::Numerics::Matrix ) Transpose ( Qkmaxware::Numerics::Matrix ) TrapezoidalRule ( Qkmaxware::Numerics::TrapezoidalIntegrator ) u Unit ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator )","title":"Class Member Functions"},{"location":"doxygen/class_member_functions/#class-member-functions","text":"","title":"Class Member Functions"},{"location":"doxygen/class_member_functions/#a","text":"Add ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Adjugate ( Qkmaxware::Numerics::Matrix ) AssertCanMultiply ( Qkmaxware::Numerics::Matrix ) AssertSameDimensions ( Qkmaxware::Numerics::Matrix ) AssertSquare ( Qkmaxware::Numerics::Matrix ) AssertValidColumn ( Qkmaxware::Numerics::Matrix ) AssertValidRow ( Qkmaxware::Numerics::Matrix )","title":"a"},{"location":"doxygen/class_member_functions/#b","text":"BaseAdaptiveQuadratureIntegrator ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator ) BaseInterpolatedFunction ( Qkmaxware::Numerics::BaseInterpolatedFunction )","title":"b"},{"location":"doxygen/class_member_functions/#c","text":"Compare ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) ComplexFunction ( Qkmaxware::Numerics::ComplexFunction ) ComplexMatrix ( Qkmaxware::Numerics::ComplexMatrix ) Cofactor ( Qkmaxware::Numerics::Matrix )","title":"c"},{"location":"doxygen/class_member_functions/#d","text":"Differentiate ( Qkmaxware::Numerics::CentredFivePointDifferentiator , Qkmaxware::Numerics::CentredThreePointDifferentiator , Qkmaxware::Numerics::EndpointFivePointDifferentiator , Qkmaxware::Numerics::EndpointThreePointDifferentiator , Qkmaxware::Numerics::INumericDifferentiator ) Divide ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) DimensionMismatchException ( Qkmaxware::Numerics::DimensionMismatchException ) DoubleFunction ( Qkmaxware::Numerics::DoubleFunction ) DoubleFunction2 ( Qkmaxware::Numerics::DoubleFunction2 ) DoubleInterpolatedFunction ( Qkmaxware::Numerics::DoubleInterpolatedFunction ) DoubleMatrix ( Qkmaxware::Numerics::DoubleMatrix ) DoubleRange ( Qkmaxware::Numerics::DoubleRange ) Decompose ( Qkmaxware::Numerics::Matrix ) Determinant ( Qkmaxware::Numerics::Matrix )","title":"d"},{"location":"doxygen/class_member_functions/#e","text":"EstimateIntegralOver ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator , Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator ) Equal ( Qkmaxware::Numerics::BaseInterpolatedFunction ) Evaluate ( Qkmaxware::Numerics::BaseInterpolatedFunction , Qkmaxware::Numerics::ComplexFunction , Qkmaxware::Numerics::DoubleFunction , Qkmaxware::Numerics::DoubleFunction2 , Qkmaxware::Numerics::IFunction , Qkmaxware::Numerics::IFunction2 , Qkmaxware::Numerics::IFunction3 , Qkmaxware::Numerics::IFunction4 , Qkmaxware::Numerics::IntFunction ) Equals ( Qkmaxware::Numerics::Range )","title":"e"},{"location":"doxygen/class_member_functions/#f","text":"Fill ( Qkmaxware::Numerics::Matrix ) Format ( Qkmaxware::Numerics::Matrix )","title":"f"},{"location":"doxygen/class_member_functions/#g","text":"GreaterEqualThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) GreaterThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) GetHashCode ( Qkmaxware::Numerics::Range )","title":"g"},{"location":"doxygen/class_member_functions/#i","text":"Integrate ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator , Qkmaxware::Numerics::IDefiniteIntegrator , Qkmaxware::Numerics::IIndefiniteIntegrator , Qkmaxware::Numerics::SimpsonIntegrator , Qkmaxware::Numerics::TrapezoidalIntegrator ) IsErrorLargerThanTolerance ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator , Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator ) IsInRange ( Qkmaxware::Numerics::BaseInterpolatedFunction ) i ( Qkmaxware::Numerics::ComplexExtensions ) Interpolate ( Qkmaxware::Numerics::CosineInterpolation , Qkmaxware::Numerics::CubicInterpolation , Qkmaxware::Numerics::IInterpolator , Qkmaxware::Numerics::LinearInterpolation , Qkmaxware::Numerics::SmoothstepInterpolation , Qkmaxware::Numerics::StepInterpolation ) IntFunction ( Qkmaxware::Numerics::IntFunction ) IntMatrix ( Qkmaxware::Numerics::IntMatrix ) IntRange ( Qkmaxware::Numerics::IntRange ) Identity ( Qkmaxware::Numerics::Matrix ) Inverse ( Qkmaxware::Numerics::Matrix )","title":"i"},{"location":"doxygen/class_member_functions/#l","text":"LessEqualThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) LessThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) LUPSet ( Qkmaxware::Numerics::LUPSet ) LinearInterpolation ( Qkmaxware::Numerics::LinearInterpolation )","title":"l"},{"location":"doxygen/class_member_functions/#m","text":"Multiply ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Map ( Qkmaxware::Numerics::Matrix ) Map< K > ( Qkmaxware::Numerics::Matrix ) Matrix ( Qkmaxware::Numerics::Matrix ) Minors ( Qkmaxware::Numerics::Matrix )","title":"m"},{"location":"doxygen/class_member_functions/#n","text":"Negate ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Next ( Qkmaxware::Numerics::IValueGenerator )","title":"n"},{"location":"doxygen/class_member_functions/#o","text":"operator ComplexMatrix ( Qkmaxware::Numerics::ComplexMatrix ) operator DoubleMatrix ( Qkmaxware::Numerics::DoubleMatrix ) operator DoubleRange ( Qkmaxware::Numerics::DoubleRange ) operator IntMatrix ( Qkmaxware::Numerics::IntMatrix ) operator IntRange ( Qkmaxware::Numerics::IntRange ) Operate ( Qkmaxware::Numerics::Matrix ) operator* ( Qkmaxware::Numerics::Matrix ) operator+ ( Qkmaxware::Numerics::Matrix ) operator- ( Qkmaxware::Numerics::Matrix ) operator/ ( Qkmaxware::Numerics::Matrix )","title":"o"},{"location":"doxygen/class_member_functions/#p","text":"Pivot ( Qkmaxware::Numerics::Matrix ) Point2 ( Qkmaxware::Numerics::Point2 )","title":"p"},{"location":"doxygen/class_member_functions/#r","text":"Random ( Qkmaxware::Numerics::Matrix ) Range ( Qkmaxware::Numerics::Matrix , Qkmaxware::Numerics::Range )","title":"r"},{"location":"doxygen/class_member_functions/#s","text":"Subtract ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Solve ( Qkmaxware::Numerics::EulerIvpSolver , Qkmaxware::Numerics::IIvpSolver , Qkmaxware::Numerics::RungeKuttaIvpSolver ) SwapRows ( Qkmaxware::Numerics::Matrix ) submatrix ( Qkmaxware::Numerics::Matrix ) SimpsonAdaptiveQuadratureIntegrator ( Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator ) StepInterpolation ( Qkmaxware::Numerics::StepInterpolation )","title":"s"},{"location":"doxygen/class_member_functions/#t","text":"ToLatexString ( Qkmaxware::Numerics::Matrix ) ToMapleString ( Qkmaxware::Numerics::Matrix ) ToMatlabString ( Qkmaxware::Numerics::Matrix ) ToString ( Qkmaxware::Numerics::Matrix , Qkmaxware::Numerics::Range ) ToWolframString ( Qkmaxware::Numerics::Matrix ) Trace ( Qkmaxware::Numerics::Matrix ) Transpose ( Qkmaxware::Numerics::Matrix ) TrapezoidalRule ( Qkmaxware::Numerics::TrapezoidalIntegrator )","title":"t"},{"location":"doxygen/class_member_functions/#u","text":"Unit ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator )","title":"u"},{"location":"doxygen/class_member_typedefs/","text":"Class Member Typedefs","title":"Class Member Typedefs"},{"location":"doxygen/class_member_typedefs/#class-member-typedefs","text":"","title":"Class Member Typedefs"},{"location":"doxygen/class_member_variables/","text":"Class Member Variables c Calculator ( Qkmaxware::Numerics::ComplexFunction , Qkmaxware::Numerics::DoubleFunction , Qkmaxware::Numerics::DoubleFunction2 , Qkmaxware::Numerics::IntFunction ) Columns ( Qkmaxware::Numerics::Matrix ) column ( Qkmaxware::Numerics::Matrix ) columns ( Qkmaxware::Numerics::Matrix ) e Elements ( Qkmaxware::Numerics::Matrix ) elements ( Qkmaxware::Numerics::Matrix ) i Instance ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::IntCalculator ) IsColumnMatrix ( Qkmaxware::Numerics::Matrix ) IsRowMatrix ( Qkmaxware::Numerics::Matrix ) IsSquare ( Qkmaxware::Numerics::Matrix ) p points ( Qkmaxware::Numerics::BaseInterpolatedFunction ) r Rows ( Qkmaxware::Numerics::Matrix ) s Samples ( Qkmaxware::Numerics::BaseInterpolatedFunction ) t this[Range rows, int column] ( Qkmaxware::Numerics::Matrix ) this[int row, Range columns] ( Qkmaxware::Numerics::Matrix ) this[int row, int column] ( Qkmaxware::Numerics::Matrix )","title":"Class Member Variables"},{"location":"doxygen/class_member_variables/#class-member-variables","text":"","title":"Class Member Variables"},{"location":"doxygen/class_member_variables/#c","text":"Calculator ( Qkmaxware::Numerics::ComplexFunction , Qkmaxware::Numerics::DoubleFunction , Qkmaxware::Numerics::DoubleFunction2 , Qkmaxware::Numerics::IntFunction ) Columns ( Qkmaxware::Numerics::Matrix ) column ( Qkmaxware::Numerics::Matrix ) columns ( Qkmaxware::Numerics::Matrix )","title":"c"},{"location":"doxygen/class_member_variables/#e","text":"Elements ( Qkmaxware::Numerics::Matrix ) elements ( Qkmaxware::Numerics::Matrix )","title":"e"},{"location":"doxygen/class_member_variables/#i","text":"Instance ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::IntCalculator ) IsColumnMatrix ( Qkmaxware::Numerics::Matrix ) IsRowMatrix ( Qkmaxware::Numerics::Matrix ) IsSquare ( Qkmaxware::Numerics::Matrix )","title":"i"},{"location":"doxygen/class_member_variables/#p","text":"points ( Qkmaxware::Numerics::BaseInterpolatedFunction )","title":"p"},{"location":"doxygen/class_member_variables/#r","text":"Rows ( Qkmaxware::Numerics::Matrix )","title":"r"},{"location":"doxygen/class_member_variables/#s","text":"Samples ( Qkmaxware::Numerics::BaseInterpolatedFunction )","title":"s"},{"location":"doxygen/class_member_variables/#t","text":"this[Range rows, int column] ( Qkmaxware::Numerics::Matrix ) this[int row, Range columns] ( Qkmaxware::Numerics::Matrix ) this[int row, int column] ( Qkmaxware::Numerics::Matrix )","title":"t"},{"location":"doxygen/class_members/","text":"Class Members a Add ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Adjugate ( Qkmaxware::Numerics::Matrix ) AssertCanMultiply ( Qkmaxware::Numerics::Matrix ) AssertSameDimensions ( Qkmaxware::Numerics::Matrix ) AssertSquare ( Qkmaxware::Numerics::Matrix ) AssertValidColumn ( Qkmaxware::Numerics::Matrix ) AssertValidRow ( Qkmaxware::Numerics::Matrix ) b BaseAdaptiveQuadratureIntegrator ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator ) BaseInterpolatedFunction ( Qkmaxware::Numerics::BaseInterpolatedFunction ) c Compare ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Calculator ( Qkmaxware::Numerics::ComplexFunction , Qkmaxware::Numerics::DoubleFunction , Qkmaxware::Numerics::DoubleFunction2 , Qkmaxware::Numerics::IntFunction ) ComplexFunction ( Qkmaxware::Numerics::ComplexFunction ) ComplexMatrix ( Qkmaxware::Numerics::ComplexMatrix ) Cofactor ( Qkmaxware::Numerics::Matrix ) Columns ( Qkmaxware::Numerics::Matrix ) column ( Qkmaxware::Numerics::Matrix ) columns ( Qkmaxware::Numerics::Matrix ) d Differentiate ( Qkmaxware::Numerics::CentredFivePointDifferentiator , Qkmaxware::Numerics::CentredThreePointDifferentiator , Qkmaxware::Numerics::EndpointFivePointDifferentiator , Qkmaxware::Numerics::EndpointThreePointDifferentiator , Qkmaxware::Numerics::INumericDifferentiator ) Divide ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) DimensionMismatchException ( Qkmaxware::Numerics::DimensionMismatchException ) DoubleFunction ( Qkmaxware::Numerics::DoubleFunction ) DoubleFunction2 ( Qkmaxware::Numerics::DoubleFunction2 ) DoubleInterpolatedFunction ( Qkmaxware::Numerics::DoubleInterpolatedFunction ) DoubleMatrix ( Qkmaxware::Numerics::DoubleMatrix ) DoubleRange ( Qkmaxware::Numerics::DoubleRange ) Decompose ( Qkmaxware::Numerics::Matrix ) Determinant ( Qkmaxware::Numerics::Matrix ) e EstimateIntegralOver ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator , Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator ) Equal ( Qkmaxware::Numerics::BaseInterpolatedFunction ) Evaluate ( Qkmaxware::Numerics::BaseInterpolatedFunction , Qkmaxware::Numerics::ComplexFunction , Qkmaxware::Numerics::DoubleFunction , Qkmaxware::Numerics::DoubleFunction2 , Qkmaxware::Numerics::IFunction , Qkmaxware::Numerics::IFunction2 , Qkmaxware::Numerics::IFunction3 , Qkmaxware::Numerics::IFunction4 , Qkmaxware::Numerics::IntFunction ) Elements ( Qkmaxware::Numerics::Matrix ) elements ( Qkmaxware::Numerics::Matrix ) Equals ( Qkmaxware::Numerics::Range ) f Fill ( Qkmaxware::Numerics::Matrix ) Format ( Qkmaxware::Numerics::Matrix ) g GreaterEqualThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) GreaterThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) GetHashCode ( Qkmaxware::Numerics::Range ) i Integrate ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator , Qkmaxware::Numerics::IDefiniteIntegrator , Qkmaxware::Numerics::IIndefiniteIntegrator , Qkmaxware::Numerics::SimpsonIntegrator , Qkmaxware::Numerics::TrapezoidalIntegrator ) IsErrorLargerThanTolerance ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator , Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator ) IsInRange ( Qkmaxware::Numerics::BaseInterpolatedFunction ) Instance ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::IntCalculator ) i ( Qkmaxware::Numerics::ComplexExtensions ) Interpolate ( Qkmaxware::Numerics::CosineInterpolation , Qkmaxware::Numerics::CubicInterpolation , Qkmaxware::Numerics::IInterpolator , Qkmaxware::Numerics::LinearInterpolation , Qkmaxware::Numerics::SmoothstepInterpolation , Qkmaxware::Numerics::StepInterpolation ) IntFunction ( Qkmaxware::Numerics::IntFunction ) IntMatrix ( Qkmaxware::Numerics::IntMatrix ) IntRange ( Qkmaxware::Numerics::IntRange ) Identity ( Qkmaxware::Numerics::Matrix ) Inverse ( Qkmaxware::Numerics::Matrix ) IsColumnMatrix ( Qkmaxware::Numerics::Matrix ) IsRowMatrix ( Qkmaxware::Numerics::Matrix ) IsSquare ( Qkmaxware::Numerics::Matrix ) l LessEqualThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) LessThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) LUPSet ( Qkmaxware::Numerics::LUPSet ) LinearInterpolation ( Qkmaxware::Numerics::LinearInterpolation ) m Multiply ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Map ( Qkmaxware::Numerics::Matrix ) Map< K > ( Qkmaxware::Numerics::Matrix ) Matrix ( Qkmaxware::Numerics::Matrix ) Minors ( Qkmaxware::Numerics::Matrix ) n Negate ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Next ( Qkmaxware::Numerics::IValueGenerator ) o operator ComplexMatrix ( Qkmaxware::Numerics::ComplexMatrix ) operator DoubleMatrix ( Qkmaxware::Numerics::DoubleMatrix ) operator DoubleRange ( Qkmaxware::Numerics::DoubleRange ) operator IntMatrix ( Qkmaxware::Numerics::IntMatrix ) operator IntRange ( Qkmaxware::Numerics::IntRange ) Operate ( Qkmaxware::Numerics::Matrix ) operator* ( Qkmaxware::Numerics::Matrix ) operator+ ( Qkmaxware::Numerics::Matrix ) operator- ( Qkmaxware::Numerics::Matrix ) operator/ ( Qkmaxware::Numerics::Matrix ) p points ( Qkmaxware::Numerics::BaseInterpolatedFunction ) Pivot ( Qkmaxware::Numerics::Matrix ) Point2 ( Qkmaxware::Numerics::Point2 ) r Random ( Qkmaxware::Numerics::Matrix ) Range ( Qkmaxware::Numerics::Matrix , Qkmaxware::Numerics::Range ) Rows ( Qkmaxware::Numerics::Matrix ) s Samples ( Qkmaxware::Numerics::BaseInterpolatedFunction ) Subtract ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Solve ( Qkmaxware::Numerics::EulerIvpSolver , Qkmaxware::Numerics::IIvpSolver , Qkmaxware::Numerics::RungeKuttaIvpSolver ) SwapRows ( Qkmaxware::Numerics::Matrix ) submatrix ( Qkmaxware::Numerics::Matrix ) SimpsonAdaptiveQuadratureIntegrator ( Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator ) StepInterpolation ( Qkmaxware::Numerics::StepInterpolation ) t ToLatexString ( Qkmaxware::Numerics::Matrix ) ToMapleString ( Qkmaxware::Numerics::Matrix ) ToMatlabString ( Qkmaxware::Numerics::Matrix ) ToString ( Qkmaxware::Numerics::Matrix , Qkmaxware::Numerics::Range ) ToWolframString ( Qkmaxware::Numerics::Matrix ) Trace ( Qkmaxware::Numerics::Matrix ) Transpose ( Qkmaxware::Numerics::Matrix ) this[Range rows, int column] ( Qkmaxware::Numerics::Matrix ) this[int row, Range columns] ( Qkmaxware::Numerics::Matrix ) this[int row, int column] ( Qkmaxware::Numerics::Matrix ) TrapezoidalRule ( Qkmaxware::Numerics::TrapezoidalIntegrator ) u Unit ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator )","title":"Class Members"},{"location":"doxygen/class_members/#class-members","text":"","title":"Class Members"},{"location":"doxygen/class_members/#a","text":"Add ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Adjugate ( Qkmaxware::Numerics::Matrix ) AssertCanMultiply ( Qkmaxware::Numerics::Matrix ) AssertSameDimensions ( Qkmaxware::Numerics::Matrix ) AssertSquare ( Qkmaxware::Numerics::Matrix ) AssertValidColumn ( Qkmaxware::Numerics::Matrix ) AssertValidRow ( Qkmaxware::Numerics::Matrix )","title":"a"},{"location":"doxygen/class_members/#b","text":"BaseAdaptiveQuadratureIntegrator ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator ) BaseInterpolatedFunction ( Qkmaxware::Numerics::BaseInterpolatedFunction )","title":"b"},{"location":"doxygen/class_members/#c","text":"Compare ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Calculator ( Qkmaxware::Numerics::ComplexFunction , Qkmaxware::Numerics::DoubleFunction , Qkmaxware::Numerics::DoubleFunction2 , Qkmaxware::Numerics::IntFunction ) ComplexFunction ( Qkmaxware::Numerics::ComplexFunction ) ComplexMatrix ( Qkmaxware::Numerics::ComplexMatrix ) Cofactor ( Qkmaxware::Numerics::Matrix ) Columns ( Qkmaxware::Numerics::Matrix ) column ( Qkmaxware::Numerics::Matrix ) columns ( Qkmaxware::Numerics::Matrix )","title":"c"},{"location":"doxygen/class_members/#d","text":"Differentiate ( Qkmaxware::Numerics::CentredFivePointDifferentiator , Qkmaxware::Numerics::CentredThreePointDifferentiator , Qkmaxware::Numerics::EndpointFivePointDifferentiator , Qkmaxware::Numerics::EndpointThreePointDifferentiator , Qkmaxware::Numerics::INumericDifferentiator ) Divide ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) DimensionMismatchException ( Qkmaxware::Numerics::DimensionMismatchException ) DoubleFunction ( Qkmaxware::Numerics::DoubleFunction ) DoubleFunction2 ( Qkmaxware::Numerics::DoubleFunction2 ) DoubleInterpolatedFunction ( Qkmaxware::Numerics::DoubleInterpolatedFunction ) DoubleMatrix ( Qkmaxware::Numerics::DoubleMatrix ) DoubleRange ( Qkmaxware::Numerics::DoubleRange ) Decompose ( Qkmaxware::Numerics::Matrix ) Determinant ( Qkmaxware::Numerics::Matrix )","title":"d"},{"location":"doxygen/class_members/#e","text":"EstimateIntegralOver ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator , Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator ) Equal ( Qkmaxware::Numerics::BaseInterpolatedFunction ) Evaluate ( Qkmaxware::Numerics::BaseInterpolatedFunction , Qkmaxware::Numerics::ComplexFunction , Qkmaxware::Numerics::DoubleFunction , Qkmaxware::Numerics::DoubleFunction2 , Qkmaxware::Numerics::IFunction , Qkmaxware::Numerics::IFunction2 , Qkmaxware::Numerics::IFunction3 , Qkmaxware::Numerics::IFunction4 , Qkmaxware::Numerics::IntFunction ) Elements ( Qkmaxware::Numerics::Matrix ) elements ( Qkmaxware::Numerics::Matrix ) Equals ( Qkmaxware::Numerics::Range )","title":"e"},{"location":"doxygen/class_members/#f","text":"Fill ( Qkmaxware::Numerics::Matrix ) Format ( Qkmaxware::Numerics::Matrix )","title":"f"},{"location":"doxygen/class_members/#g","text":"GreaterEqualThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) GreaterThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) GetHashCode ( Qkmaxware::Numerics::Range )","title":"g"},{"location":"doxygen/class_members/#i","text":"Integrate ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator , Qkmaxware::Numerics::IDefiniteIntegrator , Qkmaxware::Numerics::IIndefiniteIntegrator , Qkmaxware::Numerics::SimpsonIntegrator , Qkmaxware::Numerics::TrapezoidalIntegrator ) IsErrorLargerThanTolerance ( Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator , Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator ) IsInRange ( Qkmaxware::Numerics::BaseInterpolatedFunction ) Instance ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::IntCalculator ) i ( Qkmaxware::Numerics::ComplexExtensions ) Interpolate ( Qkmaxware::Numerics::CosineInterpolation , Qkmaxware::Numerics::CubicInterpolation , Qkmaxware::Numerics::IInterpolator , Qkmaxware::Numerics::LinearInterpolation , Qkmaxware::Numerics::SmoothstepInterpolation , Qkmaxware::Numerics::StepInterpolation ) IntFunction ( Qkmaxware::Numerics::IntFunction ) IntMatrix ( Qkmaxware::Numerics::IntMatrix ) IntRange ( Qkmaxware::Numerics::IntRange ) Identity ( Qkmaxware::Numerics::Matrix ) Inverse ( Qkmaxware::Numerics::Matrix ) IsColumnMatrix ( Qkmaxware::Numerics::Matrix ) IsRowMatrix ( Qkmaxware::Numerics::Matrix ) IsSquare ( Qkmaxware::Numerics::Matrix )","title":"i"},{"location":"doxygen/class_members/#l","text":"LessEqualThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) LessThan ( Qkmaxware::Numerics::BaseInterpolatedFunction ) LUPSet ( Qkmaxware::Numerics::LUPSet ) LinearInterpolation ( Qkmaxware::Numerics::LinearInterpolation )","title":"l"},{"location":"doxygen/class_members/#m","text":"Multiply ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Map ( Qkmaxware::Numerics::Matrix ) Map< K > ( Qkmaxware::Numerics::Matrix ) Matrix ( Qkmaxware::Numerics::Matrix ) Minors ( Qkmaxware::Numerics::Matrix )","title":"m"},{"location":"doxygen/class_members/#n","text":"Negate ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Next ( Qkmaxware::Numerics::IValueGenerator )","title":"n"},{"location":"doxygen/class_members/#o","text":"operator ComplexMatrix ( Qkmaxware::Numerics::ComplexMatrix ) operator DoubleMatrix ( Qkmaxware::Numerics::DoubleMatrix ) operator DoubleRange ( Qkmaxware::Numerics::DoubleRange ) operator IntMatrix ( Qkmaxware::Numerics::IntMatrix ) operator IntRange ( Qkmaxware::Numerics::IntRange ) Operate ( Qkmaxware::Numerics::Matrix ) operator* ( Qkmaxware::Numerics::Matrix ) operator+ ( Qkmaxware::Numerics::Matrix ) operator- ( Qkmaxware::Numerics::Matrix ) operator/ ( Qkmaxware::Numerics::Matrix )","title":"o"},{"location":"doxygen/class_members/#p","text":"points ( Qkmaxware::Numerics::BaseInterpolatedFunction ) Pivot ( Qkmaxware::Numerics::Matrix ) Point2 ( Qkmaxware::Numerics::Point2 )","title":"p"},{"location":"doxygen/class_members/#r","text":"Random ( Qkmaxware::Numerics::Matrix ) Range ( Qkmaxware::Numerics::Matrix , Qkmaxware::Numerics::Range ) Rows ( Qkmaxware::Numerics::Matrix )","title":"r"},{"location":"doxygen/class_members/#s","text":"Samples ( Qkmaxware::Numerics::BaseInterpolatedFunction ) Subtract ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator ) Solve ( Qkmaxware::Numerics::EulerIvpSolver , Qkmaxware::Numerics::IIvpSolver , Qkmaxware::Numerics::RungeKuttaIvpSolver ) SwapRows ( Qkmaxware::Numerics::Matrix ) submatrix ( Qkmaxware::Numerics::Matrix ) SimpsonAdaptiveQuadratureIntegrator ( Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator ) StepInterpolation ( Qkmaxware::Numerics::StepInterpolation )","title":"s"},{"location":"doxygen/class_members/#t","text":"ToLatexString ( Qkmaxware::Numerics::Matrix ) ToMapleString ( Qkmaxware::Numerics::Matrix ) ToMatlabString ( Qkmaxware::Numerics::Matrix ) ToString ( Qkmaxware::Numerics::Matrix , Qkmaxware::Numerics::Range ) ToWolframString ( Qkmaxware::Numerics::Matrix ) Trace ( Qkmaxware::Numerics::Matrix ) Transpose ( Qkmaxware::Numerics::Matrix ) this[Range rows, int column] ( Qkmaxware::Numerics::Matrix ) this[int row, Range columns] ( Qkmaxware::Numerics::Matrix ) this[int row, int column] ( Qkmaxware::Numerics::Matrix ) TrapezoidalRule ( Qkmaxware::Numerics::TrapezoidalIntegrator )","title":"t"},{"location":"doxygen/class_members/#u","text":"Unit ( Qkmaxware::Numerics::ComplexCalculator , Qkmaxware::Numerics::DoubleCalculator , Qkmaxware::Numerics::ICalculator , Qkmaxware::Numerics::IntCalculator )","title":"u"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_adaptive_quadrature_integrator/","text":"Class Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator Class List > Qkmaxware > Numerics > BaseAdaptiveQuadratureIntegrator Base class for integrations methods using an adaptive quadrature scheme Inherits the following classes: Qkmaxware::Numerics::IDefiniteIntegrator Inherited by the following classes: Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator Public Functions Type Name BaseAdaptiveQuadratureIntegrator (double tolerance=0.01, int maxDepth=100) double Integrate ( IFunction < double > fx, Range < double > range) Public Functions inherited from Qkmaxware::Numerics::IDefiniteIntegrator See Qkmaxware::Numerics::IDefiniteIntegrator Type Name T Integrate ( IFunction < T > fx, Range < T > range) Integrate the given function between the range Protected Functions Type Name virtual abstract double EstimateIntegralOver ( IFunction < double > fx, double x0, double x2) = 0 Estimate the integral of the function between the two endpoints virtual abstract bool IsErrorLargerThanTolerance ( IFunction < double > fx, double estimate, double x0, double x2) = 0 Check if the error of an estimated area is less than the desired tolerance Public Functions Documentation function BaseAdaptiveQuadratureIntegrator inline Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator::BaseAdaptiveQuadratureIntegrator ( double tolerance=0.01, int maxDepth=100 ) function Integrate inline double Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator::Integrate ( IFunction < double > fx, Range < double > range ) Protected Functions Documentation function EstimateIntegralOver virtual abstract double Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator::EstimateIntegralOver ( IFunction < double > fx, double x0, double x2 ) = 0 Parameters: fx function to integrate x0 start point x2 end point Returns: estimated area function IsErrorLargerThanTolerance virtual abstract bool Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator::IsErrorLargerThanTolerance ( IFunction < double > fx, double estimate, double x0, double x2 ) = 0 Parameters: fx function estimate integral estimate x0 start range x2 end range Returns: true if the error is larger than the tolerance; false otherwise The documentation for this class was generated from the following file Numerics/src/Integration/AdaptiveQuadratureIntegrator.cs","title":"Class Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_adaptive_quadrature_integrator/#class-qkmaxwarenumericsbaseadaptivequadratureintegrator","text":"Class List > Qkmaxware > Numerics > BaseAdaptiveQuadratureIntegrator Base class for integrations methods using an adaptive quadrature scheme Inherits the following classes: Qkmaxware::Numerics::IDefiniteIntegrator Inherited by the following classes: Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator","title":"Class Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_adaptive_quadrature_integrator/#public-functions","text":"Type Name BaseAdaptiveQuadratureIntegrator (double tolerance=0.01, int maxDepth=100) double Integrate ( IFunction < double > fx, Range < double > range)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_adaptive_quadrature_integrator/#public-functions-inherited-from-qkmaxwarenumericsidefiniteintegrator","text":"See Qkmaxware::Numerics::IDefiniteIntegrator Type Name T Integrate ( IFunction < T > fx, Range < T > range) Integrate the given function between the range","title":"Public Functions inherited from Qkmaxware::Numerics::IDefiniteIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_adaptive_quadrature_integrator/#protected-functions","text":"Type Name virtual abstract double EstimateIntegralOver ( IFunction < double > fx, double x0, double x2) = 0 Estimate the integral of the function between the two endpoints virtual abstract bool IsErrorLargerThanTolerance ( IFunction < double > fx, double estimate, double x0, double x2) = 0 Check if the error of an estimated area is less than the desired tolerance","title":"Protected Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_adaptive_quadrature_integrator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_adaptive_quadrature_integrator/#function-baseadaptivequadratureintegrator","text":"inline Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator::BaseAdaptiveQuadratureIntegrator ( double tolerance=0.01, int maxDepth=100 )","title":"function BaseAdaptiveQuadratureIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_adaptive_quadrature_integrator/#function-integrate","text":"inline double Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator::Integrate ( IFunction < double > fx, Range < double > range )","title":"function Integrate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_adaptive_quadrature_integrator/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_adaptive_quadrature_integrator/#function-estimateintegralover","text":"virtual abstract double Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator::EstimateIntegralOver ( IFunction < double > fx, double x0, double x2 ) = 0 Parameters: fx function to integrate x0 start point x2 end point Returns: estimated area","title":"function EstimateIntegralOver"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_adaptive_quadrature_integrator/#function-iserrorlargerthantolerance","text":"virtual abstract bool Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator::IsErrorLargerThanTolerance ( IFunction < double > fx, double estimate, double x0, double x2 ) = 0 Parameters: fx function estimate integral estimate x0 start range x2 end range Returns: true if the error is larger than the tolerance; false otherwise The documentation for this class was generated from the following file Numerics/src/Integration/AdaptiveQuadratureIntegrator.cs","title":"function IsErrorLargerThanTolerance"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_interpolated_function/","text":"Class Qkmaxware::Numerics::BaseInterpolatedFunction template <T T> Class List > Qkmaxware > Numerics > BaseInterpolatedFunction Base class for a function that is interpolated between sample points Inherits the following classes: Qkmaxware::Numerics::IInterpolatedFunction Public Attributes Type Name IEnumerable< Point2 < T > > Samples = => Array.AsReadOnly(this.points) Public Functions Type Name BaseInterpolatedFunction ( ICalculator < T > calculator, IEnumerable< Point2 < T >> samples) BaseInterpolatedFunction ( ICalculator < T > calculator, T[] xs, T[] ys) T Evaluate (T x) Evaluate the function at y = f(x) Public Functions inherited from Qkmaxware::Numerics::IFunction See Qkmaxware::Numerics::IFunction Type Name T Evaluate (T x) Evaluate the function at y = f(x) Protected Functions Type Name bool IsInRange (T x) Public Attributes Documentation variable Samples IEnumerable<Point2<T> > Qkmaxware.Numerics.BaseInterpolatedFunction< T >.Samples; Public Functions Documentation function BaseInterpolatedFunction [1/2] inline Qkmaxware::Numerics::BaseInterpolatedFunction::BaseInterpolatedFunction ( ICalculator < T > calculator, IEnumerable< Point2 < T >> samples ) function BaseInterpolatedFunction [2/2] inline Qkmaxware::Numerics::BaseInterpolatedFunction::BaseInterpolatedFunction ( ICalculator < T > calculator, T[] xs, T[] ys ) function Evaluate inline T Qkmaxware::Numerics::BaseInterpolatedFunction::Evaluate ( T x ) Parameters: x x Returns: y Implements Qkmaxware::Numerics::IFunction::Evaluate Protected Functions Documentation function IsInRange inline bool Qkmaxware::Numerics::BaseInterpolatedFunction::IsInRange ( T x ) The documentation for this class was generated from the following file Numerics/src/Function/BaseInterpolatedFunction.cs","title":"Class Qkmaxware::Numerics::BaseInterpolatedFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_interpolated_function/#class-qkmaxwarenumericsbaseinterpolatedfunction","text":"template <T T> Class List > Qkmaxware > Numerics > BaseInterpolatedFunction Base class for a function that is interpolated between sample points Inherits the following classes: Qkmaxware::Numerics::IInterpolatedFunction","title":"Class Qkmaxware::Numerics::BaseInterpolatedFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_interpolated_function/#public-attributes","text":"Type Name IEnumerable< Point2 < T > > Samples = => Array.AsReadOnly(this.points)","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_interpolated_function/#public-functions","text":"Type Name BaseInterpolatedFunction ( ICalculator < T > calculator, IEnumerable< Point2 < T >> samples) BaseInterpolatedFunction ( ICalculator < T > calculator, T[] xs, T[] ys) T Evaluate (T x) Evaluate the function at y = f(x)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_interpolated_function/#public-functions-inherited-from-qkmaxwarenumericsifunction","text":"See Qkmaxware::Numerics::IFunction Type Name T Evaluate (T x) Evaluate the function at y = f(x)","title":"Public Functions inherited from Qkmaxware::Numerics::IFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_interpolated_function/#protected-functions","text":"Type Name bool IsInRange (T x)","title":"Protected Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_interpolated_function/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_interpolated_function/#variable-samples","text":"IEnumerable<Point2<T> > Qkmaxware.Numerics.BaseInterpolatedFunction< T >.Samples;","title":"variable Samples"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_interpolated_function/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_interpolated_function/#function-baseinterpolatedfunction-12","text":"inline Qkmaxware::Numerics::BaseInterpolatedFunction::BaseInterpolatedFunction ( ICalculator < T > calculator, IEnumerable< Point2 < T >> samples )","title":"function BaseInterpolatedFunction [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_interpolated_function/#function-baseinterpolatedfunction-22","text":"inline Qkmaxware::Numerics::BaseInterpolatedFunction::BaseInterpolatedFunction ( ICalculator < T > calculator, T[] xs, T[] ys )","title":"function BaseInterpolatedFunction [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_interpolated_function/#function-evaluate","text":"inline T Qkmaxware::Numerics::BaseInterpolatedFunction::Evaluate ( T x ) Parameters: x x Returns: y Implements Qkmaxware::Numerics::IFunction::Evaluate","title":"function Evaluate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_interpolated_function/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_base_interpolated_function/#function-isinrange","text":"inline bool Qkmaxware::Numerics::BaseInterpolatedFunction::IsInRange ( T x ) The documentation for this class was generated from the following file Numerics/src/Function/BaseInterpolatedFunction.cs","title":"function IsInRange"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_centred_five_point_differentiator/","text":"Class Qkmaxware::Numerics::CentredFivePointDifferentiator Class List > Qkmaxware > Numerics > CentredFivePointDifferentiator Midpoint five point numerical derivative Solver Inherits the following classes: Qkmaxware::Numerics::INumericDifferentiator Public Functions Type Name double Differentiate ( IFunction < double > f, double x, double h=double.Epsilon) IFunction < double > Differentiate ( IFunction < double > f, Range < double > range) Public Functions inherited from Qkmaxware::Numerics::INumericDifferentiator See Qkmaxware::Numerics::INumericDifferentiator Type Name IFunction < T > Differentiate ( IFunction < T > f, Range < T > range) Compute the derivative of the function over the range Public Functions Documentation function Differentiate [1/2] inline double Qkmaxware::Numerics::CentredFivePointDifferentiator::Differentiate ( IFunction < double > f, double x, double h=double.Epsilon ) function Differentiate [2/2] inline IFunction < double > Qkmaxware::Numerics::CentredFivePointDifferentiator::Differentiate ( IFunction < double > f, Range < double > range ) The documentation for this class was generated from the following file Numerics/src/Differentiation/FivePointDifferentiator.cs","title":"Class Qkmaxware::Numerics::CentredFivePointDifferentiator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_centred_five_point_differentiator/#class-qkmaxwarenumericscentredfivepointdifferentiator","text":"Class List > Qkmaxware > Numerics > CentredFivePointDifferentiator Midpoint five point numerical derivative Solver Inherits the following classes: Qkmaxware::Numerics::INumericDifferentiator","title":"Class Qkmaxware::Numerics::CentredFivePointDifferentiator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_centred_five_point_differentiator/#public-functions","text":"Type Name double Differentiate ( IFunction < double > f, double x, double h=double.Epsilon) IFunction < double > Differentiate ( IFunction < double > f, Range < double > range)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_centred_five_point_differentiator/#public-functions-inherited-from-qkmaxwarenumericsinumericdifferentiator","text":"See Qkmaxware::Numerics::INumericDifferentiator Type Name IFunction < T > Differentiate ( IFunction < T > f, Range < T > range) Compute the derivative of the function over the range","title":"Public Functions inherited from Qkmaxware::Numerics::INumericDifferentiator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_centred_five_point_differentiator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_centred_five_point_differentiator/#function-differentiate-12","text":"inline double Qkmaxware::Numerics::CentredFivePointDifferentiator::Differentiate ( IFunction < double > f, double x, double h=double.Epsilon )","title":"function Differentiate [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_centred_five_point_differentiator/#function-differentiate-22","text":"inline IFunction < double > Qkmaxware::Numerics::CentredFivePointDifferentiator::Differentiate ( IFunction < double > f, Range < double > range ) The documentation for this class was generated from the following file Numerics/src/Differentiation/FivePointDifferentiator.cs","title":"function Differentiate [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_centred_three_point_differentiator/","text":"Class Qkmaxware::Numerics::CentredThreePointDifferentiator Class List > Qkmaxware > Numerics > CentredThreePointDifferentiator Midpoint three point numerical derivative solver Inherits the following classes: Qkmaxware::Numerics::INumericDifferentiator Public Functions Type Name double Differentiate ( IFunction < double > f, double x, double h=double.Epsilon) IFunction < double > Differentiate ( IFunction < double > f, Range < double > range) Public Functions inherited from Qkmaxware::Numerics::INumericDifferentiator See Qkmaxware::Numerics::INumericDifferentiator Type Name IFunction < T > Differentiate ( IFunction < T > f, Range < T > range) Compute the derivative of the function over the range Public Functions Documentation function Differentiate [1/2] inline double Qkmaxware::Numerics::CentredThreePointDifferentiator::Differentiate ( IFunction < double > f, double x, double h=double.Epsilon ) function Differentiate [2/2] inline IFunction < double > Qkmaxware::Numerics::CentredThreePointDifferentiator::Differentiate ( IFunction < double > f, Range < double > range ) The documentation for this class was generated from the following file Numerics/src/Differentiation/ThreePointDifferentiator.cs","title":"Class Qkmaxware::Numerics::CentredThreePointDifferentiator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_centred_three_point_differentiator/#class-qkmaxwarenumericscentredthreepointdifferentiator","text":"Class List > Qkmaxware > Numerics > CentredThreePointDifferentiator Midpoint three point numerical derivative solver Inherits the following classes: Qkmaxware::Numerics::INumericDifferentiator","title":"Class Qkmaxware::Numerics::CentredThreePointDifferentiator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_centred_three_point_differentiator/#public-functions","text":"Type Name double Differentiate ( IFunction < double > f, double x, double h=double.Epsilon) IFunction < double > Differentiate ( IFunction < double > f, Range < double > range)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_centred_three_point_differentiator/#public-functions-inherited-from-qkmaxwarenumericsinumericdifferentiator","text":"See Qkmaxware::Numerics::INumericDifferentiator Type Name IFunction < T > Differentiate ( IFunction < T > f, Range < T > range) Compute the derivative of the function over the range","title":"Public Functions inherited from Qkmaxware::Numerics::INumericDifferentiator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_centred_three_point_differentiator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_centred_three_point_differentiator/#function-differentiate-12","text":"inline double Qkmaxware::Numerics::CentredThreePointDifferentiator::Differentiate ( IFunction < double > f, double x, double h=double.Epsilon )","title":"function Differentiate [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_centred_three_point_differentiator/#function-differentiate-22","text":"inline IFunction < double > Qkmaxware::Numerics::CentredThreePointDifferentiator::Differentiate ( IFunction < double > f, Range < double > range ) The documentation for this class was generated from the following file Numerics/src/Differentiation/ThreePointDifferentiator.cs","title":"function Differentiate [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/","text":"Class Qkmaxware::Numerics::ComplexCalculator Class List > Qkmaxware > Numerics > ComplexCalculator Calculator for complex arithmetic Inherits the following classes: Qkmaxware::Numerics::ICalculator Public Static Attributes Type Name readonly ICalculator < Complex > Instance = = new ComplexCalculator () Public Functions Type Name Complex Add (Complex v1, Complex v2) int Compare (Complex v1, Complex v2) Complex Divide (Complex v1, Complex v2) Complex Multiply (Complex v1, Complex v2) Complex Negate (Complex v1) Complex Subtract (Complex v1, Complex v2) Complex Unit () Public Functions inherited from Qkmaxware::Numerics::ICalculator See Qkmaxware::Numerics::ICalculator Type Name T Add (T v1, T v2) Add two values int Compare (T v1, T v2) Compare two values T Divide (T v1, T v2) Multiply two values T Multiply (T v1, T v2) Multiply two values T Negate (T v1) Negate a value T Subtract (T v1, T v2) Subtract from a value T Unit () Get the '1' value for the given type Public Static Attributes Documentation variable Instance readonly ICalculator<Complex> Qkmaxware.Numerics.ComplexCalculator.Instance; Public Functions Documentation function Add Complex Qkmaxware::Numerics::ComplexCalculator::Add ( Complex v1, Complex v2 ) function Compare int Qkmaxware::Numerics::ComplexCalculator::Compare ( Complex v1, Complex v2 ) function Divide Complex Qkmaxware::Numerics::ComplexCalculator::Divide ( Complex v1, Complex v2 ) function Multiply Complex Qkmaxware::Numerics::ComplexCalculator::Multiply ( Complex v1, Complex v2 ) function Negate Complex Qkmaxware::Numerics::ComplexCalculator::Negate ( Complex v1 ) function Subtract Complex Qkmaxware::Numerics::ComplexCalculator::Subtract ( Complex v1, Complex v2 ) function Unit Complex Qkmaxware::Numerics::ComplexCalculator::Unit () The documentation for this class was generated from the following file Numerics/src/ICalculator.cs","title":"Class Qkmaxware::Numerics::ComplexCalculator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/#class-qkmaxwarenumericscomplexcalculator","text":"Class List > Qkmaxware > Numerics > ComplexCalculator Calculator for complex arithmetic Inherits the following classes: Qkmaxware::Numerics::ICalculator","title":"Class Qkmaxware::Numerics::ComplexCalculator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/#public-static-attributes","text":"Type Name readonly ICalculator < Complex > Instance = = new ComplexCalculator ()","title":"Public Static Attributes"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/#public-functions","text":"Type Name Complex Add (Complex v1, Complex v2) int Compare (Complex v1, Complex v2) Complex Divide (Complex v1, Complex v2) Complex Multiply (Complex v1, Complex v2) Complex Negate (Complex v1) Complex Subtract (Complex v1, Complex v2) Complex Unit ()","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/#public-functions-inherited-from-qkmaxwarenumericsicalculator","text":"See Qkmaxware::Numerics::ICalculator Type Name T Add (T v1, T v2) Add two values int Compare (T v1, T v2) Compare two values T Divide (T v1, T v2) Multiply two values T Multiply (T v1, T v2) Multiply two values T Negate (T v1) Negate a value T Subtract (T v1, T v2) Subtract from a value T Unit () Get the '1' value for the given type","title":"Public Functions inherited from Qkmaxware::Numerics::ICalculator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/#public-static-attributes-documentation","text":"","title":"Public Static Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/#variable-instance","text":"readonly ICalculator<Complex> Qkmaxware.Numerics.ComplexCalculator.Instance;","title":"variable Instance"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/#function-add","text":"Complex Qkmaxware::Numerics::ComplexCalculator::Add ( Complex v1, Complex v2 )","title":"function Add"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/#function-compare","text":"int Qkmaxware::Numerics::ComplexCalculator::Compare ( Complex v1, Complex v2 )","title":"function Compare"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/#function-divide","text":"Complex Qkmaxware::Numerics::ComplexCalculator::Divide ( Complex v1, Complex v2 )","title":"function Divide"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/#function-multiply","text":"Complex Qkmaxware::Numerics::ComplexCalculator::Multiply ( Complex v1, Complex v2 )","title":"function Multiply"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/#function-negate","text":"Complex Qkmaxware::Numerics::ComplexCalculator::Negate ( Complex v1 )","title":"function Negate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/#function-subtract","text":"Complex Qkmaxware::Numerics::ComplexCalculator::Subtract ( Complex v1, Complex v2 )","title":"function Subtract"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_calculator/#function-unit","text":"Complex Qkmaxware::Numerics::ComplexCalculator::Unit () The documentation for this class was generated from the following file Numerics/src/ICalculator.cs","title":"function Unit"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_extensions/","text":"Class Qkmaxware::Numerics::ComplexExtensions Class List > Qkmaxware > Numerics > ComplexExtensions Static class for extensions related to complex numbers Public Static Functions Type Name Complex i (this IConvertible convertible) Easy extension method to create an imaginary value Public Static Functions Documentation function i static inline Complex Qkmaxware::Numerics::ComplexExtensions::i ( this IConvertible convertible ) Parameters: convertible imaginary value Returns: complex number The documentation for this class was generated from the following file Numerics/src/Complex Analysis/ComplexExtensions.cs","title":"Class Qkmaxware::Numerics::ComplexExtensions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_extensions/#class-qkmaxwarenumericscomplexextensions","text":"Class List > Qkmaxware > Numerics > ComplexExtensions Static class for extensions related to complex numbers","title":"Class Qkmaxware::Numerics::ComplexExtensions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_extensions/#public-static-functions","text":"Type Name Complex i (this IConvertible convertible) Easy extension method to create an imaginary value","title":"Public Static Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_extensions/#public-static-functions-documentation","text":"","title":"Public Static Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_extensions/#function-i","text":"static inline Complex Qkmaxware::Numerics::ComplexExtensions::i ( this IConvertible convertible ) Parameters: convertible imaginary value Returns: complex number The documentation for this class was generated from the following file Numerics/src/Complex Analysis/ComplexExtensions.cs","title":"function i"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_function/","text":"Class Qkmaxware::Numerics::ComplexFunction Class List > Qkmaxware > Numerics > ComplexFunction Native complex function Inherits the following classes: Qkmaxware::Numerics::IFunction Public Attributes Type Name ICalculator < Complex > Calculator = => ComplexCalculator.Instance Public Functions Type Name ComplexFunction (Func< Complex, Complex > fn) Complex Evaluate (Complex x) Public Functions inherited from Qkmaxware::Numerics::IFunction See Qkmaxware::Numerics::IFunction Type Name T Evaluate (T x) Evaluate the function at y = f(x) Public Attributes Documentation variable Calculator ICalculator<Complex> Qkmaxware.Numerics.ComplexFunction.Calculator; Public Functions Documentation function ComplexFunction inline Qkmaxware::Numerics::ComplexFunction::ComplexFunction ( Func< Complex, Complex > fn ) function Evaluate inline Complex Qkmaxware::Numerics::ComplexFunction::Evaluate ( Complex x ) The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"Class Qkmaxware::Numerics::ComplexFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_function/#class-qkmaxwarenumericscomplexfunction","text":"Class List > Qkmaxware > Numerics > ComplexFunction Native complex function Inherits the following classes: Qkmaxware::Numerics::IFunction","title":"Class Qkmaxware::Numerics::ComplexFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_function/#public-attributes","text":"Type Name ICalculator < Complex > Calculator = => ComplexCalculator.Instance","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_function/#public-functions","text":"Type Name ComplexFunction (Func< Complex, Complex > fn) Complex Evaluate (Complex x)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_function/#public-functions-inherited-from-qkmaxwarenumericsifunction","text":"See Qkmaxware::Numerics::IFunction Type Name T Evaluate (T x) Evaluate the function at y = f(x)","title":"Public Functions inherited from Qkmaxware::Numerics::IFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_function/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_function/#variable-calculator","text":"ICalculator<Complex> Qkmaxware.Numerics.ComplexFunction.Calculator;","title":"variable Calculator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_function/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_function/#function-complexfunction","text":"inline Qkmaxware::Numerics::ComplexFunction::ComplexFunction ( Func< Complex, Complex > fn )","title":"function ComplexFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_function/#function-evaluate","text":"inline Complex Qkmaxware::Numerics::ComplexFunction::Evaluate ( Complex x ) The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"function Evaluate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_matrix/","text":"Class Qkmaxware::Numerics::ComplexMatrix Class List > Qkmaxware > Numerics > ComplexMatrix Complex number matrix Inherits the following classes: Qkmaxware::Numerics::Matrix Public Attributes inherited from Qkmaxware::Numerics::Matrix See Qkmaxware::Numerics::Matrix Type Name int Columns = => elements.GetLength(1) Number of columns int Elements = => elements.Length Number of elements bool IsColumnMatrix = => Columns == 1 Test if the matrix is a column matrix bool IsRowMatrix = => Rows == 1 Test if the matrix is a row matrix bool IsSquare = => Rows == Columns Test if the matrix is square int Rows = => elements.GetLength(0) Number of rows Matrix < T > this[Range rows, int column] = => this[rows Extract a column matrix over the provided rows Matrix < T > this[int row, Range columns] = => this[new Range (new Index(row), new Index(row + 1)) Extract a row matrix over the provided columns T this[int row, int column] = => elements[row Get the element at the given row and column Public Functions Type Name ComplexMatrix (int rows, int columns) ComplexMatrix (Complex elements) Public Functions inherited from Qkmaxware::Numerics::Matrix See Qkmaxware::Numerics::Matrix Type Name Matrix < T > Adjugate () Compute the adjugate matrix Matrix < T > Cofactor () Compute the cofactor matrix LUPSet < T > Decompose () Perform LU Decomposition T Determinant () Compute the determinate of this matrix Matrix < T > Inverse () Compute the inverse of this matrix Matrix < T > Map (Func< T, T > op) Perform element wise operation Matrix < K > Map< K > ( ICalculator < K > calculator, Func< T, K > convert) Convert from one element type to another Matrix ( ICalculator < T > calculator, int rows, int columns) Create a new matrix Matrix ( ICalculator < T > calculator, T elements) Create a new matrix Matrix < T > Minors () Compute the matrix of minors string ToLatexString (string format=\"{0}\") string ToMapleString (string format=\"{0}\") string ToMatlabString (string format=\"{0}\") override string ToString () string ToWolframString (string format=\"{0}\") T Trace () Compute the trace of the matrix Matrix < T > Transpose () Compute the tranposition of this matrix Public Static Functions Type Name implicit operator ComplexMatrix (Complex elements) Public Static Functions inherited from Qkmaxware::Numerics::Matrix See Qkmaxware::Numerics::Matrix Type Name void AssertCanMultiply ( Matrix < T > m1, Matrix < T > m2) void AssertSameDimensions ( Matrix < T > m1, Matrix < T > m2) void AssertSquare ( Matrix < T > mtx) void AssertValidColumn ( Matrix < T > m1, int column) void AssertValidRow ( Matrix < T > m1, int row) Matrix < T > Fill ( ICalculator < T > calc, int rows, int columns, T value) Matrix < T > Identity ( ICalculator < T > calc, int rows, int columns) Matrix < T > Operate ( Matrix < T > lhs, Matrix < T > rhs, Func< T, T, T > function) Perform element wise operations Matrix < T > Random ( ICalculator < T > calc, int rows, int columns, IValueGenerator < T > rng) Matrix < T > operator* ( Matrix < T > lhs, T rhs) Scalar multiplication Matrix < T > operator* (T lhs, Matrix < T > rhs) Scalar multiplication Matrix < T > operator* ( Matrix < T > lhs, Matrix < T > rhs) Matrix multiplication Matrix < T > operator+ ( Matrix < T > lhs, Matrix < T > rhs) Matrix addition Matrix < T > operator- ( Matrix < T > lhs, Matrix < T > rhs) Matrix subtraction Matrix < T > operator/ ( Matrix < T > lhs, T rhs) Scalar division Protected Static Functions inherited from Qkmaxware::Numerics::Matrix See Qkmaxware::Numerics::Matrix Type Name void AssertValidColumn (T m1, int column) void AssertValidRow (T m1, int row) Public Functions Documentation function ComplexMatrix [1/2] inline Qkmaxware::Numerics::ComplexMatrix::ComplexMatrix ( int rows, int columns ) function ComplexMatrix [2/2] inline Qkmaxware::Numerics::ComplexMatrix::ComplexMatrix ( Complex elements ) Public Static Functions Documentation function operator ComplexMatrix static inline implicit Qkmaxware::Numerics::ComplexMatrix::operator ComplexMatrix ( Complex elements ) The documentation for this class was generated from the following file Numerics/src/Linear Algebra/Matrices.cs","title":"Class Qkmaxware::Numerics::ComplexMatrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_matrix/#class-qkmaxwarenumericscomplexmatrix","text":"Class List > Qkmaxware > Numerics > ComplexMatrix Complex number matrix Inherits the following classes: Qkmaxware::Numerics::Matrix","title":"Class Qkmaxware::Numerics::ComplexMatrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_matrix/#public-attributes-inherited-from-qkmaxwarenumericsmatrix","text":"See Qkmaxware::Numerics::Matrix Type Name int Columns = => elements.GetLength(1) Number of columns int Elements = => elements.Length Number of elements bool IsColumnMatrix = => Columns == 1 Test if the matrix is a column matrix bool IsRowMatrix = => Rows == 1 Test if the matrix is a row matrix bool IsSquare = => Rows == Columns Test if the matrix is square int Rows = => elements.GetLength(0) Number of rows Matrix < T > this[Range rows, int column] = => this[rows Extract a column matrix over the provided rows Matrix < T > this[int row, Range columns] = => this[new Range (new Index(row), new Index(row + 1)) Extract a row matrix over the provided columns T this[int row, int column] = => elements[row Get the element at the given row and column","title":"Public Attributes inherited from Qkmaxware::Numerics::Matrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_matrix/#public-functions","text":"Type Name ComplexMatrix (int rows, int columns) ComplexMatrix (Complex elements)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_matrix/#public-functions-inherited-from-qkmaxwarenumericsmatrix","text":"See Qkmaxware::Numerics::Matrix Type Name Matrix < T > Adjugate () Compute the adjugate matrix Matrix < T > Cofactor () Compute the cofactor matrix LUPSet < T > Decompose () Perform LU Decomposition T Determinant () Compute the determinate of this matrix Matrix < T > Inverse () Compute the inverse of this matrix Matrix < T > Map (Func< T, T > op) Perform element wise operation Matrix < K > Map< K > ( ICalculator < K > calculator, Func< T, K > convert) Convert from one element type to another Matrix ( ICalculator < T > calculator, int rows, int columns) Create a new matrix Matrix ( ICalculator < T > calculator, T elements) Create a new matrix Matrix < T > Minors () Compute the matrix of minors string ToLatexString (string format=\"{0}\") string ToMapleString (string format=\"{0}\") string ToMatlabString (string format=\"{0}\") override string ToString () string ToWolframString (string format=\"{0}\") T Trace () Compute the trace of the matrix Matrix < T > Transpose () Compute the tranposition of this matrix","title":"Public Functions inherited from Qkmaxware::Numerics::Matrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_matrix/#public-static-functions","text":"Type Name implicit operator ComplexMatrix (Complex elements)","title":"Public Static Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_matrix/#public-static-functions-inherited-from-qkmaxwarenumericsmatrix","text":"See Qkmaxware::Numerics::Matrix Type Name void AssertCanMultiply ( Matrix < T > m1, Matrix < T > m2) void AssertSameDimensions ( Matrix < T > m1, Matrix < T > m2) void AssertSquare ( Matrix < T > mtx) void AssertValidColumn ( Matrix < T > m1, int column) void AssertValidRow ( Matrix < T > m1, int row) Matrix < T > Fill ( ICalculator < T > calc, int rows, int columns, T value) Matrix < T > Identity ( ICalculator < T > calc, int rows, int columns) Matrix < T > Operate ( Matrix < T > lhs, Matrix < T > rhs, Func< T, T, T > function) Perform element wise operations Matrix < T > Random ( ICalculator < T > calc, int rows, int columns, IValueGenerator < T > rng) Matrix < T > operator* ( Matrix < T > lhs, T rhs) Scalar multiplication Matrix < T > operator* (T lhs, Matrix < T > rhs) Scalar multiplication Matrix < T > operator* ( Matrix < T > lhs, Matrix < T > rhs) Matrix multiplication Matrix < T > operator+ ( Matrix < T > lhs, Matrix < T > rhs) Matrix addition Matrix < T > operator- ( Matrix < T > lhs, Matrix < T > rhs) Matrix subtraction Matrix < T > operator/ ( Matrix < T > lhs, T rhs) Scalar division","title":"Public Static Functions inherited from Qkmaxware::Numerics::Matrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_matrix/#protected-static-functions-inherited-from-qkmaxwarenumericsmatrix","text":"See Qkmaxware::Numerics::Matrix Type Name void AssertValidColumn (T m1, int column) void AssertValidRow (T m1, int row)","title":"Protected Static Functions inherited from Qkmaxware::Numerics::Matrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_matrix/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_matrix/#function-complexmatrix-12","text":"inline Qkmaxware::Numerics::ComplexMatrix::ComplexMatrix ( int rows, int columns )","title":"function ComplexMatrix [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_matrix/#function-complexmatrix-22","text":"inline Qkmaxware::Numerics::ComplexMatrix::ComplexMatrix ( Complex elements )","title":"function ComplexMatrix [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_matrix/#public-static-functions-documentation","text":"","title":"Public Static Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_complex_matrix/#function-operator-complexmatrix","text":"static inline implicit Qkmaxware::Numerics::ComplexMatrix::operator ComplexMatrix ( Complex elements ) The documentation for this class was generated from the following file Numerics/src/Linear Algebra/Matrices.cs","title":"function operator ComplexMatrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_cosine_interpolation/","text":"Class Qkmaxware::Numerics::CosineInterpolation Class List > Qkmaxware > Numerics > CosineInterpolation Function interpolated using cosine-interpolation Inherits the following classes: Qkmaxware::Numerics::IInterpolator Public Functions Type Name double Interpolate (double last, double start, double end, double next, double t) Public Functions inherited from Qkmaxware::Numerics::IInterpolator See Qkmaxware::Numerics::IInterpolator Type Name T Interpolate (T previous, T start, T end, T next, T factor) Interpolate between start and end points Public Functions Documentation function Interpolate inline double Qkmaxware::Numerics::CosineInterpolation::Interpolate ( double last, double start, double end, double next, double t ) The documentation for this class was generated from the following file Numerics/src/Function/CosineInterpolation.cs","title":"Class Qkmaxware::Numerics::CosineInterpolation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_cosine_interpolation/#class-qkmaxwarenumericscosineinterpolation","text":"Class List > Qkmaxware > Numerics > CosineInterpolation Function interpolated using cosine-interpolation Inherits the following classes: Qkmaxware::Numerics::IInterpolator","title":"Class Qkmaxware::Numerics::CosineInterpolation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_cosine_interpolation/#public-functions","text":"Type Name double Interpolate (double last, double start, double end, double next, double t)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_cosine_interpolation/#public-functions-inherited-from-qkmaxwarenumericsiinterpolator","text":"See Qkmaxware::Numerics::IInterpolator Type Name T Interpolate (T previous, T start, T end, T next, T factor) Interpolate between start and end points","title":"Public Functions inherited from Qkmaxware::Numerics::IInterpolator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_cosine_interpolation/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_cosine_interpolation/#function-interpolate","text":"inline double Qkmaxware::Numerics::CosineInterpolation::Interpolate ( double last, double start, double end, double next, double t ) The documentation for this class was generated from the following file Numerics/src/Function/CosineInterpolation.cs","title":"function Interpolate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_cubic_interpolation/","text":"Class Qkmaxware::Numerics::CubicInterpolation Class List > Qkmaxware > Numerics > CubicInterpolation Function interpolated using cubic-interpolation Inherits the following classes: Qkmaxware::Numerics::IInterpolator Public Functions Type Name double Interpolate (double last, double start, double end, double next, double t) Public Functions inherited from Qkmaxware::Numerics::IInterpolator See Qkmaxware::Numerics::IInterpolator Type Name T Interpolate (T previous, T start, T end, T next, T factor) Interpolate between start and end points Public Functions Documentation function Interpolate inline double Qkmaxware::Numerics::CubicInterpolation::Interpolate ( double last, double start, double end, double next, double t ) The documentation for this class was generated from the following file Numerics/src/Function/CubicInterpolation.cs","title":"Class Qkmaxware::Numerics::CubicInterpolation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_cubic_interpolation/#class-qkmaxwarenumericscubicinterpolation","text":"Class List > Qkmaxware > Numerics > CubicInterpolation Function interpolated using cubic-interpolation Inherits the following classes: Qkmaxware::Numerics::IInterpolator","title":"Class Qkmaxware::Numerics::CubicInterpolation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_cubic_interpolation/#public-functions","text":"Type Name double Interpolate (double last, double start, double end, double next, double t)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_cubic_interpolation/#public-functions-inherited-from-qkmaxwarenumericsiinterpolator","text":"See Qkmaxware::Numerics::IInterpolator Type Name T Interpolate (T previous, T start, T end, T next, T factor) Interpolate between start and end points","title":"Public Functions inherited from Qkmaxware::Numerics::IInterpolator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_cubic_interpolation/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_cubic_interpolation/#function-interpolate","text":"inline double Qkmaxware::Numerics::CubicInterpolation::Interpolate ( double last, double start, double end, double next, double t ) The documentation for this class was generated from the following file Numerics/src/Function/CubicInterpolation.cs","title":"function Interpolate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_dimension_mismatch_exception/","text":"Class Qkmaxware::Numerics::DimensionMismatchException Class List > Qkmaxware > Numerics > DimensionMismatchException Matrix dimension mismatch Inherits the following classes: ArithmeticException Public Functions Type Name DimensionMismatchException () Public Functions Documentation function DimensionMismatchException inline Qkmaxware::Numerics::DimensionMismatchException::DimensionMismatchException () The documentation for this class was generated from the following file Numerics/src/Linear Algebra/DimensionMismatchException.cs","title":"Class Qkmaxware::Numerics::DimensionMismatchException"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_dimension_mismatch_exception/#class-qkmaxwarenumericsdimensionmismatchexception","text":"Class List > Qkmaxware > Numerics > DimensionMismatchException Matrix dimension mismatch Inherits the following classes: ArithmeticException","title":"Class Qkmaxware::Numerics::DimensionMismatchException"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_dimension_mismatch_exception/#public-functions","text":"Type Name DimensionMismatchException ()","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_dimension_mismatch_exception/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_dimension_mismatch_exception/#function-dimensionmismatchexception","text":"inline Qkmaxware::Numerics::DimensionMismatchException::DimensionMismatchException () The documentation for this class was generated from the following file Numerics/src/Linear Algebra/DimensionMismatchException.cs","title":"function DimensionMismatchException"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/","text":"Class Qkmaxware::Numerics::DoubleCalculator Class List > Qkmaxware > Numerics > DoubleCalculator Calculator for double arithmetic Inherits the following classes: Qkmaxware::Numerics::ICalculator Public Static Attributes Type Name readonly ICalculator < double > Instance = = new DoubleCalculator () Public Functions Type Name double Add (double v1, double v2) int Compare (double v1, double v2) double Divide (double v1, double v2) double Multiply (double v1, double v2) double Negate (double v1) double Subtract (double v1, double v2) double Unit () Public Functions inherited from Qkmaxware::Numerics::ICalculator See Qkmaxware::Numerics::ICalculator Type Name T Add (T v1, T v2) Add two values int Compare (T v1, T v2) Compare two values T Divide (T v1, T v2) Multiply two values T Multiply (T v1, T v2) Multiply two values T Negate (T v1) Negate a value T Subtract (T v1, T v2) Subtract from a value T Unit () Get the '1' value for the given type Public Static Attributes Documentation variable Instance readonly ICalculator<double> Qkmaxware.Numerics.DoubleCalculator.Instance; Public Functions Documentation function Add double Qkmaxware::Numerics::DoubleCalculator::Add ( double v1, double v2 ) function Compare int Qkmaxware::Numerics::DoubleCalculator::Compare ( double v1, double v2 ) function Divide double Qkmaxware::Numerics::DoubleCalculator::Divide ( double v1, double v2 ) function Multiply double Qkmaxware::Numerics::DoubleCalculator::Multiply ( double v1, double v2 ) function Negate double Qkmaxware::Numerics::DoubleCalculator::Negate ( double v1 ) function Subtract double Qkmaxware::Numerics::DoubleCalculator::Subtract ( double v1, double v2 ) function Unit double Qkmaxware::Numerics::DoubleCalculator::Unit () The documentation for this class was generated from the following file Numerics/src/ICalculator.cs","title":"Class Qkmaxware::Numerics::DoubleCalculator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/#class-qkmaxwarenumericsdoublecalculator","text":"Class List > Qkmaxware > Numerics > DoubleCalculator Calculator for double arithmetic Inherits the following classes: Qkmaxware::Numerics::ICalculator","title":"Class Qkmaxware::Numerics::DoubleCalculator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/#public-static-attributes","text":"Type Name readonly ICalculator < double > Instance = = new DoubleCalculator ()","title":"Public Static Attributes"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/#public-functions","text":"Type Name double Add (double v1, double v2) int Compare (double v1, double v2) double Divide (double v1, double v2) double Multiply (double v1, double v2) double Negate (double v1) double Subtract (double v1, double v2) double Unit ()","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/#public-functions-inherited-from-qkmaxwarenumericsicalculator","text":"See Qkmaxware::Numerics::ICalculator Type Name T Add (T v1, T v2) Add two values int Compare (T v1, T v2) Compare two values T Divide (T v1, T v2) Multiply two values T Multiply (T v1, T v2) Multiply two values T Negate (T v1) Negate a value T Subtract (T v1, T v2) Subtract from a value T Unit () Get the '1' value for the given type","title":"Public Functions inherited from Qkmaxware::Numerics::ICalculator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/#public-static-attributes-documentation","text":"","title":"Public Static Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/#variable-instance","text":"readonly ICalculator<double> Qkmaxware.Numerics.DoubleCalculator.Instance;","title":"variable Instance"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/#function-add","text":"double Qkmaxware::Numerics::DoubleCalculator::Add ( double v1, double v2 )","title":"function Add"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/#function-compare","text":"int Qkmaxware::Numerics::DoubleCalculator::Compare ( double v1, double v2 )","title":"function Compare"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/#function-divide","text":"double Qkmaxware::Numerics::DoubleCalculator::Divide ( double v1, double v2 )","title":"function Divide"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/#function-multiply","text":"double Qkmaxware::Numerics::DoubleCalculator::Multiply ( double v1, double v2 )","title":"function Multiply"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/#function-negate","text":"double Qkmaxware::Numerics::DoubleCalculator::Negate ( double v1 )","title":"function Negate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/#function-subtract","text":"double Qkmaxware::Numerics::DoubleCalculator::Subtract ( double v1, double v2 )","title":"function Subtract"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_calculator/#function-unit","text":"double Qkmaxware::Numerics::DoubleCalculator::Unit () The documentation for this class was generated from the following file Numerics/src/ICalculator.cs","title":"function Unit"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function/","text":"Class Qkmaxware::Numerics::DoubleFunction Class List > Qkmaxware > Numerics > DoubleFunction Native double function Inherits the following classes: Qkmaxware::Numerics::IFunction Public Attributes Type Name ICalculator < double > Calculator = => DoubleCalculator.Instance Public Functions Type Name DoubleFunction (Func< double, double > fn) double Evaluate (double x) Public Functions inherited from Qkmaxware::Numerics::IFunction See Qkmaxware::Numerics::IFunction Type Name T Evaluate (T x) Evaluate the function at y = f(x) Public Attributes Documentation variable Calculator ICalculator<double> Qkmaxware.Numerics.DoubleFunction.Calculator; Public Functions Documentation function DoubleFunction inline Qkmaxware::Numerics::DoubleFunction::DoubleFunction ( Func< double, double > fn ) function Evaluate inline double Qkmaxware::Numerics::DoubleFunction::Evaluate ( double x ) The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"Class Qkmaxware::Numerics::DoubleFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function/#class-qkmaxwarenumericsdoublefunction","text":"Class List > Qkmaxware > Numerics > DoubleFunction Native double function Inherits the following classes: Qkmaxware::Numerics::IFunction","title":"Class Qkmaxware::Numerics::DoubleFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function/#public-attributes","text":"Type Name ICalculator < double > Calculator = => DoubleCalculator.Instance","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function/#public-functions","text":"Type Name DoubleFunction (Func< double, double > fn) double Evaluate (double x)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function/#public-functions-inherited-from-qkmaxwarenumericsifunction","text":"See Qkmaxware::Numerics::IFunction Type Name T Evaluate (T x) Evaluate the function at y = f(x)","title":"Public Functions inherited from Qkmaxware::Numerics::IFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function/#variable-calculator","text":"ICalculator<double> Qkmaxware.Numerics.DoubleFunction.Calculator;","title":"variable Calculator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function/#function-doublefunction","text":"inline Qkmaxware::Numerics::DoubleFunction::DoubleFunction ( Func< double, double > fn )","title":"function DoubleFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function/#function-evaluate","text":"inline double Qkmaxware::Numerics::DoubleFunction::Evaluate ( double x ) The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"function Evaluate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function2/","text":"Class Qkmaxware::Numerics::DoubleFunction2 Class List > Qkmaxware > Numerics > DoubleFunction2 Native double function of two variables Inherits the following classes: Qkmaxware::Numerics::IFunction2 Public Attributes Type Name ICalculator < double > Calculator = => DoubleCalculator.Instance Public Functions Type Name DoubleFunction2 (Func< double, double, double > fn) double Evaluate (double x1, double x2) Public Functions inherited from Qkmaxware::Numerics::IFunction2 See Qkmaxware::Numerics::IFunction2 Type Name T Evaluate (T x1, T x2) Evaluate the function at y = f(x1, x2) Public Attributes Documentation variable Calculator ICalculator<double> Qkmaxware.Numerics.DoubleFunction2.Calculator; Public Functions Documentation function DoubleFunction2 inline Qkmaxware::Numerics::DoubleFunction2::DoubleFunction2 ( Func< double, double, double > fn ) function Evaluate inline double Qkmaxware::Numerics::DoubleFunction2::Evaluate ( double x1, double x2 ) The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"Class Qkmaxware::Numerics::DoubleFunction2"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function2/#class-qkmaxwarenumericsdoublefunction2","text":"Class List > Qkmaxware > Numerics > DoubleFunction2 Native double function of two variables Inherits the following classes: Qkmaxware::Numerics::IFunction2","title":"Class Qkmaxware::Numerics::DoubleFunction2"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function2/#public-attributes","text":"Type Name ICalculator < double > Calculator = => DoubleCalculator.Instance","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function2/#public-functions","text":"Type Name DoubleFunction2 (Func< double, double, double > fn) double Evaluate (double x1, double x2)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function2/#public-functions-inherited-from-qkmaxwarenumericsifunction2","text":"See Qkmaxware::Numerics::IFunction2 Type Name T Evaluate (T x1, T x2) Evaluate the function at y = f(x1, x2)","title":"Public Functions inherited from Qkmaxware::Numerics::IFunction2"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function2/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function2/#variable-calculator","text":"ICalculator<double> Qkmaxware.Numerics.DoubleFunction2.Calculator;","title":"variable Calculator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function2/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function2/#function-doublefunction2","text":"inline Qkmaxware::Numerics::DoubleFunction2::DoubleFunction2 ( Func< double, double, double > fn )","title":"function DoubleFunction2"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_function2/#function-evaluate","text":"inline double Qkmaxware::Numerics::DoubleFunction2::Evaluate ( double x1, double x2 ) The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"function Evaluate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_interpolated_function/","text":"Class Qkmaxware::Numerics::DoubleInterpolatedFunction Class List > Qkmaxware > Numerics > DoubleInterpolatedFunction Interpolated function using doubles Inherits the following classes: Qkmaxware::Numerics::BaseInterpolatedFunction Public Attributes inherited from Qkmaxware::Numerics::BaseInterpolatedFunction See Qkmaxware::Numerics::BaseInterpolatedFunction Type Name IEnumerable< Point2 < T > > Samples = => Array.AsReadOnly(this.points) Public Functions Type Name DoubleInterpolatedFunction (IEnumerable< Point2 < double >> samples) DoubleInterpolatedFunction (double[] xs, double[] ys) Public Functions inherited from Qkmaxware::Numerics::BaseInterpolatedFunction See Qkmaxware::Numerics::BaseInterpolatedFunction Type Name BaseInterpolatedFunction ( ICalculator < T > calculator, IEnumerable< Point2 < T >> samples) BaseInterpolatedFunction ( ICalculator < T > calculator, T[] xs, T[] ys) T Evaluate (T x) Evaluate the function at y = f(x) Public Functions inherited from Qkmaxware::Numerics::IFunction See Qkmaxware::Numerics::IFunction Type Name T Evaluate (T x) Evaluate the function at y = f(x) Protected Functions inherited from Qkmaxware::Numerics::BaseInterpolatedFunction See Qkmaxware::Numerics::BaseInterpolatedFunction Type Name bool IsInRange (T x) Public Functions Documentation function DoubleInterpolatedFunction [1/2] inline Qkmaxware::Numerics::DoubleInterpolatedFunction::DoubleInterpolatedFunction ( IEnumerable< Point2 < double >> samples ) function DoubleInterpolatedFunction [2/2] inline Qkmaxware::Numerics::DoubleInterpolatedFunction::DoubleInterpolatedFunction ( double[] xs, double[] ys ) The documentation for this class was generated from the following file Numerics/src/Function/BaseInterpolatedFunction.cs","title":"Class Qkmaxware::Numerics::DoubleInterpolatedFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_interpolated_function/#class-qkmaxwarenumericsdoubleinterpolatedfunction","text":"Class List > Qkmaxware > Numerics > DoubleInterpolatedFunction Interpolated function using doubles Inherits the following classes: Qkmaxware::Numerics::BaseInterpolatedFunction","title":"Class Qkmaxware::Numerics::DoubleInterpolatedFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_interpolated_function/#public-attributes-inherited-from-qkmaxwarenumericsbaseinterpolatedfunction","text":"See Qkmaxware::Numerics::BaseInterpolatedFunction Type Name IEnumerable< Point2 < T > > Samples = => Array.AsReadOnly(this.points)","title":"Public Attributes inherited from Qkmaxware::Numerics::BaseInterpolatedFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_interpolated_function/#public-functions","text":"Type Name DoubleInterpolatedFunction (IEnumerable< Point2 < double >> samples) DoubleInterpolatedFunction (double[] xs, double[] ys)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_interpolated_function/#public-functions-inherited-from-qkmaxwarenumericsbaseinterpolatedfunction","text":"See Qkmaxware::Numerics::BaseInterpolatedFunction Type Name BaseInterpolatedFunction ( ICalculator < T > calculator, IEnumerable< Point2 < T >> samples) BaseInterpolatedFunction ( ICalculator < T > calculator, T[] xs, T[] ys) T Evaluate (T x) Evaluate the function at y = f(x)","title":"Public Functions inherited from Qkmaxware::Numerics::BaseInterpolatedFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_interpolated_function/#public-functions-inherited-from-qkmaxwarenumericsifunction","text":"See Qkmaxware::Numerics::IFunction Type Name T Evaluate (T x) Evaluate the function at y = f(x)","title":"Public Functions inherited from Qkmaxware::Numerics::IFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_interpolated_function/#protected-functions-inherited-from-qkmaxwarenumericsbaseinterpolatedfunction","text":"See Qkmaxware::Numerics::BaseInterpolatedFunction Type Name bool IsInRange (T x)","title":"Protected Functions inherited from Qkmaxware::Numerics::BaseInterpolatedFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_interpolated_function/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_interpolated_function/#function-doubleinterpolatedfunction-12","text":"inline Qkmaxware::Numerics::DoubleInterpolatedFunction::DoubleInterpolatedFunction ( IEnumerable< Point2 < double >> samples )","title":"function DoubleInterpolatedFunction [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_interpolated_function/#function-doubleinterpolatedfunction-22","text":"inline Qkmaxware::Numerics::DoubleInterpolatedFunction::DoubleInterpolatedFunction ( double[] xs, double[] ys ) The documentation for this class was generated from the following file Numerics/src/Function/BaseInterpolatedFunction.cs","title":"function DoubleInterpolatedFunction [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_matrix/","text":"Class Qkmaxware::Numerics::DoubleMatrix Class List > Qkmaxware > Numerics > DoubleMatrix Double matrix Inherits the following classes: Qkmaxware::Numerics::Matrix Public Attributes inherited from Qkmaxware::Numerics::Matrix See Qkmaxware::Numerics::Matrix Type Name int Columns = => elements.GetLength(1) Number of columns int Elements = => elements.Length Number of elements bool IsColumnMatrix = => Columns == 1 Test if the matrix is a column matrix bool IsRowMatrix = => Rows == 1 Test if the matrix is a row matrix bool IsSquare = => Rows == Columns Test if the matrix is square int Rows = => elements.GetLength(0) Number of rows Matrix < T > this[Range rows, int column] = => this[rows Extract a column matrix over the provided rows Matrix < T > this[int row, Range columns] = => this[new Range (new Index(row), new Index(row + 1)) Extract a row matrix over the provided columns T this[int row, int column] = => elements[row Get the element at the given row and column Public Functions Type Name DoubleMatrix (int rows, int columns) DoubleMatrix (double elements) Public Functions inherited from Qkmaxware::Numerics::Matrix See Qkmaxware::Numerics::Matrix Type Name Matrix < T > Adjugate () Compute the adjugate matrix Matrix < T > Cofactor () Compute the cofactor matrix LUPSet < T > Decompose () Perform LU Decomposition T Determinant () Compute the determinate of this matrix Matrix < T > Inverse () Compute the inverse of this matrix Matrix < T > Map (Func< T, T > op) Perform element wise operation Matrix < K > Map< K > ( ICalculator < K > calculator, Func< T, K > convert) Convert from one element type to another Matrix ( ICalculator < T > calculator, int rows, int columns) Create a new matrix Matrix ( ICalculator < T > calculator, T elements) Create a new matrix Matrix < T > Minors () Compute the matrix of minors string ToLatexString (string format=\"{0}\") string ToMapleString (string format=\"{0}\") string ToMatlabString (string format=\"{0}\") override string ToString () string ToWolframString (string format=\"{0}\") T Trace () Compute the trace of the matrix Matrix < T > Transpose () Compute the tranposition of this matrix Public Static Functions Type Name implicit operator DoubleMatrix (double elements) Public Static Functions inherited from Qkmaxware::Numerics::Matrix See Qkmaxware::Numerics::Matrix Type Name void AssertCanMultiply ( Matrix < T > m1, Matrix < T > m2) void AssertSameDimensions ( Matrix < T > m1, Matrix < T > m2) void AssertSquare ( Matrix < T > mtx) void AssertValidColumn ( Matrix < T > m1, int column) void AssertValidRow ( Matrix < T > m1, int row) Matrix < T > Fill ( ICalculator < T > calc, int rows, int columns, T value) Matrix < T > Identity ( ICalculator < T > calc, int rows, int columns) Matrix < T > Operate ( Matrix < T > lhs, Matrix < T > rhs, Func< T, T, T > function) Perform element wise operations Matrix < T > Random ( ICalculator < T > calc, int rows, int columns, IValueGenerator < T > rng) Matrix < T > operator* ( Matrix < T > lhs, T rhs) Scalar multiplication Matrix < T > operator* (T lhs, Matrix < T > rhs) Scalar multiplication Matrix < T > operator* ( Matrix < T > lhs, Matrix < T > rhs) Matrix multiplication Matrix < T > operator+ ( Matrix < T > lhs, Matrix < T > rhs) Matrix addition Matrix < T > operator- ( Matrix < T > lhs, Matrix < T > rhs) Matrix subtraction Matrix < T > operator/ ( Matrix < T > lhs, T rhs) Scalar division Protected Static Functions inherited from Qkmaxware::Numerics::Matrix See Qkmaxware::Numerics::Matrix Type Name void AssertValidColumn (T m1, int column) void AssertValidRow (T m1, int row) Public Functions Documentation function DoubleMatrix [1/2] inline Qkmaxware::Numerics::DoubleMatrix::DoubleMatrix ( int rows, int columns ) function DoubleMatrix [2/2] inline Qkmaxware::Numerics::DoubleMatrix::DoubleMatrix ( double elements ) Public Static Functions Documentation function operator DoubleMatrix static inline implicit Qkmaxware::Numerics::DoubleMatrix::operator DoubleMatrix ( double elements ) The documentation for this class was generated from the following file Numerics/src/Linear Algebra/Matrices.cs","title":"Class Qkmaxware::Numerics::DoubleMatrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_matrix/#class-qkmaxwarenumericsdoublematrix","text":"Class List > Qkmaxware > Numerics > DoubleMatrix Double matrix Inherits the following classes: Qkmaxware::Numerics::Matrix","title":"Class Qkmaxware::Numerics::DoubleMatrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_matrix/#public-attributes-inherited-from-qkmaxwarenumericsmatrix","text":"See Qkmaxware::Numerics::Matrix Type Name int Columns = => elements.GetLength(1) Number of columns int Elements = => elements.Length Number of elements bool IsColumnMatrix = => Columns == 1 Test if the matrix is a column matrix bool IsRowMatrix = => Rows == 1 Test if the matrix is a row matrix bool IsSquare = => Rows == Columns Test if the matrix is square int Rows = => elements.GetLength(0) Number of rows Matrix < T > this[Range rows, int column] = => this[rows Extract a column matrix over the provided rows Matrix < T > this[int row, Range columns] = => this[new Range (new Index(row), new Index(row + 1)) Extract a row matrix over the provided columns T this[int row, int column] = => elements[row Get the element at the given row and column","title":"Public Attributes inherited from Qkmaxware::Numerics::Matrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_matrix/#public-functions","text":"Type Name DoubleMatrix (int rows, int columns) DoubleMatrix (double elements)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_matrix/#public-functions-inherited-from-qkmaxwarenumericsmatrix","text":"See Qkmaxware::Numerics::Matrix Type Name Matrix < T > Adjugate () Compute the adjugate matrix Matrix < T > Cofactor () Compute the cofactor matrix LUPSet < T > Decompose () Perform LU Decomposition T Determinant () Compute the determinate of this matrix Matrix < T > Inverse () Compute the inverse of this matrix Matrix < T > Map (Func< T, T > op) Perform element wise operation Matrix < K > Map< K > ( ICalculator < K > calculator, Func< T, K > convert) Convert from one element type to another Matrix ( ICalculator < T > calculator, int rows, int columns) Create a new matrix Matrix ( ICalculator < T > calculator, T elements) Create a new matrix Matrix < T > Minors () Compute the matrix of minors string ToLatexString (string format=\"{0}\") string ToMapleString (string format=\"{0}\") string ToMatlabString (string format=\"{0}\") override string ToString () string ToWolframString (string format=\"{0}\") T Trace () Compute the trace of the matrix Matrix < T > Transpose () Compute the tranposition of this matrix","title":"Public Functions inherited from Qkmaxware::Numerics::Matrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_matrix/#public-static-functions","text":"Type Name implicit operator DoubleMatrix (double elements)","title":"Public Static Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_matrix/#public-static-functions-inherited-from-qkmaxwarenumericsmatrix","text":"See Qkmaxware::Numerics::Matrix Type Name void AssertCanMultiply ( Matrix < T > m1, Matrix < T > m2) void AssertSameDimensions ( Matrix < T > m1, Matrix < T > m2) void AssertSquare ( Matrix < T > mtx) void AssertValidColumn ( Matrix < T > m1, int column) void AssertValidRow ( Matrix < T > m1, int row) Matrix < T > Fill ( ICalculator < T > calc, int rows, int columns, T value) Matrix < T > Identity ( ICalculator < T > calc, int rows, int columns) Matrix < T > Operate ( Matrix < T > lhs, Matrix < T > rhs, Func< T, T, T > function) Perform element wise operations Matrix < T > Random ( ICalculator < T > calc, int rows, int columns, IValueGenerator < T > rng) Matrix < T > operator* ( Matrix < T > lhs, T rhs) Scalar multiplication Matrix < T > operator* (T lhs, Matrix < T > rhs) Scalar multiplication Matrix < T > operator* ( Matrix < T > lhs, Matrix < T > rhs) Matrix multiplication Matrix < T > operator+ ( Matrix < T > lhs, Matrix < T > rhs) Matrix addition Matrix < T > operator- ( Matrix < T > lhs, Matrix < T > rhs) Matrix subtraction Matrix < T > operator/ ( Matrix < T > lhs, T rhs) Scalar division","title":"Public Static Functions inherited from Qkmaxware::Numerics::Matrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_matrix/#protected-static-functions-inherited-from-qkmaxwarenumericsmatrix","text":"See Qkmaxware::Numerics::Matrix Type Name void AssertValidColumn (T m1, int column) void AssertValidRow (T m1, int row)","title":"Protected Static Functions inherited from Qkmaxware::Numerics::Matrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_matrix/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_matrix/#function-doublematrix-12","text":"inline Qkmaxware::Numerics::DoubleMatrix::DoubleMatrix ( int rows, int columns )","title":"function DoubleMatrix [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_matrix/#function-doublematrix-22","text":"inline Qkmaxware::Numerics::DoubleMatrix::DoubleMatrix ( double elements )","title":"function DoubleMatrix [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_matrix/#public-static-functions-documentation","text":"","title":"Public Static Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_matrix/#function-operator-doublematrix","text":"static inline implicit Qkmaxware::Numerics::DoubleMatrix::operator DoubleMatrix ( double elements ) The documentation for this class was generated from the following file Numerics/src/Linear Algebra/Matrices.cs","title":"function operator DoubleMatrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_range/","text":"Class Qkmaxware::Numerics::DoubleRange Class List > Qkmaxware > Numerics > DoubleRange Range of doubles Inherits the following classes: Qkmaxware::Numerics::Range Public Functions Type Name DoubleRange (double start, double end, double increment=1) Public Functions inherited from Qkmaxware::Numerics::Range See Qkmaxware::Numerics::Range Type Name override bool Equals (object obj) override int GetHashCode () Range ( ICalculator < T > calculator, T start, T end, T increment) override string ToString () Range to string Public Static Functions Type Name implicit operator DoubleRange ( IntRange range) Convert an integer range implicitly to a double range implicit operator DoubleRange ( Range range) Convert a system range implicitly to a integer range Public Functions Documentation function DoubleRange inline Qkmaxware::Numerics::DoubleRange::DoubleRange ( double start, double end, double increment=1 ) Public Static Functions Documentation function operator DoubleRange [1/2] static inline implicit Qkmaxware::Numerics::DoubleRange::operator DoubleRange ( IntRange range ) Parameters: range range to convert function operator DoubleRange [2/2] static inline implicit Qkmaxware::Numerics::DoubleRange::operator DoubleRange ( Range range ) Parameters: range range to convert The documentation for this class was generated from the following file Numerics/src/Range.cs","title":"Class Qkmaxware::Numerics::DoubleRange"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_range/#class-qkmaxwarenumericsdoublerange","text":"Class List > Qkmaxware > Numerics > DoubleRange Range of doubles Inherits the following classes: Qkmaxware::Numerics::Range","title":"Class Qkmaxware::Numerics::DoubleRange"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_range/#public-functions","text":"Type Name DoubleRange (double start, double end, double increment=1)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_range/#public-functions-inherited-from-qkmaxwarenumericsrange","text":"See Qkmaxware::Numerics::Range Type Name override bool Equals (object obj) override int GetHashCode () Range ( ICalculator < T > calculator, T start, T end, T increment) override string ToString () Range to string","title":"Public Functions inherited from Qkmaxware::Numerics::Range"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_range/#public-static-functions","text":"Type Name implicit operator DoubleRange ( IntRange range) Convert an integer range implicitly to a double range implicit operator DoubleRange ( Range range) Convert a system range implicitly to a integer range","title":"Public Static Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_range/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_range/#function-doublerange","text":"inline Qkmaxware::Numerics::DoubleRange::DoubleRange ( double start, double end, double increment=1 )","title":"function DoubleRange"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_range/#public-static-functions-documentation","text":"","title":"Public Static Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_range/#function-operator-doublerange-12","text":"static inline implicit Qkmaxware::Numerics::DoubleRange::operator DoubleRange ( IntRange range ) Parameters: range range to convert","title":"function operator DoubleRange [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_double_range/#function-operator-doublerange-22","text":"static inline implicit Qkmaxware::Numerics::DoubleRange::operator DoubleRange ( Range range ) Parameters: range range to convert The documentation for this class was generated from the following file Numerics/src/Range.cs","title":"function operator DoubleRange [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_endpoint_five_point_differentiator/","text":"Class Qkmaxware::Numerics::EndpointFivePointDifferentiator Class List > Qkmaxware > Numerics > EndpointFivePointDifferentiator Endpoint five point numerical derivative solver Inherits the following classes: Qkmaxware::Numerics::INumericDifferentiator Public Functions Type Name double Differentiate ( IFunction < double > f, double x, double h=double.Epsilon) IFunction < double > Differentiate ( IFunction < double > f, Range < double > range) Public Functions inherited from Qkmaxware::Numerics::INumericDifferentiator See Qkmaxware::Numerics::INumericDifferentiator Type Name IFunction < T > Differentiate ( IFunction < T > f, Range < T > range) Compute the derivative of the function over the range Public Functions Documentation function Differentiate [1/2] inline double Qkmaxware::Numerics::EndpointFivePointDifferentiator::Differentiate ( IFunction < double > f, double x, double h=double.Epsilon ) function Differentiate [2/2] inline IFunction < double > Qkmaxware::Numerics::EndpointFivePointDifferentiator::Differentiate ( IFunction < double > f, Range < double > range ) The documentation for this class was generated from the following file Numerics/src/Differentiation/FivePointDifferentiator.cs","title":"Class Qkmaxware::Numerics::EndpointFivePointDifferentiator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_endpoint_five_point_differentiator/#class-qkmaxwarenumericsendpointfivepointdifferentiator","text":"Class List > Qkmaxware > Numerics > EndpointFivePointDifferentiator Endpoint five point numerical derivative solver Inherits the following classes: Qkmaxware::Numerics::INumericDifferentiator","title":"Class Qkmaxware::Numerics::EndpointFivePointDifferentiator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_endpoint_five_point_differentiator/#public-functions","text":"Type Name double Differentiate ( IFunction < double > f, double x, double h=double.Epsilon) IFunction < double > Differentiate ( IFunction < double > f, Range < double > range)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_endpoint_five_point_differentiator/#public-functions-inherited-from-qkmaxwarenumericsinumericdifferentiator","text":"See Qkmaxware::Numerics::INumericDifferentiator Type Name IFunction < T > Differentiate ( IFunction < T > f, Range < T > range) Compute the derivative of the function over the range","title":"Public Functions inherited from Qkmaxware::Numerics::INumericDifferentiator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_endpoint_five_point_differentiator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_endpoint_five_point_differentiator/#function-differentiate-12","text":"inline double Qkmaxware::Numerics::EndpointFivePointDifferentiator::Differentiate ( IFunction < double > f, double x, double h=double.Epsilon )","title":"function Differentiate [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_endpoint_five_point_differentiator/#function-differentiate-22","text":"inline IFunction < double > Qkmaxware::Numerics::EndpointFivePointDifferentiator::Differentiate ( IFunction < double > f, Range < double > range ) The documentation for this class was generated from the following file Numerics/src/Differentiation/FivePointDifferentiator.cs","title":"function Differentiate [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_endpoint_three_point_differentiator/","text":"Class Qkmaxware::Numerics::EndpointThreePointDifferentiator Class List > Qkmaxware > Numerics > EndpointThreePointDifferentiator Endpoint three point numerical derivative solver Inherits the following classes: Qkmaxware::Numerics::INumericDifferentiator Public Functions Type Name double Differentiate ( IFunction < double > f, double x, double h=double.Epsilon) IFunction < double > Differentiate ( IFunction < double > f, Range < double > range) Public Functions inherited from Qkmaxware::Numerics::INumericDifferentiator See Qkmaxware::Numerics::INumericDifferentiator Type Name IFunction < T > Differentiate ( IFunction < T > f, Range < T > range) Compute the derivative of the function over the range Public Functions Documentation function Differentiate [1/2] inline double Qkmaxware::Numerics::EndpointThreePointDifferentiator::Differentiate ( IFunction < double > f, double x, double h=double.Epsilon ) function Differentiate [2/2] inline IFunction < double > Qkmaxware::Numerics::EndpointThreePointDifferentiator::Differentiate ( IFunction < double > f, Range < double > range ) The documentation for this class was generated from the following file Numerics/src/Differentiation/ThreePointDifferentiator.cs","title":"Class Qkmaxware::Numerics::EndpointThreePointDifferentiator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_endpoint_three_point_differentiator/#class-qkmaxwarenumericsendpointthreepointdifferentiator","text":"Class List > Qkmaxware > Numerics > EndpointThreePointDifferentiator Endpoint three point numerical derivative solver Inherits the following classes: Qkmaxware::Numerics::INumericDifferentiator","title":"Class Qkmaxware::Numerics::EndpointThreePointDifferentiator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_endpoint_three_point_differentiator/#public-functions","text":"Type Name double Differentiate ( IFunction < double > f, double x, double h=double.Epsilon) IFunction < double > Differentiate ( IFunction < double > f, Range < double > range)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_endpoint_three_point_differentiator/#public-functions-inherited-from-qkmaxwarenumericsinumericdifferentiator","text":"See Qkmaxware::Numerics::INumericDifferentiator Type Name IFunction < T > Differentiate ( IFunction < T > f, Range < T > range) Compute the derivative of the function over the range","title":"Public Functions inherited from Qkmaxware::Numerics::INumericDifferentiator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_endpoint_three_point_differentiator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_endpoint_three_point_differentiator/#function-differentiate-12","text":"inline double Qkmaxware::Numerics::EndpointThreePointDifferentiator::Differentiate ( IFunction < double > f, double x, double h=double.Epsilon )","title":"function Differentiate [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_endpoint_three_point_differentiator/#function-differentiate-22","text":"inline IFunction < double > Qkmaxware::Numerics::EndpointThreePointDifferentiator::Differentiate ( IFunction < double > f, Range < double > range ) The documentation for this class was generated from the following file Numerics/src/Differentiation/ThreePointDifferentiator.cs","title":"function Differentiate [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_euler_ivp_solver/","text":"Class Qkmaxware::Numerics::EulerIvpSolver Class List > Qkmaxware > Numerics > EulerIvpSolver Solve initial value problems with Euler's method Inherits the following classes: Qkmaxware::Numerics::IIvpSolver Public Functions Type Name IFunction < double > Solve ( IFunction2 < double > f, Range < double > tRange, double y0) Solve the initial value problem where y` = f(t, y), a <= t <= b, y(a) = y0 Public Functions inherited from Qkmaxware::Numerics::IIvpSolver See Qkmaxware::Numerics::IIvpSolver Type Name IFunction < T > Solve ( IFunction2 < T > expr, Range < T > tRange, T y0) Solve the initial value problem where y` = f(t, y), a <= t <= b, y(a) = y0 Public Functions Documentation function Solve inline IFunction < double > Qkmaxware::Numerics::EulerIvpSolver::Solve ( IFunction2 < double > f, Range < double > tRange, double y0 ) Parameters: f function of two arguments (t,y) tRange range (a,b) of values for t y0 value of y at a Returns: approximation for the function y The documentation for this class was generated from the following file Numerics/src/Ode/EulerIvpSolver.cs","title":"Class Qkmaxware::Numerics::EulerIvpSolver"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_euler_ivp_solver/#class-qkmaxwarenumericseulerivpsolver","text":"Class List > Qkmaxware > Numerics > EulerIvpSolver Solve initial value problems with Euler's method Inherits the following classes: Qkmaxware::Numerics::IIvpSolver","title":"Class Qkmaxware::Numerics::EulerIvpSolver"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_euler_ivp_solver/#public-functions","text":"Type Name IFunction < double > Solve ( IFunction2 < double > f, Range < double > tRange, double y0) Solve the initial value problem where y` = f(t, y), a <= t <= b, y(a) = y0","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_euler_ivp_solver/#public-functions-inherited-from-qkmaxwarenumericsiivpsolver","text":"See Qkmaxware::Numerics::IIvpSolver Type Name IFunction < T > Solve ( IFunction2 < T > expr, Range < T > tRange, T y0) Solve the initial value problem where y` = f(t, y), a <= t <= b, y(a) = y0","title":"Public Functions inherited from Qkmaxware::Numerics::IIvpSolver"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_euler_ivp_solver/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_euler_ivp_solver/#function-solve","text":"inline IFunction < double > Qkmaxware::Numerics::EulerIvpSolver::Solve ( IFunction2 < double > f, Range < double > tRange, double y0 ) Parameters: f function of two arguments (t,y) tRange range (a,b) of values for t y0 value of y at a Returns: approximation for the function y The documentation for this class was generated from the following file Numerics/src/Ode/EulerIvpSolver.cs","title":"function Solve"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/","text":"Class Qkmaxware::Numerics::IntCalculator Class List > Qkmaxware > Numerics > IntCalculator Calculator for integer arithmetic Inherits the following classes: Qkmaxware::Numerics::ICalculator Public Static Attributes Type Name readonly ICalculator < int > Instance = = new IntCalculator () Public Functions Type Name int Add (int v1, int v2) int Compare (int v1, int v2) int Divide (int v1, int v2) int Multiply (int v1, int v2) int Negate (int v1) int Subtract (int v1, int v2) int Unit () Public Functions inherited from Qkmaxware::Numerics::ICalculator See Qkmaxware::Numerics::ICalculator Type Name T Add (T v1, T v2) Add two values int Compare (T v1, T v2) Compare two values T Divide (T v1, T v2) Multiply two values T Multiply (T v1, T v2) Multiply two values T Negate (T v1) Negate a value T Subtract (T v1, T v2) Subtract from a value T Unit () Get the '1' value for the given type Public Static Attributes Documentation variable Instance readonly ICalculator<int> Qkmaxware.Numerics.IntCalculator.Instance; Public Functions Documentation function Add int Qkmaxware::Numerics::IntCalculator::Add ( int v1, int v2 ) function Compare int Qkmaxware::Numerics::IntCalculator::Compare ( int v1, int v2 ) function Divide int Qkmaxware::Numerics::IntCalculator::Divide ( int v1, int v2 ) function Multiply int Qkmaxware::Numerics::IntCalculator::Multiply ( int v1, int v2 ) function Negate int Qkmaxware::Numerics::IntCalculator::Negate ( int v1 ) function Subtract int Qkmaxware::Numerics::IntCalculator::Subtract ( int v1, int v2 ) function Unit int Qkmaxware::Numerics::IntCalculator::Unit () The documentation for this class was generated from the following file Numerics/src/ICalculator.cs","title":"Class Qkmaxware::Numerics::IntCalculator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/#class-qkmaxwarenumericsintcalculator","text":"Class List > Qkmaxware > Numerics > IntCalculator Calculator for integer arithmetic Inherits the following classes: Qkmaxware::Numerics::ICalculator","title":"Class Qkmaxware::Numerics::IntCalculator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/#public-static-attributes","text":"Type Name readonly ICalculator < int > Instance = = new IntCalculator ()","title":"Public Static Attributes"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/#public-functions","text":"Type Name int Add (int v1, int v2) int Compare (int v1, int v2) int Divide (int v1, int v2) int Multiply (int v1, int v2) int Negate (int v1) int Subtract (int v1, int v2) int Unit ()","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/#public-functions-inherited-from-qkmaxwarenumericsicalculator","text":"See Qkmaxware::Numerics::ICalculator Type Name T Add (T v1, T v2) Add two values int Compare (T v1, T v2) Compare two values T Divide (T v1, T v2) Multiply two values T Multiply (T v1, T v2) Multiply two values T Negate (T v1) Negate a value T Subtract (T v1, T v2) Subtract from a value T Unit () Get the '1' value for the given type","title":"Public Functions inherited from Qkmaxware::Numerics::ICalculator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/#public-static-attributes-documentation","text":"","title":"Public Static Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/#variable-instance","text":"readonly ICalculator<int> Qkmaxware.Numerics.IntCalculator.Instance;","title":"variable Instance"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/#function-add","text":"int Qkmaxware::Numerics::IntCalculator::Add ( int v1, int v2 )","title":"function Add"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/#function-compare","text":"int Qkmaxware::Numerics::IntCalculator::Compare ( int v1, int v2 )","title":"function Compare"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/#function-divide","text":"int Qkmaxware::Numerics::IntCalculator::Divide ( int v1, int v2 )","title":"function Divide"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/#function-multiply","text":"int Qkmaxware::Numerics::IntCalculator::Multiply ( int v1, int v2 )","title":"function Multiply"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/#function-negate","text":"int Qkmaxware::Numerics::IntCalculator::Negate ( int v1 )","title":"function Negate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/#function-subtract","text":"int Qkmaxware::Numerics::IntCalculator::Subtract ( int v1, int v2 )","title":"function Subtract"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_calculator/#function-unit","text":"int Qkmaxware::Numerics::IntCalculator::Unit () The documentation for this class was generated from the following file Numerics/src/ICalculator.cs","title":"function Unit"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_function/","text":"Class Qkmaxware::Numerics::IntFunction Class List > Qkmaxware > Numerics > IntFunction Native integer function Inherits the following classes: Qkmaxware::Numerics::IFunction Public Attributes Type Name ICalculator < int > Calculator = => IntCalculator.Instance Public Functions Type Name int Evaluate (int x) IntFunction (Func< int, int > fn) Public Functions inherited from Qkmaxware::Numerics::IFunction See Qkmaxware::Numerics::IFunction Type Name T Evaluate (T x) Evaluate the function at y = f(x) Public Attributes Documentation variable Calculator ICalculator<int> Qkmaxware.Numerics.IntFunction.Calculator; Public Functions Documentation function Evaluate inline int Qkmaxware::Numerics::IntFunction::Evaluate ( int x ) function IntFunction inline Qkmaxware::Numerics::IntFunction::IntFunction ( Func< int, int > fn ) The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"Class Qkmaxware::Numerics::IntFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_function/#class-qkmaxwarenumericsintfunction","text":"Class List > Qkmaxware > Numerics > IntFunction Native integer function Inherits the following classes: Qkmaxware::Numerics::IFunction","title":"Class Qkmaxware::Numerics::IntFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_function/#public-attributes","text":"Type Name ICalculator < int > Calculator = => IntCalculator.Instance","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_function/#public-functions","text":"Type Name int Evaluate (int x) IntFunction (Func< int, int > fn)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_function/#public-functions-inherited-from-qkmaxwarenumericsifunction","text":"See Qkmaxware::Numerics::IFunction Type Name T Evaluate (T x) Evaluate the function at y = f(x)","title":"Public Functions inherited from Qkmaxware::Numerics::IFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_function/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_function/#variable-calculator","text":"ICalculator<int> Qkmaxware.Numerics.IntFunction.Calculator;","title":"variable Calculator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_function/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_function/#function-evaluate","text":"inline int Qkmaxware::Numerics::IntFunction::Evaluate ( int x )","title":"function Evaluate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_function/#function-intfunction","text":"inline Qkmaxware::Numerics::IntFunction::IntFunction ( Func< int, int > fn ) The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"function IntFunction"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_matrix/","text":"Class Qkmaxware::Numerics::IntMatrix Class List > Qkmaxware > Numerics > IntMatrix Integer matrix Inherits the following classes: Qkmaxware::Numerics::Matrix Public Attributes inherited from Qkmaxware::Numerics::Matrix See Qkmaxware::Numerics::Matrix Type Name int Columns = => elements.GetLength(1) Number of columns int Elements = => elements.Length Number of elements bool IsColumnMatrix = => Columns == 1 Test if the matrix is a column matrix bool IsRowMatrix = => Rows == 1 Test if the matrix is a row matrix bool IsSquare = => Rows == Columns Test if the matrix is square int Rows = => elements.GetLength(0) Number of rows Matrix < T > this[Range rows, int column] = => this[rows Extract a column matrix over the provided rows Matrix < T > this[int row, Range columns] = => this[new Range (new Index(row), new Index(row + 1)) Extract a row matrix over the provided columns T this[int row, int column] = => elements[row Get the element at the given row and column Public Functions Type Name IntMatrix (int rows, int columns) IntMatrix (int elements) Public Functions inherited from Qkmaxware::Numerics::Matrix See Qkmaxware::Numerics::Matrix Type Name Matrix < T > Adjugate () Compute the adjugate matrix Matrix < T > Cofactor () Compute the cofactor matrix LUPSet < T > Decompose () Perform LU Decomposition T Determinant () Compute the determinate of this matrix Matrix < T > Inverse () Compute the inverse of this matrix Matrix < T > Map (Func< T, T > op) Perform element wise operation Matrix < K > Map< K > ( ICalculator < K > calculator, Func< T, K > convert) Convert from one element type to another Matrix ( ICalculator < T > calculator, int rows, int columns) Create a new matrix Matrix ( ICalculator < T > calculator, T elements) Create a new matrix Matrix < T > Minors () Compute the matrix of minors string ToLatexString (string format=\"{0}\") string ToMapleString (string format=\"{0}\") string ToMatlabString (string format=\"{0}\") override string ToString () string ToWolframString (string format=\"{0}\") T Trace () Compute the trace of the matrix Matrix < T > Transpose () Compute the tranposition of this matrix Public Static Functions Type Name implicit operator IntMatrix (int elements) Public Static Functions inherited from Qkmaxware::Numerics::Matrix See Qkmaxware::Numerics::Matrix Type Name void AssertCanMultiply ( Matrix < T > m1, Matrix < T > m2) void AssertSameDimensions ( Matrix < T > m1, Matrix < T > m2) void AssertSquare ( Matrix < T > mtx) void AssertValidColumn ( Matrix < T > m1, int column) void AssertValidRow ( Matrix < T > m1, int row) Matrix < T > Fill ( ICalculator < T > calc, int rows, int columns, T value) Matrix < T > Identity ( ICalculator < T > calc, int rows, int columns) Matrix < T > Operate ( Matrix < T > lhs, Matrix < T > rhs, Func< T, T, T > function) Perform element wise operations Matrix < T > Random ( ICalculator < T > calc, int rows, int columns, IValueGenerator < T > rng) Matrix < T > operator* ( Matrix < T > lhs, T rhs) Scalar multiplication Matrix < T > operator* (T lhs, Matrix < T > rhs) Scalar multiplication Matrix < T > operator* ( Matrix < T > lhs, Matrix < T > rhs) Matrix multiplication Matrix < T > operator+ ( Matrix < T > lhs, Matrix < T > rhs) Matrix addition Matrix < T > operator- ( Matrix < T > lhs, Matrix < T > rhs) Matrix subtraction Matrix < T > operator/ ( Matrix < T > lhs, T rhs) Scalar division Protected Static Functions inherited from Qkmaxware::Numerics::Matrix See Qkmaxware::Numerics::Matrix Type Name void AssertValidColumn (T m1, int column) void AssertValidRow (T m1, int row) Public Functions Documentation function IntMatrix [1/2] inline Qkmaxware::Numerics::IntMatrix::IntMatrix ( int rows, int columns ) function IntMatrix [2/2] inline Qkmaxware::Numerics::IntMatrix::IntMatrix ( int elements ) Public Static Functions Documentation function operator IntMatrix static inline implicit Qkmaxware::Numerics::IntMatrix::operator IntMatrix ( int elements ) The documentation for this class was generated from the following file Numerics/src/Linear Algebra/Matrices.cs","title":"Class Qkmaxware::Numerics::IntMatrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_matrix/#class-qkmaxwarenumericsintmatrix","text":"Class List > Qkmaxware > Numerics > IntMatrix Integer matrix Inherits the following classes: Qkmaxware::Numerics::Matrix","title":"Class Qkmaxware::Numerics::IntMatrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_matrix/#public-attributes-inherited-from-qkmaxwarenumericsmatrix","text":"See Qkmaxware::Numerics::Matrix Type Name int Columns = => elements.GetLength(1) Number of columns int Elements = => elements.Length Number of elements bool IsColumnMatrix = => Columns == 1 Test if the matrix is a column matrix bool IsRowMatrix = => Rows == 1 Test if the matrix is a row matrix bool IsSquare = => Rows == Columns Test if the matrix is square int Rows = => elements.GetLength(0) Number of rows Matrix < T > this[Range rows, int column] = => this[rows Extract a column matrix over the provided rows Matrix < T > this[int row, Range columns] = => this[new Range (new Index(row), new Index(row + 1)) Extract a row matrix over the provided columns T this[int row, int column] = => elements[row Get the element at the given row and column","title":"Public Attributes inherited from Qkmaxware::Numerics::Matrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_matrix/#public-functions","text":"Type Name IntMatrix (int rows, int columns) IntMatrix (int elements)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_matrix/#public-functions-inherited-from-qkmaxwarenumericsmatrix","text":"See Qkmaxware::Numerics::Matrix Type Name Matrix < T > Adjugate () Compute the adjugate matrix Matrix < T > Cofactor () Compute the cofactor matrix LUPSet < T > Decompose () Perform LU Decomposition T Determinant () Compute the determinate of this matrix Matrix < T > Inverse () Compute the inverse of this matrix Matrix < T > Map (Func< T, T > op) Perform element wise operation Matrix < K > Map< K > ( ICalculator < K > calculator, Func< T, K > convert) Convert from one element type to another Matrix ( ICalculator < T > calculator, int rows, int columns) Create a new matrix Matrix ( ICalculator < T > calculator, T elements) Create a new matrix Matrix < T > Minors () Compute the matrix of minors string ToLatexString (string format=\"{0}\") string ToMapleString (string format=\"{0}\") string ToMatlabString (string format=\"{0}\") override string ToString () string ToWolframString (string format=\"{0}\") T Trace () Compute the trace of the matrix Matrix < T > Transpose () Compute the tranposition of this matrix","title":"Public Functions inherited from Qkmaxware::Numerics::Matrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_matrix/#public-static-functions","text":"Type Name implicit operator IntMatrix (int elements)","title":"Public Static Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_matrix/#public-static-functions-inherited-from-qkmaxwarenumericsmatrix","text":"See Qkmaxware::Numerics::Matrix Type Name void AssertCanMultiply ( Matrix < T > m1, Matrix < T > m2) void AssertSameDimensions ( Matrix < T > m1, Matrix < T > m2) void AssertSquare ( Matrix < T > mtx) void AssertValidColumn ( Matrix < T > m1, int column) void AssertValidRow ( Matrix < T > m1, int row) Matrix < T > Fill ( ICalculator < T > calc, int rows, int columns, T value) Matrix < T > Identity ( ICalculator < T > calc, int rows, int columns) Matrix < T > Operate ( Matrix < T > lhs, Matrix < T > rhs, Func< T, T, T > function) Perform element wise operations Matrix < T > Random ( ICalculator < T > calc, int rows, int columns, IValueGenerator < T > rng) Matrix < T > operator* ( Matrix < T > lhs, T rhs) Scalar multiplication Matrix < T > operator* (T lhs, Matrix < T > rhs) Scalar multiplication Matrix < T > operator* ( Matrix < T > lhs, Matrix < T > rhs) Matrix multiplication Matrix < T > operator+ ( Matrix < T > lhs, Matrix < T > rhs) Matrix addition Matrix < T > operator- ( Matrix < T > lhs, Matrix < T > rhs) Matrix subtraction Matrix < T > operator/ ( Matrix < T > lhs, T rhs) Scalar division","title":"Public Static Functions inherited from Qkmaxware::Numerics::Matrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_matrix/#protected-static-functions-inherited-from-qkmaxwarenumericsmatrix","text":"See Qkmaxware::Numerics::Matrix Type Name void AssertValidColumn (T m1, int column) void AssertValidRow (T m1, int row)","title":"Protected Static Functions inherited from Qkmaxware::Numerics::Matrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_matrix/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_matrix/#function-intmatrix-12","text":"inline Qkmaxware::Numerics::IntMatrix::IntMatrix ( int rows, int columns )","title":"function IntMatrix [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_matrix/#function-intmatrix-22","text":"inline Qkmaxware::Numerics::IntMatrix::IntMatrix ( int elements )","title":"function IntMatrix [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_matrix/#public-static-functions-documentation","text":"","title":"Public Static Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_matrix/#function-operator-intmatrix","text":"static inline implicit Qkmaxware::Numerics::IntMatrix::operator IntMatrix ( int elements ) The documentation for this class was generated from the following file Numerics/src/Linear Algebra/Matrices.cs","title":"function operator IntMatrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_range/","text":"Class Qkmaxware::Numerics::IntRange Class List > Qkmaxware > Numerics > IntRange Range of integers Inherits the following classes: Qkmaxware::Numerics::Range Public Functions Type Name IntRange (int start, int end, int increment=1) Public Functions inherited from Qkmaxware::Numerics::Range See Qkmaxware::Numerics::Range Type Name override bool Equals (object obj) override int GetHashCode () Range ( ICalculator < T > calculator, T start, T end, T increment) override string ToString () Range to string Public Static Functions Type Name implicit operator IntRange ( Range range) Convert a system range implicitly to a integer range Public Functions Documentation function IntRange inline Qkmaxware::Numerics::IntRange::IntRange ( int start, int end, int increment=1 ) Public Static Functions Documentation function operator IntRange static inline implicit Qkmaxware::Numerics::IntRange::operator IntRange ( Range range ) Parameters: range range to convert The documentation for this class was generated from the following file Numerics/src/Range.cs","title":"Class Qkmaxware::Numerics::IntRange"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_range/#class-qkmaxwarenumericsintrange","text":"Class List > Qkmaxware > Numerics > IntRange Range of integers Inherits the following classes: Qkmaxware::Numerics::Range","title":"Class Qkmaxware::Numerics::IntRange"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_range/#public-functions","text":"Type Name IntRange (int start, int end, int increment=1)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_range/#public-functions-inherited-from-qkmaxwarenumericsrange","text":"See Qkmaxware::Numerics::Range Type Name override bool Equals (object obj) override int GetHashCode () Range ( ICalculator < T > calculator, T start, T end, T increment) override string ToString () Range to string","title":"Public Functions inherited from Qkmaxware::Numerics::Range"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_range/#public-static-functions","text":"Type Name implicit operator IntRange ( Range range) Convert a system range implicitly to a integer range","title":"Public Static Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_range/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_range/#function-intrange","text":"inline Qkmaxware::Numerics::IntRange::IntRange ( int start, int end, int increment=1 )","title":"function IntRange"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_range/#public-static-functions-documentation","text":"","title":"Public Static Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_int_range/#function-operator-intrange","text":"static inline implicit Qkmaxware::Numerics::IntRange::operator IntRange ( Range range ) Parameters: range range to convert The documentation for this class was generated from the following file Numerics/src/Range.cs","title":"function operator IntRange"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_linear_interpolation/","text":"Class Qkmaxware::Numerics::LinearInterpolation template <T T> Class List > Qkmaxware > Numerics > LinearInterpolation Function interpolated using linear-interpolation Inherits the following classes: Qkmaxware::Numerics::IInterpolator , Qkmaxware::Numerics::ICalculationHelper Public Functions Type Name T Interpolate (T previous, T start, T end, T next, T factor) Interpolate between start and end points LinearInterpolation ( ICalculator < T > calc) Public Functions inherited from Qkmaxware::Numerics::IInterpolator See Qkmaxware::Numerics::IInterpolator Type Name T Interpolate (T previous, T start, T end, T next, T factor) Interpolate between start and end points Public Functions Documentation function Interpolate inline T Qkmaxware::Numerics::LinearInterpolation::Interpolate ( T previous, T start, T end, T next, T factor ) Parameters: previous last value in the queue start range to start interpolating from end range to end interpolating to next next value in the queue factor interpolation factor Returns: interpolate value between start and end Implements Qkmaxware::Numerics::IInterpolator::Interpolate function LinearInterpolation inline Qkmaxware::Numerics::LinearInterpolation::LinearInterpolation ( ICalculator < T > calc ) The documentation for this class was generated from the following file Numerics/src/Function/LinearInterpolation.cs","title":"Class Qkmaxware::Numerics::LinearInterpolation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_linear_interpolation/#class-qkmaxwarenumericslinearinterpolation","text":"template <T T> Class List > Qkmaxware > Numerics > LinearInterpolation Function interpolated using linear-interpolation Inherits the following classes: Qkmaxware::Numerics::IInterpolator , Qkmaxware::Numerics::ICalculationHelper","title":"Class Qkmaxware::Numerics::LinearInterpolation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_linear_interpolation/#public-functions","text":"Type Name T Interpolate (T previous, T start, T end, T next, T factor) Interpolate between start and end points LinearInterpolation ( ICalculator < T > calc)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_linear_interpolation/#public-functions-inherited-from-qkmaxwarenumericsiinterpolator","text":"See Qkmaxware::Numerics::IInterpolator Type Name T Interpolate (T previous, T start, T end, T next, T factor) Interpolate between start and end points","title":"Public Functions inherited from Qkmaxware::Numerics::IInterpolator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_linear_interpolation/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_linear_interpolation/#function-interpolate","text":"inline T Qkmaxware::Numerics::LinearInterpolation::Interpolate ( T previous, T start, T end, T next, T factor ) Parameters: previous last value in the queue start range to start interpolating from end range to end interpolating to next next value in the queue factor interpolation factor Returns: interpolate value between start and end Implements Qkmaxware::Numerics::IInterpolator::Interpolate","title":"function Interpolate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_linear_interpolation/#function-linearinterpolation","text":"inline Qkmaxware::Numerics::LinearInterpolation::LinearInterpolation ( ICalculator < T > calc ) The documentation for this class was generated from the following file Numerics/src/Function/LinearInterpolation.cs","title":"function LinearInterpolation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/","text":"Class Qkmaxware::Numerics::Matrix template <T T> Class List > Qkmaxware > Numerics > Matrix Generic matrix class of type T More... Inherits the following classes: Qkmaxware::Numerics::ICalculationHelper Public Attributes Type Name int Columns = => elements.GetLength(1) Number of columns int Elements = => elements.Length Number of elements bool IsColumnMatrix = => Columns == 1 Test if the matrix is a column matrix bool IsRowMatrix = => Rows == 1 Test if the matrix is a row matrix bool IsSquare = => Rows == Columns Test if the matrix is square int Rows = => elements.GetLength(0) Number of rows Matrix < T > this[Range rows, int column] = => this[rows Extract a column matrix over the provided rows Matrix < T > this[int row, Range columns] = => this[new Range (new Index(row), new Index(row + 1)) Extract a row matrix over the provided columns T this[int row, int column] = => elements[row Get the element at the given row and column Public Functions Type Name Matrix < T > Adjugate () Compute the adjugate matrix Matrix < T > Cofactor () Compute the cofactor matrix LUPSet < T > Decompose () Perform LU Decomposition T Determinant () Compute the determinate of this matrix Matrix < T > Inverse () Compute the inverse of this matrix Matrix < T > Map (Func< T, T > op) Perform element wise operation Matrix < K > Map< K > ( ICalculator < K > calculator, Func< T, K > convert) Convert from one element type to another Matrix ( ICalculator < T > calculator, int rows, int columns) Create a new matrix Matrix ( ICalculator < T > calculator, T elements) Create a new matrix Matrix < T > Minors () Compute the matrix of minors string ToLatexString (string format=\"{0}\") string ToMapleString (string format=\"{0}\") string ToMatlabString (string format=\"{0}\") override string ToString () string ToWolframString (string format=\"{0}\") T Trace () Compute the trace of the matrix Matrix < T > Transpose () Compute the tranposition of this matrix Public Static Functions Type Name void AssertCanMultiply ( Matrix < T > m1, Matrix < T > m2) void AssertSameDimensions ( Matrix < T > m1, Matrix < T > m2) void AssertSquare ( Matrix < T > mtx) void AssertValidColumn ( Matrix < T > m1, int column) void AssertValidRow ( Matrix < T > m1, int row) Matrix < T > Fill ( ICalculator < T > calc, int rows, int columns, T value) Matrix < T > Identity ( ICalculator < T > calc, int rows, int columns) Matrix < T > Operate ( Matrix < T > lhs, Matrix < T > rhs, Func< T, T, T > function) Perform element wise operations Matrix < T > Random ( ICalculator < T > calc, int rows, int columns, IValueGenerator < T > rng) Matrix < T > operator* ( Matrix < T > lhs, T rhs) Scalar multiplication Matrix < T > operator* (T lhs, Matrix < T > rhs) Scalar multiplication Matrix < T > operator* ( Matrix < T > lhs, Matrix < T > rhs) Matrix multiplication Matrix < T > operator+ ( Matrix < T > lhs, Matrix < T > rhs) Matrix addition Matrix < T > operator- ( Matrix < T > lhs, Matrix < T > rhs) Matrix subtraction Matrix < T > operator/ ( Matrix < T > lhs, T rhs) Scalar division Protected Static Functions Type Name void AssertValidColumn (T m1, int column) void AssertValidRow (T m1, int row) Detailed Description Template parameters: T element type Public Attributes Documentation variable Columns int Qkmaxware.Numerics.Matrix< T >.Columns; variable Elements int Qkmaxware.Numerics.Matrix< T >.Elements; variable IsColumnMatrix bool Qkmaxware.Numerics.Matrix< T >.IsColumnMatrix; variable IsRowMatrix bool Qkmaxware.Numerics.Matrix< T >.IsRowMatrix; variable IsSquare bool Qkmaxware.Numerics.Matrix< T >.IsSquare; variable Rows int Qkmaxware.Numerics.Matrix< T >.Rows; variable this[Range rows, int column] Matrix<T> Qkmaxware.Numerics.Matrix< T >.this[Range rows, int column]; variable this[int row, Range columns] Matrix<T> Qkmaxware.Numerics.Matrix< T >.this[int row, Range columns]; variable this[int row, int column] T Qkmaxware.Numerics.Matrix< T >.this[int row, int column]; Public Functions Documentation function Adjugate inline Matrix < T > Qkmaxware::Numerics::Matrix::Adjugate () Returns: adjugate matrix function Cofactor inline Matrix < T > Qkmaxware::Numerics::Matrix::Cofactor () Returns: matrix of cofactors function Decompose inline LUPSet < T > Qkmaxware::Numerics::Matrix::Decompose () Returns: LU decomposition function Determinant inline T Qkmaxware::Numerics::Matrix::Determinant () Returns: determinate function Inverse inline Matrix < T > Qkmaxware::Numerics::Matrix::Inverse () Returns: matrix inverse function Map inline Matrix < T > Qkmaxware::Numerics::Matrix::Map ( Func< T, T > op ) Parameters: op operation Returns: new matrix with altered elements function Map< K > inline Matrix < K > Qkmaxware::Numerics::Matrix::Map< K > ( ICalculator < K > calculator, Func< T, K > convert ) Parameters: calculator calculator for new element arithmetic convert conversion function Template parameters: K new type Returns: new matrix with the new type and the altered elements function Matrix [1/2] inline Qkmaxware::Numerics::Matrix::Matrix ( ICalculator < T > calculator, int rows, int columns ) Parameters: calculator arithmetic calculator for the given type rows number of rows columns number of columns function Matrix [2/2] inline Qkmaxware::Numerics::Matrix::Matrix ( ICalculator < T > calculator, T elements ) Parameters: calculator arithmetic calculator for the given type elements matrix elements function Minors inline Matrix < T > Qkmaxware::Numerics::Matrix::Minors () Returns: matrix of minors function ToLatexString inline string Qkmaxware::Numerics::Matrix::ToLatexString ( string format=\"{0}\" ) function ToMapleString inline string Qkmaxware::Numerics::Matrix::ToMapleString ( string format=\"{0}\" ) function ToMatlabString inline string Qkmaxware::Numerics::Matrix::ToMatlabString ( string format=\"{0}\" ) function ToString inline override string Qkmaxware::Numerics::Matrix::ToString () function ToWolframString inline string Qkmaxware::Numerics::Matrix::ToWolframString ( string format=\"{0}\" ) function Trace inline T Qkmaxware::Numerics::Matrix::Trace () Returns: trace function Transpose inline Matrix < T > Qkmaxware::Numerics::Matrix::Transpose () Returns: transposition of this matrix Public Static Functions Documentation function AssertCanMultiply static inline void Qkmaxware::Numerics::Matrix::AssertCanMultiply ( Matrix < T > m1, Matrix < T > m2 ) function AssertSameDimensions static inline void Qkmaxware::Numerics::Matrix::AssertSameDimensions ( Matrix < T > m1, Matrix < T > m2 ) function AssertSquare static inline void Qkmaxware::Numerics::Matrix::AssertSquare ( Matrix < T > mtx ) function AssertValidColumn [1/2] static inline void Qkmaxware::Numerics::Matrix::AssertValidColumn ( Matrix < T > m1, int column ) function AssertValidRow [1/2] static inline void Qkmaxware::Numerics::Matrix::AssertValidRow ( Matrix < T > m1, int row ) function Fill static inline Matrix < T > Qkmaxware::Numerics::Matrix::Fill ( ICalculator < T > calc, int rows, int columns, T value ) function Identity static inline Matrix < T > Qkmaxware::Numerics::Matrix::Identity ( ICalculator < T > calc, int rows, int columns ) function Operate static inline Matrix < T > Qkmaxware::Numerics::Matrix::Operate ( Matrix < T > lhs, Matrix < T > rhs, Func< T, T, T > function ) Parameters: lhs first matrix rhs second matrix function element wise operation Returns: transformed matrix function Random static inline Matrix < T > Qkmaxware::Numerics::Matrix::Random ( ICalculator < T > calc, int rows, int columns, IValueGenerator < T > rng ) function operator* static inline Matrix < T > Qkmaxware::Numerics::Matrix::operator* ( Matrix < T > lhs, T rhs ) Parameters: lhs first rhs second Returns: element wise multiplication function operator* static inline Matrix < T > Qkmaxware::Numerics::Matrix::operator* ( T lhs, Matrix < T > rhs ) Parameters: lhs first rhs second Returns: element wise multiplication function operator* static inline Matrix < T > Qkmaxware::Numerics::Matrix::operator* ( Matrix < T > lhs, Matrix < T > rhs ) Parameters: lhs first rhs second Returns: matrix multiplication function operator+ static inline Matrix < T > Qkmaxware::Numerics::Matrix::operator+ ( Matrix < T > lhs, Matrix < T > rhs ) Parameters: lhs first rhs second Returns: sum of the matrices function operator- static inline Matrix < T > Qkmaxware::Numerics::Matrix::operator- ( Matrix < T > lhs, Matrix < T > rhs ) Parameters: lhs first rhs second Returns: difference of the matrices function operator/ static inline Matrix < T > Qkmaxware::Numerics::Matrix::operator/ ( Matrix < T > lhs, T rhs ) Parameters: lhs first rhs second Returns: element wise division Protected Static Functions Documentation function AssertValidColumn [2/2] static inline void Qkmaxware::Numerics::Matrix::AssertValidColumn ( T m1, int column ) function AssertValidRow [2/2] static inline void Qkmaxware::Numerics::Matrix::AssertValidRow ( T m1, int row ) The documentation for this class was generated from the following file Numerics/src/Linear Algebra/Matrix.cs","title":"Class Qkmaxware::Numerics::Matrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#class-qkmaxwarenumericsmatrix","text":"template <T T> Class List > Qkmaxware > Numerics > Matrix Generic matrix class of type T More... Inherits the following classes: Qkmaxware::Numerics::ICalculationHelper","title":"Class Qkmaxware::Numerics::Matrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#public-attributes","text":"Type Name int Columns = => elements.GetLength(1) Number of columns int Elements = => elements.Length Number of elements bool IsColumnMatrix = => Columns == 1 Test if the matrix is a column matrix bool IsRowMatrix = => Rows == 1 Test if the matrix is a row matrix bool IsSquare = => Rows == Columns Test if the matrix is square int Rows = => elements.GetLength(0) Number of rows Matrix < T > this[Range rows, int column] = => this[rows Extract a column matrix over the provided rows Matrix < T > this[int row, Range columns] = => this[new Range (new Index(row), new Index(row + 1)) Extract a row matrix over the provided columns T this[int row, int column] = => elements[row Get the element at the given row and column","title":"Public Attributes"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#public-functions","text":"Type Name Matrix < T > Adjugate () Compute the adjugate matrix Matrix < T > Cofactor () Compute the cofactor matrix LUPSet < T > Decompose () Perform LU Decomposition T Determinant () Compute the determinate of this matrix Matrix < T > Inverse () Compute the inverse of this matrix Matrix < T > Map (Func< T, T > op) Perform element wise operation Matrix < K > Map< K > ( ICalculator < K > calculator, Func< T, K > convert) Convert from one element type to another Matrix ( ICalculator < T > calculator, int rows, int columns) Create a new matrix Matrix ( ICalculator < T > calculator, T elements) Create a new matrix Matrix < T > Minors () Compute the matrix of minors string ToLatexString (string format=\"{0}\") string ToMapleString (string format=\"{0}\") string ToMatlabString (string format=\"{0}\") override string ToString () string ToWolframString (string format=\"{0}\") T Trace () Compute the trace of the matrix Matrix < T > Transpose () Compute the tranposition of this matrix","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#public-static-functions","text":"Type Name void AssertCanMultiply ( Matrix < T > m1, Matrix < T > m2) void AssertSameDimensions ( Matrix < T > m1, Matrix < T > m2) void AssertSquare ( Matrix < T > mtx) void AssertValidColumn ( Matrix < T > m1, int column) void AssertValidRow ( Matrix < T > m1, int row) Matrix < T > Fill ( ICalculator < T > calc, int rows, int columns, T value) Matrix < T > Identity ( ICalculator < T > calc, int rows, int columns) Matrix < T > Operate ( Matrix < T > lhs, Matrix < T > rhs, Func< T, T, T > function) Perform element wise operations Matrix < T > Random ( ICalculator < T > calc, int rows, int columns, IValueGenerator < T > rng) Matrix < T > operator* ( Matrix < T > lhs, T rhs) Scalar multiplication Matrix < T > operator* (T lhs, Matrix < T > rhs) Scalar multiplication Matrix < T > operator* ( Matrix < T > lhs, Matrix < T > rhs) Matrix multiplication Matrix < T > operator+ ( Matrix < T > lhs, Matrix < T > rhs) Matrix addition Matrix < T > operator- ( Matrix < T > lhs, Matrix < T > rhs) Matrix subtraction Matrix < T > operator/ ( Matrix < T > lhs, T rhs) Scalar division","title":"Public Static Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#protected-static-functions","text":"Type Name void AssertValidColumn (T m1, int column) void AssertValidRow (T m1, int row)","title":"Protected Static Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#detailed-description","text":"Template parameters: T element type","title":"Detailed Description"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#variable-columns","text":"int Qkmaxware.Numerics.Matrix< T >.Columns;","title":"variable Columns"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#variable-elements","text":"int Qkmaxware.Numerics.Matrix< T >.Elements;","title":"variable Elements"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#variable-iscolumnmatrix","text":"bool Qkmaxware.Numerics.Matrix< T >.IsColumnMatrix;","title":"variable IsColumnMatrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#variable-isrowmatrix","text":"bool Qkmaxware.Numerics.Matrix< T >.IsRowMatrix;","title":"variable IsRowMatrix"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#variable-issquare","text":"bool Qkmaxware.Numerics.Matrix< T >.IsSquare;","title":"variable IsSquare"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#variable-rows","text":"int Qkmaxware.Numerics.Matrix< T >.Rows;","title":"variable Rows"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#variable-thisrange-rows-int-column","text":"Matrix<T> Qkmaxware.Numerics.Matrix< T >.this[Range rows, int column];","title":"variable this[Range rows, int column]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#variable-thisint-row-range-columns","text":"Matrix<T> Qkmaxware.Numerics.Matrix< T >.this[int row, Range columns];","title":"variable this[int row, Range columns]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#variable-thisint-row-int-column","text":"T Qkmaxware.Numerics.Matrix< T >.this[int row, int column];","title":"variable this[int row, int column]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-adjugate","text":"inline Matrix < T > Qkmaxware::Numerics::Matrix::Adjugate () Returns: adjugate matrix","title":"function Adjugate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-cofactor","text":"inline Matrix < T > Qkmaxware::Numerics::Matrix::Cofactor () Returns: matrix of cofactors","title":"function Cofactor"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-decompose","text":"inline LUPSet < T > Qkmaxware::Numerics::Matrix::Decompose () Returns: LU decomposition","title":"function Decompose"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-determinant","text":"inline T Qkmaxware::Numerics::Matrix::Determinant () Returns: determinate","title":"function Determinant"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-inverse","text":"inline Matrix < T > Qkmaxware::Numerics::Matrix::Inverse () Returns: matrix inverse","title":"function Inverse"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-map","text":"inline Matrix < T > Qkmaxware::Numerics::Matrix::Map ( Func< T, T > op ) Parameters: op operation Returns: new matrix with altered elements","title":"function Map"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-map-k","text":"inline Matrix < K > Qkmaxware::Numerics::Matrix::Map< K > ( ICalculator < K > calculator, Func< T, K > convert ) Parameters: calculator calculator for new element arithmetic convert conversion function Template parameters: K new type Returns: new matrix with the new type and the altered elements","title":"function Map&lt; K &gt;"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-matrix-12","text":"inline Qkmaxware::Numerics::Matrix::Matrix ( ICalculator < T > calculator, int rows, int columns ) Parameters: calculator arithmetic calculator for the given type rows number of rows columns number of columns","title":"function Matrix [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-matrix-22","text":"inline Qkmaxware::Numerics::Matrix::Matrix ( ICalculator < T > calculator, T elements ) Parameters: calculator arithmetic calculator for the given type elements matrix elements","title":"function Matrix [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-minors","text":"inline Matrix < T > Qkmaxware::Numerics::Matrix::Minors () Returns: matrix of minors","title":"function Minors"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-tolatexstring","text":"inline string Qkmaxware::Numerics::Matrix::ToLatexString ( string format=\"{0}\" )","title":"function ToLatexString"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-tomaplestring","text":"inline string Qkmaxware::Numerics::Matrix::ToMapleString ( string format=\"{0}\" )","title":"function ToMapleString"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-tomatlabstring","text":"inline string Qkmaxware::Numerics::Matrix::ToMatlabString ( string format=\"{0}\" )","title":"function ToMatlabString"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-tostring","text":"inline override string Qkmaxware::Numerics::Matrix::ToString ()","title":"function ToString"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-towolframstring","text":"inline string Qkmaxware::Numerics::Matrix::ToWolframString ( string format=\"{0}\" )","title":"function ToWolframString"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-trace","text":"inline T Qkmaxware::Numerics::Matrix::Trace () Returns: trace","title":"function Trace"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-transpose","text":"inline Matrix < T > Qkmaxware::Numerics::Matrix::Transpose () Returns: transposition of this matrix","title":"function Transpose"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#public-static-functions-documentation","text":"","title":"Public Static Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-assertcanmultiply","text":"static inline void Qkmaxware::Numerics::Matrix::AssertCanMultiply ( Matrix < T > m1, Matrix < T > m2 )","title":"function AssertCanMultiply"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-assertsamedimensions","text":"static inline void Qkmaxware::Numerics::Matrix::AssertSameDimensions ( Matrix < T > m1, Matrix < T > m2 )","title":"function AssertSameDimensions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-assertsquare","text":"static inline void Qkmaxware::Numerics::Matrix::AssertSquare ( Matrix < T > mtx )","title":"function AssertSquare"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-assertvalidcolumn-12","text":"static inline void Qkmaxware::Numerics::Matrix::AssertValidColumn ( Matrix < T > m1, int column )","title":"function AssertValidColumn [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-assertvalidrow-12","text":"static inline void Qkmaxware::Numerics::Matrix::AssertValidRow ( Matrix < T > m1, int row )","title":"function AssertValidRow [1/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-fill","text":"static inline Matrix < T > Qkmaxware::Numerics::Matrix::Fill ( ICalculator < T > calc, int rows, int columns, T value )","title":"function Fill"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-identity","text":"static inline Matrix < T > Qkmaxware::Numerics::Matrix::Identity ( ICalculator < T > calc, int rows, int columns )","title":"function Identity"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-operate","text":"static inline Matrix < T > Qkmaxware::Numerics::Matrix::Operate ( Matrix < T > lhs, Matrix < T > rhs, Func< T, T, T > function ) Parameters: lhs first matrix rhs second matrix function element wise operation Returns: transformed matrix","title":"function Operate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-random","text":"static inline Matrix < T > Qkmaxware::Numerics::Matrix::Random ( ICalculator < T > calc, int rows, int columns, IValueGenerator < T > rng )","title":"function Random"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-operator","text":"static inline Matrix < T > Qkmaxware::Numerics::Matrix::operator* ( Matrix < T > lhs, T rhs ) Parameters: lhs first rhs second Returns: element wise multiplication","title":"function operator*"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-operator_1","text":"static inline Matrix < T > Qkmaxware::Numerics::Matrix::operator* ( T lhs, Matrix < T > rhs ) Parameters: lhs first rhs second Returns: element wise multiplication","title":"function operator*"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-operator_2","text":"static inline Matrix < T > Qkmaxware::Numerics::Matrix::operator* ( Matrix < T > lhs, Matrix < T > rhs ) Parameters: lhs first rhs second Returns: matrix multiplication","title":"function operator*"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-operator_3","text":"static inline Matrix < T > Qkmaxware::Numerics::Matrix::operator+ ( Matrix < T > lhs, Matrix < T > rhs ) Parameters: lhs first rhs second Returns: sum of the matrices","title":"function operator+"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-operator-","text":"static inline Matrix < T > Qkmaxware::Numerics::Matrix::operator- ( Matrix < T > lhs, Matrix < T > rhs ) Parameters: lhs first rhs second Returns: difference of the matrices","title":"function operator-"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-operator_4","text":"static inline Matrix < T > Qkmaxware::Numerics::Matrix::operator/ ( Matrix < T > lhs, T rhs ) Parameters: lhs first rhs second Returns: element wise division","title":"function operator/"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#protected-static-functions-documentation","text":"","title":"Protected Static Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-assertvalidcolumn-22","text":"static inline void Qkmaxware::Numerics::Matrix::AssertValidColumn ( T m1, int column )","title":"function AssertValidColumn [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_matrix/#function-assertvalidrow-22","text":"static inline void Qkmaxware::Numerics::Matrix::AssertValidRow ( T m1, int row ) The documentation for this class was generated from the following file Numerics/src/Linear Algebra/Matrix.cs","title":"function AssertValidRow [2/2]"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_point2/","text":"Class Qkmaxware::Numerics::Point2 template <T T> Class List > Qkmaxware > Numerics > Point2 X,Y Coordinate pair More... Public Functions Type Name Point2 (T x, T y) Create a new coordinate pair Detailed Description Template parameters: T type of coordinate Public Functions Documentation function Point2 inline Qkmaxware::Numerics::Point2::Point2 ( T x, T y ) Parameters: x x coordinate y y coordinate The documentation for this class was generated from the following file Numerics/src/Point2.cs","title":"Class Qkmaxware::Numerics::Point2"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_point2/#class-qkmaxwarenumericspoint2","text":"template <T T> Class List > Qkmaxware > Numerics > Point2 X,Y Coordinate pair More...","title":"Class Qkmaxware::Numerics::Point2"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_point2/#public-functions","text":"Type Name Point2 (T x, T y) Create a new coordinate pair","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_point2/#detailed-description","text":"Template parameters: T type of coordinate","title":"Detailed Description"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_point2/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_point2/#function-point2","text":"inline Qkmaxware::Numerics::Point2::Point2 ( T x, T y ) Parameters: x x coordinate y y coordinate The documentation for this class was generated from the following file Numerics/src/Point2.cs","title":"function Point2"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_range/","text":"Class Qkmaxware::Numerics::Range template <T T> Class List > Qkmaxware > Numerics > Range Generic range of values More... Inherits the following classes: Qkmaxware::Numerics::ICalculationHelper Public Functions Type Name override bool Equals (object obj) override int GetHashCode () Range ( ICalculator < T > calculator, T start, T end, T increment) override string ToString () Range to string Detailed Description Template parameters: T numeric type Public Functions Documentation function Equals inline override bool Qkmaxware::Numerics::Range::Equals ( object obj ) function GetHashCode inline override int Qkmaxware::Numerics::Range::GetHashCode () function Range inline Qkmaxware::Numerics::Range::Range ( ICalculator < T > calculator, T start, T end, T increment ) function ToString inline override string Qkmaxware::Numerics::Range::ToString () The documentation for this class was generated from the following file Numerics/src/Range.cs","title":"Class Qkmaxware::Numerics::Range"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_range/#class-qkmaxwarenumericsrange","text":"template <T T> Class List > Qkmaxware > Numerics > Range Generic range of values More... Inherits the following classes: Qkmaxware::Numerics::ICalculationHelper","title":"Class Qkmaxware::Numerics::Range"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_range/#public-functions","text":"Type Name override bool Equals (object obj) override int GetHashCode () Range ( ICalculator < T > calculator, T start, T end, T increment) override string ToString () Range to string","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_range/#detailed-description","text":"Template parameters: T numeric type","title":"Detailed Description"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_range/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_range/#function-equals","text":"inline override bool Qkmaxware::Numerics::Range::Equals ( object obj )","title":"function Equals"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_range/#function-gethashcode","text":"inline override int Qkmaxware::Numerics::Range::GetHashCode ()","title":"function GetHashCode"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_range/#function-range","text":"inline Qkmaxware::Numerics::Range::Range ( ICalculator < T > calculator, T start, T end, T increment )","title":"function Range"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_range/#function-tostring","text":"inline override string Qkmaxware::Numerics::Range::ToString () The documentation for this class was generated from the following file Numerics/src/Range.cs","title":"function ToString"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_runge_kutta_ivp_solver/","text":"Class Qkmaxware::Numerics::RungeKuttaIvpSolver Class List > Qkmaxware > Numerics > RungeKuttaIvpSolver Solve initial value problems with Fourth Order Runge-Kutta method Inherits the following classes: Qkmaxware::Numerics::IIvpSolver Public Functions Type Name IFunction < double > Solve ( IFunction2 < double > f, Range < double > tRange, double y0) Solve the initial value problem where y` = f(t, y), a <= t <= b, y(a) = y0 Public Functions inherited from Qkmaxware::Numerics::IIvpSolver See Qkmaxware::Numerics::IIvpSolver Type Name IFunction < T > Solve ( IFunction2 < T > expr, Range < T > tRange, T y0) Solve the initial value problem where y` = f(t, y), a <= t <= b, y(a) = y0 Public Functions Documentation function Solve inline IFunction < double > Qkmaxware::Numerics::RungeKuttaIvpSolver::Solve ( IFunction2 < double > f, Range < double > tRange, double y0 ) Parameters: f function of two arguments (t,y) tRange range (a,b) of values for t y0 value of y at a Returns: approximation for the function y The documentation for this class was generated from the following file Numerics/src/Ode/RungeKuttaIvpSolver.cs","title":"Class Qkmaxware::Numerics::RungeKuttaIvpSolver"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_runge_kutta_ivp_solver/#class-qkmaxwarenumericsrungekuttaivpsolver","text":"Class List > Qkmaxware > Numerics > RungeKuttaIvpSolver Solve initial value problems with Fourth Order Runge-Kutta method Inherits the following classes: Qkmaxware::Numerics::IIvpSolver","title":"Class Qkmaxware::Numerics::RungeKuttaIvpSolver"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_runge_kutta_ivp_solver/#public-functions","text":"Type Name IFunction < double > Solve ( IFunction2 < double > f, Range < double > tRange, double y0) Solve the initial value problem where y` = f(t, y), a <= t <= b, y(a) = y0","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_runge_kutta_ivp_solver/#public-functions-inherited-from-qkmaxwarenumericsiivpsolver","text":"See Qkmaxware::Numerics::IIvpSolver Type Name IFunction < T > Solve ( IFunction2 < T > expr, Range < T > tRange, T y0) Solve the initial value problem where y` = f(t, y), a <= t <= b, y(a) = y0","title":"Public Functions inherited from Qkmaxware::Numerics::IIvpSolver"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_runge_kutta_ivp_solver/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_runge_kutta_ivp_solver/#function-solve","text":"inline IFunction < double > Qkmaxware::Numerics::RungeKuttaIvpSolver::Solve ( IFunction2 < double > f, Range < double > tRange, double y0 ) Parameters: f function of two arguments (t,y) tRange range (a,b) of values for t y0 value of y at a Returns: approximation for the function y The documentation for this class was generated from the following file Numerics/src/Ode/RungeKuttaIvpSolver.cs","title":"function Solve"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_adaptive_quadrature_integrator/","text":"Class Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator Class List > Qkmaxware > Numerics > SimpsonAdaptiveQuadratureIntegrator Adaptive quadrature integration using Simpson's method Inherits the following classes: Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator Public Functions Type Name SimpsonAdaptiveQuadratureIntegrator (double tolerance=0.01, int maxDepth=100) Public Functions inherited from Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator See Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator Type Name BaseAdaptiveQuadratureIntegrator (double tolerance=0.01, int maxDepth=100) double Integrate ( IFunction < double > fx, Range < double > range) Public Functions inherited from Qkmaxware::Numerics::IDefiniteIntegrator See Qkmaxware::Numerics::IDefiniteIntegrator Type Name T Integrate ( IFunction < T > fx, Range < T > range) Integrate the given function between the range Protected Functions Type Name virtual override double EstimateIntegralOver ( IFunction < double > fx, double x0, double x2) Estimate the integral of the function between the two endpoints virtual override bool IsErrorLargerThanTolerance ( IFunction < double > fx, double estimate, double x0, double x2) Check if the error of an estimated area is less than the desired tolerance Protected Functions inherited from Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator See Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator Type Name virtual abstract double EstimateIntegralOver ( IFunction < double > fx, double x0, double x2) = 0 Estimate the integral of the function between the two endpoints virtual abstract bool IsErrorLargerThanTolerance ( IFunction < double > fx, double estimate, double x0, double x2) = 0 Check if the error of an estimated area is less than the desired tolerance Public Functions Documentation function SimpsonAdaptiveQuadratureIntegrator inline Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator::SimpsonAdaptiveQuadratureIntegrator ( double tolerance=0.01, int maxDepth=100 ) Protected Functions Documentation function EstimateIntegralOver inline virtual override double Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator::EstimateIntegralOver ( IFunction < double > fx, double x0, double x2 ) Parameters: fx function to integrate x0 start point x2 end point Returns: estimated area Implements Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator::EstimateIntegralOver function IsErrorLargerThanTolerance inline virtual override bool Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator::IsErrorLargerThanTolerance ( IFunction < double > fx, double estimate, double x0, double x2 ) Parameters: fx function estimate integral estimate x0 start range x2 end range Returns: true if the error is larger than the tolerance; false otherwise Implements Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator::IsErrorLargerThanTolerance The documentation for this class was generated from the following file Numerics/src/Integration/AdaptiveQuadratureIntegrator.cs","title":"Class Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_adaptive_quadrature_integrator/#class-qkmaxwarenumericssimpsonadaptivequadratureintegrator","text":"Class List > Qkmaxware > Numerics > SimpsonAdaptiveQuadratureIntegrator Adaptive quadrature integration using Simpson's method Inherits the following classes: Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator","title":"Class Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_adaptive_quadrature_integrator/#public-functions","text":"Type Name SimpsonAdaptiveQuadratureIntegrator (double tolerance=0.01, int maxDepth=100)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_adaptive_quadrature_integrator/#public-functions-inherited-from-qkmaxwarenumericsbaseadaptivequadratureintegrator","text":"See Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator Type Name BaseAdaptiveQuadratureIntegrator (double tolerance=0.01, int maxDepth=100) double Integrate ( IFunction < double > fx, Range < double > range)","title":"Public Functions inherited from Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_adaptive_quadrature_integrator/#public-functions-inherited-from-qkmaxwarenumericsidefiniteintegrator","text":"See Qkmaxware::Numerics::IDefiniteIntegrator Type Name T Integrate ( IFunction < T > fx, Range < T > range) Integrate the given function between the range","title":"Public Functions inherited from Qkmaxware::Numerics::IDefiniteIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_adaptive_quadrature_integrator/#protected-functions","text":"Type Name virtual override double EstimateIntegralOver ( IFunction < double > fx, double x0, double x2) Estimate the integral of the function between the two endpoints virtual override bool IsErrorLargerThanTolerance ( IFunction < double > fx, double estimate, double x0, double x2) Check if the error of an estimated area is less than the desired tolerance","title":"Protected Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_adaptive_quadrature_integrator/#protected-functions-inherited-from-qkmaxwarenumericsbaseadaptivequadratureintegrator","text":"See Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator Type Name virtual abstract double EstimateIntegralOver ( IFunction < double > fx, double x0, double x2) = 0 Estimate the integral of the function between the two endpoints virtual abstract bool IsErrorLargerThanTolerance ( IFunction < double > fx, double estimate, double x0, double x2) = 0 Check if the error of an estimated area is less than the desired tolerance","title":"Protected Functions inherited from Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_adaptive_quadrature_integrator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_adaptive_quadrature_integrator/#function-simpsonadaptivequadratureintegrator","text":"inline Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator::SimpsonAdaptiveQuadratureIntegrator ( double tolerance=0.01, int maxDepth=100 )","title":"function SimpsonAdaptiveQuadratureIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_adaptive_quadrature_integrator/#protected-functions-documentation","text":"","title":"Protected Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_adaptive_quadrature_integrator/#function-estimateintegralover","text":"inline virtual override double Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator::EstimateIntegralOver ( IFunction < double > fx, double x0, double x2 ) Parameters: fx function to integrate x0 start point x2 end point Returns: estimated area Implements Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator::EstimateIntegralOver","title":"function EstimateIntegralOver"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_adaptive_quadrature_integrator/#function-iserrorlargerthantolerance","text":"inline virtual override bool Qkmaxware::Numerics::SimpsonAdaptiveQuadratureIntegrator::IsErrorLargerThanTolerance ( IFunction < double > fx, double estimate, double x0, double x2 ) Parameters: fx function estimate integral estimate x0 start range x2 end range Returns: true if the error is larger than the tolerance; false otherwise Implements Qkmaxware::Numerics::BaseAdaptiveQuadratureIntegrator::IsErrorLargerThanTolerance The documentation for this class was generated from the following file Numerics/src/Integration/AdaptiveQuadratureIntegrator.cs","title":"function IsErrorLargerThanTolerance"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_integrator/","text":"Class Qkmaxware::Numerics::SimpsonIntegrator Class List > Qkmaxware > Numerics > SimpsonIntegrator Integration using Simpson's method Inherits the following classes: Qkmaxware::Numerics::IDefiniteIntegrator Public Functions Type Name double Integrate ( IFunction < double > fx, Range < double > range) Public Functions inherited from Qkmaxware::Numerics::IDefiniteIntegrator See Qkmaxware::Numerics::IDefiniteIntegrator Type Name T Integrate ( IFunction < T > fx, Range < T > range) Integrate the given function between the range Public Functions Documentation function Integrate inline double Qkmaxware::Numerics::SimpsonIntegrator::Integrate ( IFunction < double > fx, Range < double > range ) The documentation for this class was generated from the following file Numerics/src/Integration/SimpsonIntegrator.cs","title":"Class Qkmaxware::Numerics::SimpsonIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_integrator/#class-qkmaxwarenumericssimpsonintegrator","text":"Class List > Qkmaxware > Numerics > SimpsonIntegrator Integration using Simpson's method Inherits the following classes: Qkmaxware::Numerics::IDefiniteIntegrator","title":"Class Qkmaxware::Numerics::SimpsonIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_integrator/#public-functions","text":"Type Name double Integrate ( IFunction < double > fx, Range < double > range)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_integrator/#public-functions-inherited-from-qkmaxwarenumericsidefiniteintegrator","text":"See Qkmaxware::Numerics::IDefiniteIntegrator Type Name T Integrate ( IFunction < T > fx, Range < T > range) Integrate the given function between the range","title":"Public Functions inherited from Qkmaxware::Numerics::IDefiniteIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_integrator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_simpson_integrator/#function-integrate","text":"inline double Qkmaxware::Numerics::SimpsonIntegrator::Integrate ( IFunction < double > fx, Range < double > range ) The documentation for this class was generated from the following file Numerics/src/Integration/SimpsonIntegrator.cs","title":"function Integrate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_smoothstep_interpolation/","text":"Class Qkmaxware::Numerics::SmoothstepInterpolation Class List > Qkmaxware > Numerics > SmoothstepInterpolation Function interpolated using smoothstep Inherits the following classes: Qkmaxware::Numerics::IInterpolator Public Functions Type Name double Interpolate (double last, double start, double end, double next, double t) Public Functions inherited from Qkmaxware::Numerics::IInterpolator See Qkmaxware::Numerics::IInterpolator Type Name T Interpolate (T previous, T start, T end, T next, T factor) Interpolate between start and end points Public Functions Documentation function Interpolate inline double Qkmaxware::Numerics::SmoothstepInterpolation::Interpolate ( double last, double start, double end, double next, double t ) The documentation for this class was generated from the following file Numerics/src/Function/SmoothstepInterpolation.cs","title":"Class Qkmaxware::Numerics::SmoothstepInterpolation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_smoothstep_interpolation/#class-qkmaxwarenumericssmoothstepinterpolation","text":"Class List > Qkmaxware > Numerics > SmoothstepInterpolation Function interpolated using smoothstep Inherits the following classes: Qkmaxware::Numerics::IInterpolator","title":"Class Qkmaxware::Numerics::SmoothstepInterpolation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_smoothstep_interpolation/#public-functions","text":"Type Name double Interpolate (double last, double start, double end, double next, double t)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_smoothstep_interpolation/#public-functions-inherited-from-qkmaxwarenumericsiinterpolator","text":"See Qkmaxware::Numerics::IInterpolator Type Name T Interpolate (T previous, T start, T end, T next, T factor) Interpolate between start and end points","title":"Public Functions inherited from Qkmaxware::Numerics::IInterpolator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_smoothstep_interpolation/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_smoothstep_interpolation/#function-interpolate","text":"inline double Qkmaxware::Numerics::SmoothstepInterpolation::Interpolate ( double last, double start, double end, double next, double t ) The documentation for this class was generated from the following file Numerics/src/Function/SmoothstepInterpolation.cs","title":"function Interpolate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_step_interpolation/","text":"Class Qkmaxware::Numerics::StepInterpolation Class List > Qkmaxware > Numerics > StepInterpolation Function interpolated using stepped-interpolation Inherits the following classes: Qkmaxware::Numerics::IInterpolator Public Functions Type Name double Interpolate (double last, double start, double end, double next, double t) StepInterpolation () Public Functions inherited from Qkmaxware::Numerics::IInterpolator See Qkmaxware::Numerics::IInterpolator Type Name T Interpolate (T previous, T start, T end, T next, T factor) Interpolate between start and end points Public Functions Documentation function Interpolate inline double Qkmaxware::Numerics::StepInterpolation::Interpolate ( double last, double start, double end, double next, double t ) function StepInterpolation inline Qkmaxware::Numerics::StepInterpolation::StepInterpolation () The documentation for this class was generated from the following file Numerics/src/Function/StepInterpolation.cs","title":"Class Qkmaxware::Numerics::StepInterpolation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_step_interpolation/#class-qkmaxwarenumericsstepinterpolation","text":"Class List > Qkmaxware > Numerics > StepInterpolation Function interpolated using stepped-interpolation Inherits the following classes: Qkmaxware::Numerics::IInterpolator","title":"Class Qkmaxware::Numerics::StepInterpolation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_step_interpolation/#public-functions","text":"Type Name double Interpolate (double last, double start, double end, double next, double t) StepInterpolation ()","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_step_interpolation/#public-functions-inherited-from-qkmaxwarenumericsiinterpolator","text":"See Qkmaxware::Numerics::IInterpolator Type Name T Interpolate (T previous, T start, T end, T next, T factor) Interpolate between start and end points","title":"Public Functions inherited from Qkmaxware::Numerics::IInterpolator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_step_interpolation/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_step_interpolation/#function-interpolate","text":"inline double Qkmaxware::Numerics::StepInterpolation::Interpolate ( double last, double start, double end, double next, double t )","title":"function Interpolate"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_step_interpolation/#function-stepinterpolation","text":"inline Qkmaxware::Numerics::StepInterpolation::StepInterpolation () The documentation for this class was generated from the following file Numerics/src/Function/StepInterpolation.cs","title":"function StepInterpolation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_trapezoidal_integrator/","text":"Class Qkmaxware::Numerics::TrapezoidalIntegrator Class List > Qkmaxware > Numerics > TrapezoidalIntegrator Integration using the trapezoidal rule Inherits the following classes: Qkmaxware::Numerics::IDefiniteIntegrator Public Functions Type Name double Integrate ( IFunction < double > fx, Range < double > range) Public Functions inherited from Qkmaxware::Numerics::IDefiniteIntegrator See Qkmaxware::Numerics::IDefiniteIntegrator Type Name T Integrate ( IFunction < T > fx, Range < T > range) Integrate the given function between the range Public Functions Documentation function Integrate inline double Qkmaxware::Numerics::TrapezoidalIntegrator::Integrate ( IFunction < double > fx, Range < double > range ) The documentation for this class was generated from the following file Numerics/src/Integration/TrapezoidalIntegrator.cs","title":"Class Qkmaxware::Numerics::TrapezoidalIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_trapezoidal_integrator/#class-qkmaxwarenumericstrapezoidalintegrator","text":"Class List > Qkmaxware > Numerics > TrapezoidalIntegrator Integration using the trapezoidal rule Inherits the following classes: Qkmaxware::Numerics::IDefiniteIntegrator","title":"Class Qkmaxware::Numerics::TrapezoidalIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_trapezoidal_integrator/#public-functions","text":"Type Name double Integrate ( IFunction < double > fx, Range < double > range)","title":"Public Functions"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_trapezoidal_integrator/#public-functions-inherited-from-qkmaxwarenumericsidefiniteintegrator","text":"See Qkmaxware::Numerics::IDefiniteIntegrator Type Name T Integrate ( IFunction < T > fx, Range < T > range) Integrate the given function between the range","title":"Public Functions inherited from Qkmaxware::Numerics::IDefiniteIntegrator"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_trapezoidal_integrator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/class_qkmaxware_1_1_numerics_1_1_trapezoidal_integrator/#function-integrate","text":"inline double Qkmaxware::Numerics::TrapezoidalIntegrator::Integrate ( IFunction < double > fx, Range < double > range ) The documentation for this class was generated from the following file Numerics/src/Integration/TrapezoidalIntegrator.cs","title":"function Integrate"},{"location":"doxygen/classes/","text":"Class Index b BaseAdaptiveQuadratureIntegrator ( Qkmaxware::Numerics ) BaseInterpolatedFunction ( Qkmaxware::Numerics ) c CentredFivePointDifferentiator ( Qkmaxware::Numerics ) CentredThreePointDifferentiator ( Qkmaxware::Numerics ) ComplexCalculator ( Qkmaxware::Numerics ) ComplexExtensions ( Qkmaxware::Numerics ) ComplexFunction ( Qkmaxware::Numerics ) ComplexMatrix ( Qkmaxware::Numerics ) CosineInterpolation ( Qkmaxware::Numerics ) CubicInterpolation ( Qkmaxware::Numerics ) d DimensionMismatchException ( Qkmaxware::Numerics ) DoubleCalculator ( Qkmaxware::Numerics ) DoubleFunction ( Qkmaxware::Numerics ) DoubleFunction2 ( Qkmaxware::Numerics ) DoubleInterpolatedFunction ( Qkmaxware::Numerics ) DoubleMatrix ( Qkmaxware::Numerics ) DoubleRange ( Qkmaxware::Numerics ) e EndpointFivePointDifferentiator ( Qkmaxware::Numerics ) EndpointThreePointDifferentiator ( Qkmaxware::Numerics ) EulerIvpSolver ( Qkmaxware::Numerics ) i IntCalculator ( Qkmaxware::Numerics ) IntFunction ( Qkmaxware::Numerics ) IntMatrix ( Qkmaxware::Numerics ) IntRange ( Qkmaxware::Numerics ) ICalculationHelper ( Qkmaxware::Numerics ) ICalculator ( Qkmaxware::Numerics ) IDefiniteIntegrator ( Qkmaxware::Numerics ) IFunction ( Qkmaxware::Numerics ) IFunction2 ( Qkmaxware::Numerics ) IFunction3 ( Qkmaxware::Numerics ) IFunction4 ( Qkmaxware::Numerics ) IIndefiniteIntegrator ( Qkmaxware::Numerics ) IInterpolatedFunction ( Qkmaxware::Numerics ) IInterpolator ( Qkmaxware::Numerics ) IIvpSolver ( Qkmaxware::Numerics ) INumericDifferentiator ( Qkmaxware::Numerics ) IValueGenerator ( Qkmaxware::Numerics ) l LinearInterpolation ( Qkmaxware::Numerics ) LUPSet ( Qkmaxware::Numerics ) m Matrix ( Qkmaxware::Numerics ) p Point2 ( Qkmaxware::Numerics ) r Range ( Qkmaxware::Numerics ) RungeKuttaIvpSolver ( Qkmaxware::Numerics ) s SimpsonAdaptiveQuadratureIntegrator ( Qkmaxware::Numerics ) SimpsonIntegrator ( Qkmaxware::Numerics ) SmoothstepInterpolation ( Qkmaxware::Numerics ) StepInterpolation ( Qkmaxware::Numerics ) t TrapezoidalIntegrator ( Qkmaxware::Numerics )","title":"Class Index"},{"location":"doxygen/classes/#class-index","text":"","title":"Class Index"},{"location":"doxygen/classes/#b","text":"BaseAdaptiveQuadratureIntegrator ( Qkmaxware::Numerics ) BaseInterpolatedFunction ( Qkmaxware::Numerics )","title":"b"},{"location":"doxygen/classes/#c","text":"CentredFivePointDifferentiator ( Qkmaxware::Numerics ) CentredThreePointDifferentiator ( Qkmaxware::Numerics ) ComplexCalculator ( Qkmaxware::Numerics ) ComplexExtensions ( Qkmaxware::Numerics ) ComplexFunction ( Qkmaxware::Numerics ) ComplexMatrix ( Qkmaxware::Numerics ) CosineInterpolation ( Qkmaxware::Numerics ) CubicInterpolation ( Qkmaxware::Numerics )","title":"c"},{"location":"doxygen/classes/#d","text":"DimensionMismatchException ( Qkmaxware::Numerics ) DoubleCalculator ( Qkmaxware::Numerics ) DoubleFunction ( Qkmaxware::Numerics ) DoubleFunction2 ( Qkmaxware::Numerics ) DoubleInterpolatedFunction ( Qkmaxware::Numerics ) DoubleMatrix ( Qkmaxware::Numerics ) DoubleRange ( Qkmaxware::Numerics )","title":"d"},{"location":"doxygen/classes/#e","text":"EndpointFivePointDifferentiator ( Qkmaxware::Numerics ) EndpointThreePointDifferentiator ( Qkmaxware::Numerics ) EulerIvpSolver ( Qkmaxware::Numerics )","title":"e"},{"location":"doxygen/classes/#i","text":"IntCalculator ( Qkmaxware::Numerics ) IntFunction ( Qkmaxware::Numerics ) IntMatrix ( Qkmaxware::Numerics ) IntRange ( Qkmaxware::Numerics ) ICalculationHelper ( Qkmaxware::Numerics ) ICalculator ( Qkmaxware::Numerics ) IDefiniteIntegrator ( Qkmaxware::Numerics ) IFunction ( Qkmaxware::Numerics ) IFunction2 ( Qkmaxware::Numerics ) IFunction3 ( Qkmaxware::Numerics ) IFunction4 ( Qkmaxware::Numerics ) IIndefiniteIntegrator ( Qkmaxware::Numerics ) IInterpolatedFunction ( Qkmaxware::Numerics ) IInterpolator ( Qkmaxware::Numerics ) IIvpSolver ( Qkmaxware::Numerics ) INumericDifferentiator ( Qkmaxware::Numerics ) IValueGenerator ( Qkmaxware::Numerics )","title":"i"},{"location":"doxygen/classes/#l","text":"LinearInterpolation ( Qkmaxware::Numerics ) LUPSet ( Qkmaxware::Numerics )","title":"l"},{"location":"doxygen/classes/#m","text":"Matrix ( Qkmaxware::Numerics )","title":"m"},{"location":"doxygen/classes/#p","text":"Point2 ( Qkmaxware::Numerics )","title":"p"},{"location":"doxygen/classes/#r","text":"Range ( Qkmaxware::Numerics ) RungeKuttaIvpSolver ( Qkmaxware::Numerics )","title":"r"},{"location":"doxygen/classes/#s","text":"SimpsonAdaptiveQuadratureIntegrator ( Qkmaxware::Numerics ) SimpsonIntegrator ( Qkmaxware::Numerics ) SmoothstepInterpolation ( Qkmaxware::Numerics ) StepInterpolation ( Qkmaxware::Numerics )","title":"s"},{"location":"doxygen/classes/#t","text":"TrapezoidalIntegrator ( Qkmaxware::Numerics )","title":"t"},{"location":"doxygen/dir_22d954cd03c3057b6fcf702b65820bfa/","text":"Dir Numerics File List > Numerics Directories Type Name dir src The documentation for this class was generated from the following file Numerics/","title":"Dir Numerics"},{"location":"doxygen/dir_22d954cd03c3057b6fcf702b65820bfa/#dir-numerics","text":"File List > Numerics","title":"Dir Numerics"},{"location":"doxygen/dir_22d954cd03c3057b6fcf702b65820bfa/#directories","text":"Type Name dir src The documentation for this class was generated from the following file Numerics/","title":"Directories"},{"location":"doxygen/dir_346f5d492aec4cbc9196864728c1e481/","text":"Dir Numerics/src/Complex Analysis File List > Complex Analysis Files Type Name file ComplexExtensions.cs The documentation for this class was generated from the following file Numerics/src/Complex Analysis/","title":"Dir Numerics/src/Complex Analysis"},{"location":"doxygen/dir_346f5d492aec4cbc9196864728c1e481/#dir-numericssrccomplex-analysis","text":"File List > Complex Analysis","title":"Dir Numerics/src/Complex Analysis"},{"location":"doxygen/dir_346f5d492aec4cbc9196864728c1e481/#files","text":"Type Name file ComplexExtensions.cs The documentation for this class was generated from the following file Numerics/src/Complex Analysis/","title":"Files"},{"location":"doxygen/dir_5a02e572439f8185abcecbffcb6659b1/","text":"Dir Numerics/src/Ode File List > Numerics > src > Ode Files Type Name file EulerIvpSolver.cs file IIvpSolver.cs file RungeKuttaIvpSolver.cs The documentation for this class was generated from the following file Numerics/src/Ode/","title":"Dir Numerics/src/Ode"},{"location":"doxygen/dir_5a02e572439f8185abcecbffcb6659b1/#dir-numericssrcode","text":"File List > Numerics > src > Ode","title":"Dir Numerics/src/Ode"},{"location":"doxygen/dir_5a02e572439f8185abcecbffcb6659b1/#files","text":"Type Name file EulerIvpSolver.cs file IIvpSolver.cs file RungeKuttaIvpSolver.cs The documentation for this class was generated from the following file Numerics/src/Ode/","title":"Files"},{"location":"doxygen/dir_78be539330a233a7472222feabba9761/","text":"Dir Numerics/src File List > Numerics > src Files Type Name file ICalculationHelper.cs file ICalculator.cs file Point2.cs file Range.cs Directories Type Name dir Complex Analysis dir Differentiation dir Function dir Integration dir Linear Algebra dir Ode The documentation for this class was generated from the following file Numerics/src/","title":"Dir Numerics/src"},{"location":"doxygen/dir_78be539330a233a7472222feabba9761/#dir-numericssrc","text":"File List > Numerics > src","title":"Dir Numerics/src"},{"location":"doxygen/dir_78be539330a233a7472222feabba9761/#files","text":"Type Name file ICalculationHelper.cs file ICalculator.cs file Point2.cs file Range.cs","title":"Files"},{"location":"doxygen/dir_78be539330a233a7472222feabba9761/#directories","text":"Type Name dir Complex Analysis dir Differentiation dir Function dir Integration dir Linear Algebra dir Ode The documentation for this class was generated from the following file Numerics/src/","title":"Directories"},{"location":"doxygen/dir_7ecba1fdf38fbccf53114095da4cf61d/","text":"Dir Numerics/src/Differentiation File List > Differentiation Files Type Name file FivePointDifferentiator.cs file INumericDifferentiator.cs file ThreePointDifferentiator.cs The documentation for this class was generated from the following file Numerics/src/Differentiation/","title":"Dir Numerics/src/Differentiation"},{"location":"doxygen/dir_7ecba1fdf38fbccf53114095da4cf61d/#dir-numericssrcdifferentiation","text":"File List > Differentiation","title":"Dir Numerics/src/Differentiation"},{"location":"doxygen/dir_7ecba1fdf38fbccf53114095da4cf61d/#files","text":"Type Name file FivePointDifferentiator.cs file INumericDifferentiator.cs file ThreePointDifferentiator.cs The documentation for this class was generated from the following file Numerics/src/Differentiation/","title":"Files"},{"location":"doxygen/dir_aa63e1a5f0911dba6fa28028dbe8a4b8/","text":"Dir Numerics/src/Linear Algebra File List > Linear Algebra Files Type Name file DimensionMismatchException.cs file LUPSet.cs file Matrices.cs file Matrix.cs file ValueGenerator.cs The documentation for this class was generated from the following file Numerics/src/Linear Algebra/","title":"Dir Numerics/src/Linear Algebra"},{"location":"doxygen/dir_aa63e1a5f0911dba6fa28028dbe8a4b8/#dir-numericssrclinear-algebra","text":"File List > Linear Algebra","title":"Dir Numerics/src/Linear Algebra"},{"location":"doxygen/dir_aa63e1a5f0911dba6fa28028dbe8a4b8/#files","text":"Type Name file DimensionMismatchException.cs file LUPSet.cs file Matrices.cs file Matrix.cs file ValueGenerator.cs The documentation for this class was generated from the following file Numerics/src/Linear Algebra/","title":"Files"},{"location":"doxygen/dir_b65ddcb4fd3ec0555cfb56205497cd41/","text":"Dir Numerics/src/Function File List > Function Files Type Name file BaseInterpolatedFunction.cs file CosineInterpolation.cs file CubicInterpolation.cs file IFunction.cs file IInterpolatedFunction.cs file IInterpolator.cs file LinearInterpolation.cs file SmoothstepInterpolation.cs file StepInterpolation.cs The documentation for this class was generated from the following file Numerics/src/Function/","title":"Dir Numerics/src/Function"},{"location":"doxygen/dir_b65ddcb4fd3ec0555cfb56205497cd41/#dir-numericssrcfunction","text":"File List > Function","title":"Dir Numerics/src/Function"},{"location":"doxygen/dir_b65ddcb4fd3ec0555cfb56205497cd41/#files","text":"Type Name file BaseInterpolatedFunction.cs file CosineInterpolation.cs file CubicInterpolation.cs file IFunction.cs file IInterpolatedFunction.cs file IInterpolator.cs file LinearInterpolation.cs file SmoothstepInterpolation.cs file StepInterpolation.cs The documentation for this class was generated from the following file Numerics/src/Function/","title":"Files"},{"location":"doxygen/dir_ffa8a673d7cb9b06da78582db1cc7252/","text":"Dir Numerics/src/Integration File List > Integration Files Type Name file AdaptiveQuadratureIntegrator.cs file IDefiniteIntegrator.cs file IIndefiniteIntegrator.cs file SimpsonIntegrator.cs file TrapezoidalIntegrator.cs The documentation for this class was generated from the following file Numerics/src/Integration/","title":"Dir Numerics/src/Integration"},{"location":"doxygen/dir_ffa8a673d7cb9b06da78582db1cc7252/#dir-numericssrcintegration","text":"File List > Integration","title":"Dir Numerics/src/Integration"},{"location":"doxygen/dir_ffa8a673d7cb9b06da78582db1cc7252/#files","text":"Type Name file AdaptiveQuadratureIntegrator.cs file IDefiniteIntegrator.cs file IIndefiniteIntegrator.cs file SimpsonIntegrator.cs file TrapezoidalIntegrator.cs The documentation for this class was generated from the following file Numerics/src/Integration/","title":"Files"},{"location":"doxygen/files/","text":"File List Here is a list of all files with brief descriptions: dir Numerics dir src file ICalculationHelper.cs file ICalculator.cs dir Complex Analysis file ComplexExtensions.cs dir Differentiation file FivePointDifferentiator.cs file INumericDifferentiator.cs file ThreePointDifferentiator.cs dir Function file BaseInterpolatedFunction.cs file CosineInterpolation.cs file CubicInterpolation.cs file IFunction.cs file IInterpolatedFunction.cs file IInterpolator.cs file LinearInterpolation.cs file SmoothstepInterpolation.cs file StepInterpolation.cs dir Integration file AdaptiveQuadratureIntegrator.cs file IDefiniteIntegrator.cs file IIndefiniteIntegrator.cs file SimpsonIntegrator.cs file TrapezoidalIntegrator.cs dir Linear Algebra file DimensionMismatchException.cs file LUPSet.cs file Matrices.cs file Matrix.cs file ValueGenerator.cs dir Ode file EulerIvpSolver.cs file IIvpSolver.cs file RungeKuttaIvpSolver.cs file Point2.cs file Range.cs","title":"File List"},{"location":"doxygen/files/#file-list","text":"Here is a list of all files with brief descriptions: dir Numerics dir src file ICalculationHelper.cs file ICalculator.cs dir Complex Analysis file ComplexExtensions.cs dir Differentiation file FivePointDifferentiator.cs file INumericDifferentiator.cs file ThreePointDifferentiator.cs dir Function file BaseInterpolatedFunction.cs file CosineInterpolation.cs file CubicInterpolation.cs file IFunction.cs file IInterpolatedFunction.cs file IInterpolator.cs file LinearInterpolation.cs file SmoothstepInterpolation.cs file StepInterpolation.cs dir Integration file AdaptiveQuadratureIntegrator.cs file IDefiniteIntegrator.cs file IIndefiniteIntegrator.cs file SimpsonIntegrator.cs file TrapezoidalIntegrator.cs dir Linear Algebra file DimensionMismatchException.cs file LUPSet.cs file Matrices.cs file Matrix.cs file ValueGenerator.cs dir Ode file EulerIvpSolver.cs file IIvpSolver.cs file RungeKuttaIvpSolver.cs file Point2.cs file Range.cs","title":"File List"},{"location":"doxygen/functions/","text":"Functions","title":"Functions"},{"location":"doxygen/functions/#functions","text":"","title":"Functions"},{"location":"doxygen/hierarchy/","text":"Class Hierarchy This inheritance list is sorted roughly, but not completely, alphabetically: interface Qkmaxware::Numerics::IDefiniteIntegrator Interface for a calculator that can compute definite integrals interface Qkmaxware::Numerics::ICalculationHelper interface Qkmaxware::Numerics::IFunction Generic interface for a function with 1 parametre interface Qkmaxware::Numerics::IInterpolatedFunction Generic interface for a function with 1 parametre that is interpolated between the given sample points class Qkmaxware::Numerics::BaseInterpolatedFunction Base class for a function that is interpolated between sample points interface Qkmaxware::Numerics::IFunction2 Generic interface for a function with 2 parametres interface Qkmaxware::Numerics::IFunction3 Generic interface for a function with 3 parametres interface Qkmaxware::Numerics::IFunction4 Generic interface for a function with 4 parametres class Qkmaxware::Numerics::LinearInterpolation Function interpolated using linear-interpolation class Qkmaxware::Numerics::Matrix Generic matrix class of type T class Qkmaxware::Numerics::Range Generic range of values interface Qkmaxware::Numerics::INumericDifferentiator Interface for any class that can calculate the derivative of a function interface Qkmaxware::Numerics::ICalculator Interface for a class that can perform computations with the given type class Qkmaxware::Numerics::ComplexExtensions Static class for extensions related to complex numbers interface Qkmaxware::Numerics::IInterpolator Generic interface for interpolating a value between two points class Qkmaxware::Numerics::LinearInterpolation Function interpolated using linear-interpolation interface Qkmaxware::Numerics::IIvpSolver Solver for initial value problem ordinary differential equations class Qkmaxware::Numerics::Point2 X,Y Coordinate pair struct Qkmaxware::Numerics::LUPSet LU factorization with full pivoting decomposition interface Qkmaxware::Numerics::IIndefiniteIntegrator Interface for a calculator that can compute indefinite integrals interface Qkmaxware::Numerics::IValueGenerator Interface representing any object that can generate values class ArithmeticException class Qkmaxware::Numerics::DimensionMismatchException Matrix dimension mismatch","title":"Class Hierarchy"},{"location":"doxygen/hierarchy/#class-hierarchy","text":"This inheritance list is sorted roughly, but not completely, alphabetically: interface Qkmaxware::Numerics::IDefiniteIntegrator Interface for a calculator that can compute definite integrals interface Qkmaxware::Numerics::ICalculationHelper interface Qkmaxware::Numerics::IFunction Generic interface for a function with 1 parametre interface Qkmaxware::Numerics::IInterpolatedFunction Generic interface for a function with 1 parametre that is interpolated between the given sample points class Qkmaxware::Numerics::BaseInterpolatedFunction Base class for a function that is interpolated between sample points interface Qkmaxware::Numerics::IFunction2 Generic interface for a function with 2 parametres interface Qkmaxware::Numerics::IFunction3 Generic interface for a function with 3 parametres interface Qkmaxware::Numerics::IFunction4 Generic interface for a function with 4 parametres class Qkmaxware::Numerics::LinearInterpolation Function interpolated using linear-interpolation class Qkmaxware::Numerics::Matrix Generic matrix class of type T class Qkmaxware::Numerics::Range Generic range of values interface Qkmaxware::Numerics::INumericDifferentiator Interface for any class that can calculate the derivative of a function interface Qkmaxware::Numerics::ICalculator Interface for a class that can perform computations with the given type class Qkmaxware::Numerics::ComplexExtensions Static class for extensions related to complex numbers interface Qkmaxware::Numerics::IInterpolator Generic interface for interpolating a value between two points class Qkmaxware::Numerics::LinearInterpolation Function interpolated using linear-interpolation interface Qkmaxware::Numerics::IIvpSolver Solver for initial value problem ordinary differential equations class Qkmaxware::Numerics::Point2 X,Y Coordinate pair struct Qkmaxware::Numerics::LUPSet LU factorization with full pivoting decomposition interface Qkmaxware::Numerics::IIndefiniteIntegrator Interface for a calculator that can compute indefinite integrals interface Qkmaxware::Numerics::IValueGenerator Interface representing any object that can generate values class ArithmeticException class Qkmaxware::Numerics::DimensionMismatchException Matrix dimension mismatch","title":"Class Hierarchy"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_calculation_helper/","text":"Interface Qkmaxware::Numerics::ICalculationHelper template <T T> Class List > Qkmaxware > Numerics > ICalculationHelper Inherited by the following classes: Qkmaxware::Numerics::IFunction , Qkmaxware::Numerics::IFunction2 , Qkmaxware::Numerics::IFunction3 , Qkmaxware::Numerics::IFunction4 , Qkmaxware::Numerics::LinearInterpolation , Qkmaxware::Numerics::Matrix , Qkmaxware::Numerics::Range The documentation for this class was generated from the following file Numerics/src/ICalculationHelper.cs","title":"Interface Qkmaxware::Numerics::ICalculationHelper"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_calculation_helper/#interface-qkmaxwarenumericsicalculationhelper","text":"template <T T> Class List > Qkmaxware > Numerics > ICalculationHelper Inherited by the following classes: Qkmaxware::Numerics::IFunction , Qkmaxware::Numerics::IFunction2 , Qkmaxware::Numerics::IFunction3 , Qkmaxware::Numerics::IFunction4 , Qkmaxware::Numerics::LinearInterpolation , Qkmaxware::Numerics::Matrix , Qkmaxware::Numerics::Range The documentation for this class was generated from the following file Numerics/src/ICalculationHelper.cs","title":"Interface Qkmaxware::Numerics::ICalculationHelper"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_calculator/","text":"Interface Qkmaxware::Numerics::ICalculator template <T T> Class List > Qkmaxware > Numerics > ICalculator Interface for a class that can perform computations with the given type More... Public Functions Type Name T Add (T v1, T v2) Add two values int Compare (T v1, T v2) Compare two values T Divide (T v1, T v2) Multiply two values T Multiply (T v1, T v2) Multiply two values T Negate (T v1) Negate a value T Subtract (T v1, T v2) Subtract from a value T Unit () Get the '1' value for the given type Detailed Description Template parameters: T numeric type Public Functions Documentation function Add T Qkmaxware::Numerics::ICalculator::Add ( T v1, T v2 ) Parameters: v1 first v2 second Returns: sum of the two values function Compare int Qkmaxware::Numerics::ICalculator::Compare ( T v1, T v2 ) Parameters: v1 first v2 second Returns: Less than zero if first < second Zero if first == second Greater than zero if first > second function Divide T Qkmaxware::Numerics::ICalculator::Divide ( T v1, T v2 ) Parameters: v1 first v2 second Returns: division function Multiply T Qkmaxware::Numerics::ICalculator::Multiply ( T v1, T v2 ) Parameters: v1 first v2 second Returns: product function Negate T Qkmaxware::Numerics::ICalculator::Negate ( T v1 ) Parameters: v1 value Returns: negated value function Subtract T Qkmaxware::Numerics::ICalculator::Subtract ( T v1, T v2 ) Parameters: v1 first v2 second Returns: difference function Unit T Qkmaxware::Numerics::ICalculator::Unit () Returns: 1 The documentation for this class was generated from the following file Numerics/src/ICalculator.cs","title":"Interface Qkmaxware::Numerics::ICalculator"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_calculator/#interface-qkmaxwarenumericsicalculator","text":"template <T T> Class List > Qkmaxware > Numerics > ICalculator Interface for a class that can perform computations with the given type More...","title":"Interface Qkmaxware::Numerics::ICalculator"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_calculator/#public-functions","text":"Type Name T Add (T v1, T v2) Add two values int Compare (T v1, T v2) Compare two values T Divide (T v1, T v2) Multiply two values T Multiply (T v1, T v2) Multiply two values T Negate (T v1) Negate a value T Subtract (T v1, T v2) Subtract from a value T Unit () Get the '1' value for the given type","title":"Public Functions"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_calculator/#detailed-description","text":"Template parameters: T numeric type","title":"Detailed Description"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_calculator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_calculator/#function-add","text":"T Qkmaxware::Numerics::ICalculator::Add ( T v1, T v2 ) Parameters: v1 first v2 second Returns: sum of the two values","title":"function Add"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_calculator/#function-compare","text":"int Qkmaxware::Numerics::ICalculator::Compare ( T v1, T v2 ) Parameters: v1 first v2 second Returns: Less than zero if first < second Zero if first == second Greater than zero if first > second","title":"function Compare"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_calculator/#function-divide","text":"T Qkmaxware::Numerics::ICalculator::Divide ( T v1, T v2 ) Parameters: v1 first v2 second Returns: division","title":"function Divide"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_calculator/#function-multiply","text":"T Qkmaxware::Numerics::ICalculator::Multiply ( T v1, T v2 ) Parameters: v1 first v2 second Returns: product","title":"function Multiply"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_calculator/#function-negate","text":"T Qkmaxware::Numerics::ICalculator::Negate ( T v1 ) Parameters: v1 value Returns: negated value","title":"function Negate"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_calculator/#function-subtract","text":"T Qkmaxware::Numerics::ICalculator::Subtract ( T v1, T v2 ) Parameters: v1 first v2 second Returns: difference","title":"function Subtract"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_calculator/#function-unit","text":"T Qkmaxware::Numerics::ICalculator::Unit () Returns: 1 The documentation for this class was generated from the following file Numerics/src/ICalculator.cs","title":"function Unit"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_definite_integrator/","text":"Interface Qkmaxware::Numerics::IDefiniteIntegrator template <T T> Class List > Qkmaxware > Numerics > IDefiniteIntegrator Interface for a calculator that can compute definite integrals More... Public Functions Type Name T Integrate ( IFunction < T > fx, Range < T > range) Integrate the given function between the range Detailed Description Template parameters: T numeric type Public Functions Documentation function Integrate T Qkmaxware::Numerics::IDefiniteIntegrator::Integrate ( IFunction < T > fx, Range < T > range ) Parameters: fx function to integrate range range to integrate over Returns: definite integral The documentation for this class was generated from the following file Numerics/src/Integration/IDefiniteIntegrator.cs","title":"Interface Qkmaxware::Numerics::IDefiniteIntegrator"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_definite_integrator/#interface-qkmaxwarenumericsidefiniteintegrator","text":"template <T T> Class List > Qkmaxware > Numerics > IDefiniteIntegrator Interface for a calculator that can compute definite integrals More...","title":"Interface Qkmaxware::Numerics::IDefiniteIntegrator"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_definite_integrator/#public-functions","text":"Type Name T Integrate ( IFunction < T > fx, Range < T > range) Integrate the given function between the range","title":"Public Functions"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_definite_integrator/#detailed-description","text":"Template parameters: T numeric type","title":"Detailed Description"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_definite_integrator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_definite_integrator/#function-integrate","text":"T Qkmaxware::Numerics::IDefiniteIntegrator::Integrate ( IFunction < T > fx, Range < T > range ) Parameters: fx function to integrate range range to integrate over Returns: definite integral The documentation for this class was generated from the following file Numerics/src/Integration/IDefiniteIntegrator.cs","title":"function Integrate"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function/","text":"Interface Qkmaxware::Numerics::IFunction template <T T> Class List > Qkmaxware > Numerics > IFunction Generic interface for a function with 1 parametre Inherits the following classes: Qkmaxware::Numerics::ICalculationHelper Inherited by the following classes: Qkmaxware::Numerics::IInterpolatedFunction Public Functions Type Name T Evaluate (T x) Evaluate the function at y = f(x) Public Functions Documentation function Evaluate T Qkmaxware::Numerics::IFunction::Evaluate ( T x ) Parameters: x x Returns: y The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"Interface Qkmaxware::Numerics::IFunction"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function/#interface-qkmaxwarenumericsifunction","text":"template <T T> Class List > Qkmaxware > Numerics > IFunction Generic interface for a function with 1 parametre Inherits the following classes: Qkmaxware::Numerics::ICalculationHelper Inherited by the following classes: Qkmaxware::Numerics::IInterpolatedFunction","title":"Interface Qkmaxware::Numerics::IFunction"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function/#public-functions","text":"Type Name T Evaluate (T x) Evaluate the function at y = f(x)","title":"Public Functions"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function/#function-evaluate","text":"T Qkmaxware::Numerics::IFunction::Evaluate ( T x ) Parameters: x x Returns: y The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"function Evaluate"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function2/","text":"Interface Qkmaxware::Numerics::IFunction2 template <T T> Class List > Qkmaxware > Numerics > IFunction2 Generic interface for a function with 2 parametres More... Inherits the following classes: Qkmaxware::Numerics::ICalculationHelper Public Functions Type Name T Evaluate (T x1, T x2) Evaluate the function at y = f(x1, x2) Detailed Description Template parameters: T Public Functions Documentation function Evaluate T Qkmaxware::Numerics::IFunction2::Evaluate ( T x1, T x2 ) Parameters: x1 first parametre x2 second parametre Returns: y The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"Interface Qkmaxware::Numerics::IFunction2"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function2/#interface-qkmaxwarenumericsifunction2","text":"template <T T> Class List > Qkmaxware > Numerics > IFunction2 Generic interface for a function with 2 parametres More... Inherits the following classes: Qkmaxware::Numerics::ICalculationHelper","title":"Interface Qkmaxware::Numerics::IFunction2"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function2/#public-functions","text":"Type Name T Evaluate (T x1, T x2) Evaluate the function at y = f(x1, x2)","title":"Public Functions"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function2/#detailed-description","text":"Template parameters: T","title":"Detailed Description"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function2/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function2/#function-evaluate","text":"T Qkmaxware::Numerics::IFunction2::Evaluate ( T x1, T x2 ) Parameters: x1 first parametre x2 second parametre Returns: y The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"function Evaluate"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function3/","text":"Interface Qkmaxware::Numerics::IFunction3 template <T T> Class List > Qkmaxware > Numerics > IFunction3 Generic interface for a function with 3 parametres More... Inherits the following classes: Qkmaxware::Numerics::ICalculationHelper Public Functions Type Name T Evaluate (T x1, T x2, T x3) Evaluate the function at y = f(x1, x2, x3) Detailed Description Template parameters: T Public Functions Documentation function Evaluate T Qkmaxware::Numerics::IFunction3::Evaluate ( T x1, T x2, T x3 ) Parameters: x1 first parametre x2 second parametre x3 third parametre Returns: y The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"Interface Qkmaxware::Numerics::IFunction3"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function3/#interface-qkmaxwarenumericsifunction3","text":"template <T T> Class List > Qkmaxware > Numerics > IFunction3 Generic interface for a function with 3 parametres More... Inherits the following classes: Qkmaxware::Numerics::ICalculationHelper","title":"Interface Qkmaxware::Numerics::IFunction3"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function3/#public-functions","text":"Type Name T Evaluate (T x1, T x2, T x3) Evaluate the function at y = f(x1, x2, x3)","title":"Public Functions"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function3/#detailed-description","text":"Template parameters: T","title":"Detailed Description"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function3/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function3/#function-evaluate","text":"T Qkmaxware::Numerics::IFunction3::Evaluate ( T x1, T x2, T x3 ) Parameters: x1 first parametre x2 second parametre x3 third parametre Returns: y The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"function Evaluate"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function4/","text":"Interface Qkmaxware::Numerics::IFunction4 template <T T> Class List > Qkmaxware > Numerics > IFunction4 Generic interface for a function with 4 parametres More... Inherits the following classes: Qkmaxware::Numerics::ICalculationHelper Public Functions Type Name T Evaluate (T x1, T x2, T x3, T x4) Evaluate the function at y = f(x1, x2, x3, x4) Detailed Description Template parameters: T Public Functions Documentation function Evaluate T Qkmaxware::Numerics::IFunction4::Evaluate ( T x1, T x2, T x3, T x4 ) Parameters: x1 first parametre x2 second parametre x3 third parametre x4 four parametre Returns: y The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"Interface Qkmaxware::Numerics::IFunction4"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function4/#interface-qkmaxwarenumericsifunction4","text":"template <T T> Class List > Qkmaxware > Numerics > IFunction4 Generic interface for a function with 4 parametres More... Inherits the following classes: Qkmaxware::Numerics::ICalculationHelper","title":"Interface Qkmaxware::Numerics::IFunction4"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function4/#public-functions","text":"Type Name T Evaluate (T x1, T x2, T x3, T x4) Evaluate the function at y = f(x1, x2, x3, x4)","title":"Public Functions"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function4/#detailed-description","text":"Template parameters: T","title":"Detailed Description"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function4/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_function4/#function-evaluate","text":"T Qkmaxware::Numerics::IFunction4::Evaluate ( T x1, T x2, T x3, T x4 ) Parameters: x1 first parametre x2 second parametre x3 third parametre x4 four parametre Returns: y The documentation for this class was generated from the following file Numerics/src/Function/IFunction.cs","title":"function Evaluate"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_indefinite_integrator/","text":"Interface Qkmaxware::Numerics::IIndefiniteIntegrator template <T T> Class List > Qkmaxware > Numerics > IIndefiniteIntegrator Interface for a calculator that can compute indefinite integrals More... Public Functions Type Name IFunction < T > Integrate ( IFunction < T > fx, Range < T > range) Integrate the given function between the range Detailed Description Template parameters: T numeric type Public Functions Documentation function Integrate IFunction < T > Qkmaxware::Numerics::IIndefiniteIntegrator::Integrate ( IFunction < T > fx, Range < T > range ) Parameters: fx function to integrate range range to integrate over Returns: integral function The documentation for this class was generated from the following file Numerics/src/Integration/IIndefiniteIntegrator.cs","title":"Interface Qkmaxware::Numerics::IIndefiniteIntegrator"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_indefinite_integrator/#interface-qkmaxwarenumericsiindefiniteintegrator","text":"template <T T> Class List > Qkmaxware > Numerics > IIndefiniteIntegrator Interface for a calculator that can compute indefinite integrals More...","title":"Interface Qkmaxware::Numerics::IIndefiniteIntegrator"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_indefinite_integrator/#public-functions","text":"Type Name IFunction < T > Integrate ( IFunction < T > fx, Range < T > range) Integrate the given function between the range","title":"Public Functions"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_indefinite_integrator/#detailed-description","text":"Template parameters: T numeric type","title":"Detailed Description"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_indefinite_integrator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_indefinite_integrator/#function-integrate","text":"IFunction < T > Qkmaxware::Numerics::IIndefiniteIntegrator::Integrate ( IFunction < T > fx, Range < T > range ) Parameters: fx function to integrate range range to integrate over Returns: integral function The documentation for this class was generated from the following file Numerics/src/Integration/IIndefiniteIntegrator.cs","title":"function Integrate"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_interpolated_function/","text":"Interface Qkmaxware::Numerics::IInterpolatedFunction template <T T> Class List > Qkmaxware > Numerics > IInterpolatedFunction Generic interface for a function with 1 parametre that is interpolated between the given sample points Inherits the following classes: Qkmaxware::Numerics::IFunction Inherited by the following classes: Qkmaxware::Numerics::BaseInterpolatedFunction Public Functions inherited from Qkmaxware::Numerics::IFunction See Qkmaxware::Numerics::IFunction Type Name T Evaluate (T x) Evaluate the function at y = f(x) The documentation for this class was generated from the following file Numerics/src/Function/IInterpolatedFunction.cs","title":"Interface Qkmaxware::Numerics::IInterpolatedFunction"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_interpolated_function/#interface-qkmaxwarenumericsiinterpolatedfunction","text":"template <T T> Class List > Qkmaxware > Numerics > IInterpolatedFunction Generic interface for a function with 1 parametre that is interpolated between the given sample points Inherits the following classes: Qkmaxware::Numerics::IFunction Inherited by the following classes: Qkmaxware::Numerics::BaseInterpolatedFunction","title":"Interface Qkmaxware::Numerics::IInterpolatedFunction"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_interpolated_function/#public-functions-inherited-from-qkmaxwarenumericsifunction","text":"See Qkmaxware::Numerics::IFunction Type Name T Evaluate (T x) Evaluate the function at y = f(x) The documentation for this class was generated from the following file Numerics/src/Function/IInterpolatedFunction.cs","title":"Public Functions inherited from Qkmaxware::Numerics::IFunction"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_interpolator/","text":"Interface Qkmaxware::Numerics::IInterpolator template <T T> Class List > Qkmaxware > Numerics > IInterpolator Generic interface for interpolating a value between two points Inherited by the following classes: Qkmaxware::Numerics::LinearInterpolation Public Functions Type Name T Interpolate (T previous, T start, T end, T next, T factor) Interpolate between start and end points Public Functions Documentation function Interpolate T Qkmaxware::Numerics::IInterpolator::Interpolate ( T previous, T start, T end, T next, T factor ) Parameters: previous last value in the queue start range to start interpolating from end range to end interpolating to next next value in the queue factor interpolation factor Returns: interpolate value between start and end The documentation for this class was generated from the following file Numerics/src/Function/IInterpolator.cs","title":"Interface Qkmaxware::Numerics::IInterpolator"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_interpolator/#interface-qkmaxwarenumericsiinterpolator","text":"template <T T> Class List > Qkmaxware > Numerics > IInterpolator Generic interface for interpolating a value between two points Inherited by the following classes: Qkmaxware::Numerics::LinearInterpolation","title":"Interface Qkmaxware::Numerics::IInterpolator"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_interpolator/#public-functions","text":"Type Name T Interpolate (T previous, T start, T end, T next, T factor) Interpolate between start and end points","title":"Public Functions"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_interpolator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_interpolator/#function-interpolate","text":"T Qkmaxware::Numerics::IInterpolator::Interpolate ( T previous, T start, T end, T next, T factor ) Parameters: previous last value in the queue start range to start interpolating from end range to end interpolating to next next value in the queue factor interpolation factor Returns: interpolate value between start and end The documentation for this class was generated from the following file Numerics/src/Function/IInterpolator.cs","title":"function Interpolate"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_ivp_solver/","text":"Interface Qkmaxware::Numerics::IIvpSolver template <T T> Class List > Qkmaxware > Numerics > IIvpSolver Solver for initial value problem ordinary differential equations More... Public Functions Type Name IFunction < T > Solve ( IFunction2 < T > expr, Range < T > tRange, T y0) Solve the initial value problem where y` = f(t, y), a <= t <= b, y(a) = y0 Detailed Description Template parameters: T Public Functions Documentation function Solve IFunction < T > Qkmaxware::Numerics::IIvpSolver::Solve ( IFunction2 < T > expr, Range < T > tRange, T y0 ) Parameters: f function of two arguments (t,y) tRange range (a,b) of values for t y0 value of y at a Returns: approximation for the function y The documentation for this class was generated from the following file Numerics/src/Ode/IIvpSolver.cs","title":"Interface Qkmaxware::Numerics::IIvpSolver"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_ivp_solver/#interface-qkmaxwarenumericsiivpsolver","text":"template <T T> Class List > Qkmaxware > Numerics > IIvpSolver Solver for initial value problem ordinary differential equations More...","title":"Interface Qkmaxware::Numerics::IIvpSolver"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_ivp_solver/#public-functions","text":"Type Name IFunction < T > Solve ( IFunction2 < T > expr, Range < T > tRange, T y0) Solve the initial value problem where y` = f(t, y), a <= t <= b, y(a) = y0","title":"Public Functions"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_ivp_solver/#detailed-description","text":"Template parameters: T","title":"Detailed Description"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_ivp_solver/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_ivp_solver/#function-solve","text":"IFunction < T > Qkmaxware::Numerics::IIvpSolver::Solve ( IFunction2 < T > expr, Range < T > tRange, T y0 ) Parameters: f function of two arguments (t,y) tRange range (a,b) of values for t y0 value of y at a Returns: approximation for the function y The documentation for this class was generated from the following file Numerics/src/Ode/IIvpSolver.cs","title":"function Solve"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_numeric_differentiator/","text":"Interface Qkmaxware::Numerics::INumericDifferentiator template <T T> Class List > Qkmaxware > Numerics > INumericDifferentiator Interface for any class that can calculate the derivative of a function More... Public Functions Type Name IFunction < T > Differentiate ( IFunction < T > f, Range < T > range) Compute the derivative of the function over the range Detailed Description Template parameters: T numeric type Public Functions Documentation function Differentiate IFunction < T > Qkmaxware::Numerics::INumericDifferentiator::Differentiate ( IFunction < T > f, Range < T > range ) Parameters: f function range range of 'x' values Returns: derivative function The documentation for this class was generated from the following file Numerics/src/Differentiation/INumericDifferentiator.cs","title":"Interface Qkmaxware::Numerics::INumericDifferentiator"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_numeric_differentiator/#interface-qkmaxwarenumericsinumericdifferentiator","text":"template <T T> Class List > Qkmaxware > Numerics > INumericDifferentiator Interface for any class that can calculate the derivative of a function More...","title":"Interface Qkmaxware::Numerics::INumericDifferentiator"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_numeric_differentiator/#public-functions","text":"Type Name IFunction < T > Differentiate ( IFunction < T > f, Range < T > range) Compute the derivative of the function over the range","title":"Public Functions"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_numeric_differentiator/#detailed-description","text":"Template parameters: T numeric type","title":"Detailed Description"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_numeric_differentiator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_numeric_differentiator/#function-differentiate","text":"IFunction < T > Qkmaxware::Numerics::INumericDifferentiator::Differentiate ( IFunction < T > f, Range < T > range ) Parameters: f function range range of 'x' values Returns: derivative function The documentation for this class was generated from the following file Numerics/src/Differentiation/INumericDifferentiator.cs","title":"function Differentiate"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_value_generator/","text":"Interface Qkmaxware::Numerics::IValueGenerator template <T T> Class List > Qkmaxware > Numerics > IValueGenerator Interface representing any object that can generate values More... Public Functions Type Name T Next () Generate the next value in the sequence T Next (T min, T max) Generate the next value in the sequence between to endpoints Detailed Description Template parameters: T Public Functions Documentation function Next [1/2] T Qkmaxware::Numerics::IValueGenerator::Next () function Next [2/2] T Qkmaxware::Numerics::IValueGenerator::Next ( T min, T max ) Parameters: min min endpoint max max endpoint The documentation for this class was generated from the following file Numerics/src/Linear Algebra/ValueGenerator.cs","title":"Interface Qkmaxware::Numerics::IValueGenerator"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_value_generator/#interface-qkmaxwarenumericsivaluegenerator","text":"template <T T> Class List > Qkmaxware > Numerics > IValueGenerator Interface representing any object that can generate values More...","title":"Interface Qkmaxware::Numerics::IValueGenerator"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_value_generator/#public-functions","text":"Type Name T Next () Generate the next value in the sequence T Next (T min, T max) Generate the next value in the sequence between to endpoints","title":"Public Functions"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_value_generator/#detailed-description","text":"Template parameters: T","title":"Detailed Description"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_value_generator/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_value_generator/#function-next-12","text":"T Qkmaxware::Numerics::IValueGenerator::Next ()","title":"function Next [1/2]"},{"location":"doxygen/interface_qkmaxware_1_1_numerics_1_1_i_value_generator/#function-next-22","text":"T Qkmaxware::Numerics::IValueGenerator::Next ( T min, T max ) Parameters: min min endpoint max max endpoint The documentation for this class was generated from the following file Numerics/src/Linear Algebra/ValueGenerator.cs","title":"function Next [2/2]"},{"location":"doxygen/macros/","text":"Macros","title":"Macros"},{"location":"doxygen/macros/#macros","text":"","title":"Macros"},{"location":"doxygen/modules/","text":"Modules Here is a list of all modules:","title":"Modules"},{"location":"doxygen/modules/#modules","text":"Here is a list of all modules:","title":"Modules"},{"location":"doxygen/namespace_member_enums/","text":"Namespace Member Enums","title":"Namespace Member Enums"},{"location":"doxygen/namespace_member_enums/#namespace-member-enums","text":"","title":"Namespace Member Enums"},{"location":"doxygen/namespace_member_functions/","text":"Namespace Member Functions","title":"Namespace Member Functions"},{"location":"doxygen/namespace_member_functions/#namespace-member-functions","text":"","title":"Namespace Member Functions"},{"location":"doxygen/namespace_member_typedefs/","text":"Namespace Member Typedefs","title":"Namespace Member Typedefs"},{"location":"doxygen/namespace_member_typedefs/#namespace-member-typedefs","text":"","title":"Namespace Member Typedefs"},{"location":"doxygen/namespace_member_variables/","text":"Namespace Member Variables","title":"Namespace Member Variables"},{"location":"doxygen/namespace_member_variables/#namespace-member-variables","text":"","title":"Namespace Member Variables"},{"location":"doxygen/namespace_members/","text":"Namespace Members","title":"Namespace Members"},{"location":"doxygen/namespace_members/#namespace-members","text":"","title":"Namespace Members"},{"location":"doxygen/namespace_qkmaxware/","text":"Namespace Qkmaxware Class List > Qkmaxware Namespaces Type Name namespace Numerics The documentation for this class was generated from the following file Numerics/src/Complex Analysis/ComplexExtensions.cs","title":"Namespace Qkmaxware"},{"location":"doxygen/namespace_qkmaxware/#namespace-qkmaxware","text":"Class List > Qkmaxware","title":"Namespace Qkmaxware"},{"location":"doxygen/namespace_qkmaxware/#namespaces","text":"Type Name namespace Numerics The documentation for this class was generated from the following file Numerics/src/Complex Analysis/ComplexExtensions.cs","title":"Namespaces"},{"location":"doxygen/namespace_qkmaxware_1_1_numerics/","text":"Namespace Qkmaxware::Numerics Class List > Qkmaxware > Numerics Classes Type Name class BaseAdaptiveQuadratureIntegrator Base class for integrations methods using an adaptive quadrature scheme class BaseInterpolatedFunction <T> Base class for a function that is interpolated between sample points class CentredFivePointDifferentiator Midpoint five point numerical derivative Solver class CentredThreePointDifferentiator Midpoint three point numerical derivative solver class ComplexCalculator Calculator for complex arithmetic class ComplexExtensions Static class for extensions related to complex numbers class ComplexFunction Native complex function class ComplexMatrix Complex number matrix class CosineInterpolation Function interpolated using cosine-interpolation class CubicInterpolation Function interpolated using cubic-interpolation class DimensionMismatchException Matrix dimension mismatch class DoubleCalculator Calculator for double arithmetic class DoubleFunction Native double function class DoubleFunction2 Native double function of two variables class DoubleInterpolatedFunction Interpolated function using doubles class DoubleMatrix Double matrix class DoubleRange Range of doubles class EndpointFivePointDifferentiator Endpoint five point numerical derivative solver class EndpointThreePointDifferentiator Endpoint three point numerical derivative solver class EulerIvpSolver Solve initial value problems with Euler's method interface ICalculationHelper <T> interface ICalculator <T> Interface for a class that can perform computations with the given type interface IDefiniteIntegrator <T> Interface for a calculator that can compute definite integrals interface IFunction <T> Generic interface for a function with 1 parametre interface IFunction2 <T> Generic interface for a function with 2 parametres interface IFunction3 <T> Generic interface for a function with 3 parametres interface IFunction4 <T> Generic interface for a function with 4 parametres interface IIndefiniteIntegrator <T> Interface for a calculator that can compute indefinite integrals interface IInterpolatedFunction <T> Generic interface for a function with 1 parametre that is interpolated between the given sample points interface IInterpolator <T> Generic interface for interpolating a value between two points interface IIvpSolver <T> Solver for initial value problem ordinary differential equations interface INumericDifferentiator <T> Interface for any class that can calculate the derivative of a function interface IValueGenerator <T> Interface representing any object that can generate values class IntCalculator Calculator for integer arithmetic class IntFunction Native integer function class IntMatrix Integer matrix class IntRange Range of integers struct LUPSet <T> LU factorization with full pivoting decomposition class LinearInterpolation <T> Function interpolated using linear-interpolation class Matrix <T> Generic matrix class of type T class Point2 <T> X,Y Coordinate pair class Range <T> Generic range of values class RungeKuttaIvpSolver Solve initial value problems with Fourth Order Runge-Kutta method class SimpsonAdaptiveQuadratureIntegrator Adaptive quadrature integration using Simpson's method class SimpsonIntegrator Integration using Simpson's method class SmoothstepInterpolation Function interpolated using smoothstep class StepInterpolation Function interpolated using stepped-interpolation class TrapezoidalIntegrator Integration using the trapezoidal rule The documentation for this class was generated from the following file Numerics/src/Complex Analysis/ComplexExtensions.cs","title":"Namespace Qkmaxware::Numerics"},{"location":"doxygen/namespace_qkmaxware_1_1_numerics/#namespace-qkmaxwarenumerics","text":"Class List > Qkmaxware > Numerics","title":"Namespace Qkmaxware::Numerics"},{"location":"doxygen/namespace_qkmaxware_1_1_numerics/#classes","text":"Type Name class BaseAdaptiveQuadratureIntegrator Base class for integrations methods using an adaptive quadrature scheme class BaseInterpolatedFunction <T> Base class for a function that is interpolated between sample points class CentredFivePointDifferentiator Midpoint five point numerical derivative Solver class CentredThreePointDifferentiator Midpoint three point numerical derivative solver class ComplexCalculator Calculator for complex arithmetic class ComplexExtensions Static class for extensions related to complex numbers class ComplexFunction Native complex function class ComplexMatrix Complex number matrix class CosineInterpolation Function interpolated using cosine-interpolation class CubicInterpolation Function interpolated using cubic-interpolation class DimensionMismatchException Matrix dimension mismatch class DoubleCalculator Calculator for double arithmetic class DoubleFunction Native double function class DoubleFunction2 Native double function of two variables class DoubleInterpolatedFunction Interpolated function using doubles class DoubleMatrix Double matrix class DoubleRange Range of doubles class EndpointFivePointDifferentiator Endpoint five point numerical derivative solver class EndpointThreePointDifferentiator Endpoint three point numerical derivative solver class EulerIvpSolver Solve initial value problems with Euler's method interface ICalculationHelper <T> interface ICalculator <T> Interface for a class that can perform computations with the given type interface IDefiniteIntegrator <T> Interface for a calculator that can compute definite integrals interface IFunction <T> Generic interface for a function with 1 parametre interface IFunction2 <T> Generic interface for a function with 2 parametres interface IFunction3 <T> Generic interface for a function with 3 parametres interface IFunction4 <T> Generic interface for a function with 4 parametres interface IIndefiniteIntegrator <T> Interface for a calculator that can compute indefinite integrals interface IInterpolatedFunction <T> Generic interface for a function with 1 parametre that is interpolated between the given sample points interface IInterpolator <T> Generic interface for interpolating a value between two points interface IIvpSolver <T> Solver for initial value problem ordinary differential equations interface INumericDifferentiator <T> Interface for any class that can calculate the derivative of a function interface IValueGenerator <T> Interface representing any object that can generate values class IntCalculator Calculator for integer arithmetic class IntFunction Native integer function class IntMatrix Integer matrix class IntRange Range of integers struct LUPSet <T> LU factorization with full pivoting decomposition class LinearInterpolation <T> Function interpolated using linear-interpolation class Matrix <T> Generic matrix class of type T class Point2 <T> X,Y Coordinate pair class Range <T> Generic range of values class RungeKuttaIvpSolver Solve initial value problems with Fourth Order Runge-Kutta method class SimpsonAdaptiveQuadratureIntegrator Adaptive quadrature integration using Simpson's method class SimpsonIntegrator Integration using Simpson's method class SmoothstepInterpolation Function interpolated using smoothstep class StepInterpolation Function interpolated using stepped-interpolation class TrapezoidalIntegrator Integration using the trapezoidal rule The documentation for this class was generated from the following file Numerics/src/Complex Analysis/ComplexExtensions.cs","title":"Classes"},{"location":"doxygen/namespace_system/","text":"Namespace System Class List > System The documentation for this class was generated from the following file Numerics/src/Complex Analysis/ComplexExtensions.cs","title":"Namespace System"},{"location":"doxygen/namespace_system/#namespace-system","text":"Class List > System The documentation for this class was generated from the following file Numerics/src/Complex Analysis/ComplexExtensions.cs","title":"Namespace System"},{"location":"doxygen/namespace_system_1_1_collections_1_1_generic/","text":"Namespace System::Collections::Generic Class List > Generic The documentation for this class was generated from the following file Numerics/src/Function/BaseInterpolatedFunction.cs","title":"Namespace System::Collections::Generic"},{"location":"doxygen/namespace_system_1_1_collections_1_1_generic/#namespace-systemcollectionsgeneric","text":"Class List > Generic The documentation for this class was generated from the following file Numerics/src/Function/BaseInterpolatedFunction.cs","title":"Namespace System::Collections::Generic"},{"location":"doxygen/namespace_system_1_1_linq/","text":"Namespace System::Linq Class List > Linq The documentation for this class was generated from the following file Numerics/src/Differentiation/FivePointDifferentiator.cs","title":"Namespace System::Linq"},{"location":"doxygen/namespace_system_1_1_linq/#namespace-systemlinq","text":"Class List > Linq The documentation for this class was generated from the following file Numerics/src/Differentiation/FivePointDifferentiator.cs","title":"Namespace System::Linq"},{"location":"doxygen/namespace_system_1_1_numerics/","text":"Namespace System::Numerics Class List > Numerics The documentation for this class was generated from the following file Numerics/src/Complex Analysis/ComplexExtensions.cs","title":"Namespace System::Numerics"},{"location":"doxygen/namespace_system_1_1_numerics/#namespace-systemnumerics","text":"Class List > Numerics The documentation for this class was generated from the following file Numerics/src/Complex Analysis/ComplexExtensions.cs","title":"Namespace System::Numerics"},{"location":"doxygen/namespace_system_1_1_text/","text":"Namespace System::Text Class List > Text The documentation for this class was generated from the following file Numerics/src/Linear Algebra/Matrix.cs","title":"Namespace System::Text"},{"location":"doxygen/namespace_system_1_1_text/#namespace-systemtext","text":"Class List > Text The documentation for this class was generated from the following file Numerics/src/Linear Algebra/Matrix.cs","title":"Namespace System::Text"},{"location":"doxygen/namespaces/","text":"Namespace List Here is a list of all namespaces with brief descriptions: namespace Qkmaxware namespace Numerics namespace System namespace Generic namespace Linq namespace Numerics namespace Text","title":"Namespace List"},{"location":"doxygen/namespaces/#namespace-list","text":"Here is a list of all namespaces with brief descriptions: namespace Qkmaxware namespace Numerics namespace System namespace Generic namespace Linq namespace Numerics namespace Text","title":"Namespace List"},{"location":"doxygen/pages/","text":"Related Pages Here is a list of all related documentation pages:","title":"Related Pages"},{"location":"doxygen/pages/#related-pages","text":"Here is a list of all related documentation pages:","title":"Related Pages"},{"location":"doxygen/struct_qkmaxware_1_1_numerics_1_1_l_u_p_set/","text":"Struct Qkmaxware::Numerics::LUPSet template <T T> Class List > Qkmaxware > Numerics > LUPSet LU factorization with full pivoting decomposition Public Functions Type Name LUPSet (T l, T u, T p, uint exchanges) Create a new LUP set Public Functions Documentation function LUPSet inline Qkmaxware::Numerics::LUPSet::LUPSet ( T l, T u, T p, uint exchanges ) Parameters: l lower matrix u upper matrix p pivot matrix exchanges number of exchanges The documentation for this class was generated from the following file Numerics/src/Linear Algebra/LUPSet.cs","title":"Struct Qkmaxware::Numerics::LUPSet"},{"location":"doxygen/struct_qkmaxware_1_1_numerics_1_1_l_u_p_set/#struct-qkmaxwarenumericslupset","text":"template <T T> Class List > Qkmaxware > Numerics > LUPSet LU factorization with full pivoting decomposition","title":"Struct Qkmaxware::Numerics::LUPSet"},{"location":"doxygen/struct_qkmaxware_1_1_numerics_1_1_l_u_p_set/#public-functions","text":"Type Name LUPSet (T l, T u, T p, uint exchanges) Create a new LUP set","title":"Public Functions"},{"location":"doxygen/struct_qkmaxware_1_1_numerics_1_1_l_u_p_set/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/struct_qkmaxware_1_1_numerics_1_1_l_u_p_set/#function-lupset","text":"inline Qkmaxware::Numerics::LUPSet::LUPSet ( T l, T u, T p, uint exchanges ) Parameters: l lower matrix u upper matrix p pivot matrix exchanges number of exchanges The documentation for this class was generated from the following file Numerics/src/Linear Algebra/LUPSet.cs","title":"function LUPSet"},{"location":"doxygen/variables/","text":"Variables m MatrixItemPrintOrder ( Matrix.cs )","title":"Variables"},{"location":"doxygen/variables/#variables","text":"","title":"Variables"},{"location":"doxygen/variables/#m","text":"MatrixItemPrintOrder ( Matrix.cs )","title":"m"},{"location":"linear%20algebra/matrices/","text":".katex img { display: block; position: absolute; width: 100%; height: inherit; } Matrices A matrix is a rectangular array of numbers, symbols, or expressions which are arranged into rows and columns. Typically matrices are referred to by their number of rows first then by the number of columns. An M \u00d7 N M \\times N M \u00d7 N matrix will have M M M rows and N N N columns. [ a 11 a 12 \u22ef a 1 n a 11 a 12 \u22ef a 1 n \u22ee \u22ee \u22f1 \u22ee a m 1 a m 2 \u22ef a m n ] \\begin{bmatrix} a_{11} & a_{12} & \\cdots & a_{1n} \\\\ a_{11} & a_{12} & \\cdots & a_{1n} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{m1} & a_{m2} & \\cdots & a_{mn} \\\\ \\end{bmatrix} \u23a3 \u23a2 \u23a2 \u23a2 \u23a2 \u23a1 \u200b a 1 1 \u200b a 1 1 \u200b \u22ee a m 1 \u200b \u200b a 1 2 \u200b a 1 2 \u200b \u22ee a m 2 \u200b \u200b \u22ef \u22ef \u22f1 \u22ef \u200b a 1 n \u200b a 1 n \u200b \u22ee a m n \u200b \u200b \u23a6 \u23a5 \u23a5 \u23a5 \u23a5 \u23a4 \u200b The base class for representing matrices in this library is the Matrix<T> class where T is the data-type used for the matrix elements. Like other parts of this library, the matrix class requires that a Calculator be provided so it knows how to perform element wise operations. The sub-classes IntMatrix , DoubleMatrix , and ComplexMatrix will set the appropriate calculator automatically. However, these sub-classes should rarely be used as method arguments or class properties; instead, use the templated base class. For instance, instead of DoubleMatrix as a method argument, use Matrix<double> instead to make the argument not specific to that subclass. This is important because all of the matrix operations return instances of the base class rather than of the specialized subclass. This library supports all the basic matrix arithmetic operations as well as some other common matrix operations, some of which are listed below. Addition IntMatrix xs = new int[2,2]{ {2, 2}, {2, 2} }; IntMatrix ys = new int[2,2]{ {1, 2}, {3, 4} }; var zs = xs + ys; Subtraction IntMatrix xs = new int[2,2]{ {2, 2}, {2, 2} }; IntMatrix ys = new int[2,2]{ {1, 2}, {3, 4} }; var zs = xs - ys; Scalar Multiplication IntMatrix xs = new int[2,2]{ {2, 2}, {2, 2} }; var xs4 = xs * 4; Multiplication IntMatrix xs = new int[2,2]{ {2, 2}, {2, 2} }; IntMatrix ys = new int[2,2]{ {1, 2}, {3, 4} }; var zs = xs * ys; Element-wise Operations DoubleMatrix xs = new double[2,2] { {1, 2}, {3, 4} }; DoubleMatrix ys = new double[2,2] { {9, 8}, {7, 6} }; var zs = Matrix<double>.Operate(xs, ys, (x, y) => x + y); Trace IntMatrix xs = new int[2,2]{ {2, 2}, {2, 2} }; var trace = xs.Trace(); Inverse DoubleMatrix m = new double[2,2]{ {1,2}, {3,4} } var inverse = m.Inverse(); Determinant DoubleMatrix m2 = new double[3,3]{ {2,9,4}, {7,5,3}, {6,1,8} }; var det = m2.Determinant();","title":"Matrices"},{"location":"linear%20algebra/matrices/#matrices","text":"A matrix is a rectangular array of numbers, symbols, or expressions which are arranged into rows and columns. Typically matrices are referred to by their number of rows first then by the number of columns. An M \u00d7 N M \\times N M \u00d7 N matrix will have M M M rows and N N N columns. [ a 11 a 12 \u22ef a 1 n a 11 a 12 \u22ef a 1 n \u22ee \u22ee \u22f1 \u22ee a m 1 a m 2 \u22ef a m n ] \\begin{bmatrix} a_{11} & a_{12} & \\cdots & a_{1n} \\\\ a_{11} & a_{12} & \\cdots & a_{1n} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{m1} & a_{m2} & \\cdots & a_{mn} \\\\ \\end{bmatrix} \u23a3 \u23a2 \u23a2 \u23a2 \u23a2 \u23a1 \u200b a 1 1 \u200b a 1 1 \u200b \u22ee a m 1 \u200b \u200b a 1 2 \u200b a 1 2 \u200b \u22ee a m 2 \u200b \u200b \u22ef \u22ef \u22f1 \u22ef \u200b a 1 n \u200b a 1 n \u200b \u22ee a m n \u200b \u200b \u23a6 \u23a5 \u23a5 \u23a5 \u23a5 \u23a4 \u200b The base class for representing matrices in this library is the Matrix<T> class where T is the data-type used for the matrix elements. Like other parts of this library, the matrix class requires that a Calculator be provided so it knows how to perform element wise operations. The sub-classes IntMatrix , DoubleMatrix , and ComplexMatrix will set the appropriate calculator automatically. However, these sub-classes should rarely be used as method arguments or class properties; instead, use the templated base class. For instance, instead of DoubleMatrix as a method argument, use Matrix<double> instead to make the argument not specific to that subclass. This is important because all of the matrix operations return instances of the base class rather than of the specialized subclass. This library supports all the basic matrix arithmetic operations as well as some other common matrix operations, some of which are listed below.","title":"Matrices"},{"location":"linear%20algebra/matrices/#addition","text":"IntMatrix xs = new int[2,2]{ {2, 2}, {2, 2} }; IntMatrix ys = new int[2,2]{ {1, 2}, {3, 4} }; var zs = xs + ys;","title":"Addition"},{"location":"linear%20algebra/matrices/#subtraction","text":"IntMatrix xs = new int[2,2]{ {2, 2}, {2, 2} }; IntMatrix ys = new int[2,2]{ {1, 2}, {3, 4} }; var zs = xs - ys;","title":"Subtraction"},{"location":"linear%20algebra/matrices/#scalar-multiplication","text":"IntMatrix xs = new int[2,2]{ {2, 2}, {2, 2} }; var xs4 = xs * 4;","title":"Scalar Multiplication"},{"location":"linear%20algebra/matrices/#multiplication","text":"IntMatrix xs = new int[2,2]{ {2, 2}, {2, 2} }; IntMatrix ys = new int[2,2]{ {1, 2}, {3, 4} }; var zs = xs * ys;","title":"Multiplication"},{"location":"linear%20algebra/matrices/#element-wise-operations","text":"DoubleMatrix xs = new double[2,2] { {1, 2}, {3, 4} }; DoubleMatrix ys = new double[2,2] { {9, 8}, {7, 6} }; var zs = Matrix<double>.Operate(xs, ys, (x, y) => x + y);","title":"Element-wise Operations"},{"location":"linear%20algebra/matrices/#trace","text":"IntMatrix xs = new int[2,2]{ {2, 2}, {2, 2} }; var trace = xs.Trace();","title":"Trace"},{"location":"linear%20algebra/matrices/#inverse","text":"DoubleMatrix m = new double[2,2]{ {1,2}, {3,4} } var inverse = m.Inverse();","title":"Inverse"},{"location":"linear%20algebra/matrices/#determinant","text":"DoubleMatrix m2 = new double[3,3]{ {2,9,4}, {7,5,3}, {6,1,8} }; var det = m2.Determinant();","title":"Determinant"},{"location":"linear%20algebra/vectors/","text":".katex img { display: block; position: absolute; width: 100%; height: inherit; } Vectors Vectors are often used to represent a point in some N N N dimensional space. Vectors can be written in either column form or row form depending on the context. In this library vectors are not treated any differently to Matrices. A column vector is just a matrix that only has one column and a row vector is a matrix that only has one row. [ a 1 a 2 \u22ee a n ] O R [ a 1 a 2 \u22ef a n ] \\begin{bmatrix} a_{1} \\\\ a_{2} \\\\ \\vdots \\\\ a_{n} \\end{bmatrix} OR \\begin{bmatrix} a_{1} & a_{2} & \\cdots & a_{n} \\end{bmatrix} \u23a3 \u23a2 \u23a2 \u23a2 \u23a2 \u23a1 \u200b a 1 \u200b a 2 \u200b \u22ee a n \u200b \u200b \u23a6 \u23a5 \u23a5 \u23a5 \u23a5 \u23a4 \u200b O R [ a 1 \u200b \u200b a 2 \u200b \u200b \u22ef \u200b a n \u200b \u200b ]","title":"Vectors"},{"location":"linear%20algebra/vectors/#vectors","text":"Vectors are often used to represent a point in some N N N dimensional space. Vectors can be written in either column form or row form depending on the context. In this library vectors are not treated any differently to Matrices. A column vector is just a matrix that only has one column and a row vector is a matrix that only has one row. [ a 1 a 2 \u22ee a n ] O R [ a 1 a 2 \u22ef a n ] \\begin{bmatrix} a_{1} \\\\ a_{2} \\\\ \\vdots \\\\ a_{n} \\end{bmatrix} OR \\begin{bmatrix} a_{1} & a_{2} & \\cdots & a_{n} \\end{bmatrix} \u23a3 \u23a2 \u23a2 \u23a2 \u23a2 \u23a1 \u200b a 1 \u200b a 2 \u200b \u22ee a n \u200b \u200b \u23a6 \u23a5 \u23a5 \u23a5 \u23a5 \u23a4 \u200b O R [ a 1 \u200b \u200b a 2 \u200b \u200b \u22ef \u200b a n \u200b \u200b ]","title":"Vectors"},{"location":"references/api/","text":"API Related Pages Functions Namespaces Classes Files","title":"API"},{"location":"references/api/#api","text":"Related Pages Functions Namespaces Classes Files","title":"API"},{"location":"references/resources/","text":"Resources Richard L. Burden, J. Douglas Faires (2011). Numerical Analysis Ninth Edition. ISBN-13:978-0-538-73351-9 James Stewart (2012). Single Variable Calculus: Early Transcendentals 7E. ISBN-13:978-0-538-49867-8","title":"Resources"},{"location":"references/resources/#resources","text":"Richard L. Burden, J. Douglas Faires (2011). Numerical Analysis Ninth Edition. ISBN-13:978-0-538-73351-9 James Stewart (2012). Single Variable Calculus: Early Transcendentals 7E. ISBN-13:978-0-538-49867-8","title":"Resources"}]}